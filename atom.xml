<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Cici's Blog]]></title>
  
  <link href="//atom.xml" rel="self"/>
  <link href="http://sunbingjie.tk/"/>
  <updated>2015-09-06T23:28:06.912Z</updated>
  <id>http://sunbingjie.tk/</id>
  
  <author>
    <name><![CDATA[Cici Sun]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Sudoku Solver, N-Queens, N-Queens II]]></title>
    <link href="http://sunbingjie.tk/2015/09/06/9.4/"/>
    <id>http://sunbingjie.tk/2015/09/06/9.4/</id>
    <published>2015-09-06T23:28:01.000Z</published>
    <updated>2015-09-06T23:28:01.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Sudoku_Solver">Sudoku Solver</h2>
<blockquote>
<p>Write a program to solve a Sudoku puzzle by filling the empty cells.<br>Empty cells are indicated by the character ‘.’.<br>You may assume that there will be only one unique solution.<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="pic"><br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png" alt="pic"></p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<ul>
<li>for each tuple that’s not a number already, try 1-9 numbers</li>
<li>if the board is still valid after placing the number, place it for now</li>
<li>continue to solve board, only if all number placed are valid can we return true</li>
<li>if we reached unvalid board, redo by setting the numbers to ‘.’</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solveSudoku</span>(<span class="keyword">char</span>[][] board){</div><div class="line">  	solver(board);</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">solver</span>(<span class="keyword">char</span>[][] board){</div><div class="line">  	</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;board.length; i++){</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;board[<span class="number">0</span>].length; j++){</div><div class="line">          	<span class="keyword">if</span>(board[i][j]==<span class="string">'.'</span>){</div><div class="line">          		<span class="keyword">for</span>(<span class="keyword">char</span> k=<span class="string">'1'</span>; k&lt;=<span class="string">'9'</span>; k++){</div><div class="line">          			<span class="keyword">if</span>(isValidSudoku(board, i, j, k)){</div><div class="line">              			board[i][j]=k; <span class="comment">//place number if valid</span></div><div class="line">          				<span class="keyword">if</span>(solver(board))</div><div class="line">          					{</div><div class="line">          						<span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//if after placed still can be solved</span></div><div class="line">          					}</div><div class="line">          				<span class="keyword">else</span>{</div><div class="line">              				board[i][j]=<span class="string">'.'</span>; <span class="comment">//else redo</span></div><div class="line">              			}</div><div class="line">          			}</div><div class="line">          		}</div><div class="line">          		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">          	}</div><div class="line">          }</div><div class="line">      }</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span>(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">char</span> tmp) {</div><div class="line">      <span class="comment">//row</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;board[<span class="number">0</span>].length;i++){</div><div class="line">          <span class="keyword">if</span>(board[row][i]==tmp) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      }</div><div class="line">      <span class="comment">//col</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;board.length;i++){</div><div class="line">      	<span class="keyword">if</span>(board[i][col]==tmp) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      }</div><div class="line">      <span class="comment">//tuple</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> m=row/<span class="number">3</span>*<span class="number">3</span>;m&lt;<span class="number">3</span>+row/<span class="number">3</span>*<span class="number">3</span>;m++){</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> n=col/<span class="number">3</span>*<span class="number">3</span>;n&lt;<span class="number">3</span>+col/<span class="number">3</span>*<span class="number">3</span>;n++){</div><div class="line">              <span class="keyword">if</span>(board[m][n]==tmp) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">          }</div><div class="line">      }</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  }</div></pre></td></tr></table></figure>

<hr>
<h2 id="N-Queens">N-Queens</h2>
<blockquote>
<p>The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.<br><img src="http://www.leetcode.com/wp-content/uploads/2012/03/8-queens.png" alt="pic"><br>Given an integer n, return all distinct solutions to the n-queens puzzle.<br>Each solution contains a distinct board configuration of the n-queens’ placement, where ‘Q’ and ‘.’ both indicate a queen and an empty space respectively.<br>For example,<br>There exist two distinct solutions to the 4-queens puzzle:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"> [<span class="string">".Q.."</span>,  // Solution <span class="number">1</span></div><div class="line">  <span class="string">"...Q"</span>,</div><div class="line">  <span class="string">"Q..."</span>,</div><div class="line">  <span class="string">"..Q."</span>],</div><div class="line"></div><div class="line"> [<span class="string">"..Q."</span>,  // Solution <span class="number">2</span></div><div class="line">  <span class="string">"Q..."</span>,</div><div class="line">  <span class="string">"...Q"</span>,</div><div class="line">  <span class="string">".Q.."</span>]</div><div class="line">]</div></pre></td></tr></table></figure>

<h3 id="Solution-1"><a href="http://blog.csdn.net/linhuanmars/article/details/20667175" target="_blank" rel="external">Solution</a></h3>
<ul>
<li><p>Very interesting problem: The queen can be moved any number of unoccupied squares in a straight line vertically, horizontally, or diagonally. So easily we come to the conclusion that each row can only stand 1 queen, as well as each column, diagonal.</p>
</li>
<li><p>Because of the previous observation, we can use a 1D array to store the positions, instead of using 2D array.<br>ColforRow[i] records the queen in row i is in which column</p>
</li>
<li><p>For each row, try all columns and if is valid, check for next row</p>
</li>
<li><p>When row == n, all rows have found their queens, these are valid solutions</p>
</li>
<li><p>What are valid positions for current row? Only need to check column and diagonal</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title">solveNQueens</span>(<span class="keyword">int</span> n) {</div><div class="line">   	List&lt;List&lt;String&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</div><div class="line">   	solve(res, n, <span class="number">0</span>, <span class="keyword">new</span> <span class="keyword">int</span>[n]);</div><div class="line">   	<span class="keyword">return</span> res;</div><div class="line">   } </div><div class="line">   </div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solve</span>(List&lt;List&lt;String&gt;&gt; res, <span class="keyword">int</span> n, <span class="keyword">int</span> row, <span class="keyword">int</span>[] ColforRow){</div><div class="line">   	<span class="keyword">if</span>(row==n){</div><div class="line">   		ArrayList&lt;String&gt; rowitem=<span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">   		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++){	</div><div class="line">   			StringBuilder rowstring = <span class="keyword">new</span> StringBuilder();</div><div class="line">   			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++){	</div><div class="line">   				<span class="keyword">if</span>(ColforRow[i]==j){</div><div class="line">   					rowstring.append(<span class="string">'Q'</span>);</div><div class="line">   				}</div><div class="line">   				<span class="keyword">else</span>{</div><div class="line">   					rowstring.append(<span class="string">'.'</span>);</div><div class="line">   				}</div><div class="line">   			}</div><div class="line">   			rowitem.add(rowstring.toString());</div><div class="line">   		}</div><div class="line">   		res.add(rowitem);</div><div class="line">   		<span class="keyword">return</span>;</div><div class="line">   	}</div><div class="line">   	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++){</div><div class="line">   		ColforRow[row] = i;</div><div class="line">   		<span class="keyword">if</span>(isValid(row, ColforRow)){</div><div class="line">   			solve(res, n, row+<span class="number">1</span>, ColforRow);</div><div class="line">   		}</div><div class="line">   	}</div><div class="line">   }</div><div class="line">   </div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span>(<span class="keyword">int</span> row, <span class="keyword">int</span>[] ColforRow){</div><div class="line">   	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++){</div><div class="line">   		<span class="keyword">if</span>(ColforRow[row]==ColforRow[i] || Math.abs(ColforRow[row]-ColforRow[i])==row-i) <span class="comment">// if same column, or same diagonal</span></div><div class="line">   			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   	}</div><div class="line">   	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="N-Queens_II">N-Queens II</h2>
<blockquote>
<p>Follow up for N-Queens problem.<br>Now, instead outputting board configurations, return the total number of distinct solutions.<br><img src="http://www.leetcode.com/wp-content/uploads/2012/03/8-queens.png" alt="pic"></p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<ul>
<li>Add count when a new solution is found (row==n)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">totalNQueens</span>(<span class="keyword">int</span> n) {</div><div class="line">      <span class="keyword">int</span>[] count={<span class="number">0</span>};</div><div class="line">  	solve(n, <span class="number">0</span>, <span class="keyword">new</span> <span class="keyword">int</span>[n], count);</div><div class="line">  	<span class="keyword">return</span> count[<span class="number">0</span>];</div><div class="line">  }</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solve</span>(<span class="keyword">int</span> n, <span class="keyword">int</span> row, <span class="keyword">int</span>[] ColforRow, <span class="keyword">int</span>[] count){</div><div class="line">  	<span class="keyword">if</span>(row==n){</div><div class="line">  		count[<span class="number">0</span>]+=<span class="number">1</span>;</div><div class="line">  		<span class="keyword">return</span>;</div><div class="line">  	}</div><div class="line">  	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++){</div><div class="line">  		ColforRow[row] = i;</div><div class="line">  		<span class="keyword">if</span>(isValid(row, ColforRow)){</div><div class="line">  			solve(n, row+<span class="number">1</span>, ColforRow, count);</div><div class="line">  		}</div><div class="line">  	}</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span>(<span class="keyword">int</span> row, <span class="keyword">int</span>[] ColforRow){</div><div class="line">  	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++){</div><div class="line">  		<span class="keyword">if</span>(ColforRow[row]==ColforRow[i] || Math.abs(ColforRow[row]-ColforRow[i])==row-i) <span class="comment">// if same column, or same diagonal</span></div><div class="line">  			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  	}</div><div class="line">  	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  }</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Sudoku_Solver">Sudoku Solver</h2>
<blockquote>
<p>Write a program to solve a Sudoku puzzle by filling the empty cells.<br>Empty cells are indicated by the character ‘.’.<br>You may assume that there will be only one unique solution.<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="pic"><br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png" alt="pic"></p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="Backtracking" scheme="http://sunbingjie.tk/tags/Backtracking/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Plus One, Largest Number, Pow(x, n), Sqrt(x) , Min Stack, Word Ladder, Word Ladder II]]></title>
    <link href="http://sunbingjie.tk/2015/09/06/1.24/"/>
    <id>http://sunbingjie.tk/2015/09/06/1.24/</id>
    <published>2015-09-06T23:27:49.000Z</published>
    <updated>2015-09-06T23:27:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Plus_One">Plus One</h2>
<blockquote>
<p>Given a non-negative number represented as an array of digits, plus one to the number.<br>The digits are stored such that the most significant digit is at the head of the list.</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<p>Just find the last 9…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">plusOne</span>(<span class="keyword">int</span>[] digits) {</div><div class="line">          <span class="keyword">int</span> i=digits.length-<span class="number">1</span>;</div><div class="line">          <span class="keyword">for</span>(;i&gt;=<span class="number">0</span>;i--){</div><div class="line">              <span class="keyword">if</span>(digits[i]!=<span class="number">9</span>) <span class="keyword">break</span>;</div><div class="line">          }</div><div class="line">            </div><div class="line">          <span class="keyword">if</span>(i==-<span class="number">1</span>){</div><div class="line">              <span class="keyword">int</span>[] res=<span class="keyword">new</span> <span class="keyword">int</span>[digits.length+<span class="number">1</span>];</div><div class="line">                      res[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">                      <span class="keyword">return</span> res;</div><div class="line">          }   </div><div class="line">           </div><div class="line">          <span class="keyword">else</span>{</div><div class="line">             <span class="keyword">int</span>[] res=<span class="keyword">new</span> <span class="keyword">int</span>[digits.length];</div><div class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++){</div><div class="line">                 res[j]=digits[j];</div><div class="line">             }</div><div class="line">             res[i]+=<span class="number">1</span>;</div><div class="line">             <span class="keyword">return</span> res;</div><div class="line">          } </div><div class="line"> </div><div class="line">      }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Largest_Number">Largest Number</h2>
<blockquote>
<p>Given a list of non negative integers, arrange them such that they form the largest number.<br>For example, given [3, 30, 34, 5, 9], the largest formed number is 9534330.<br>Note: The result may be very large, so you need to return a string instead of an integer.</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<p>Rewirte comparator (to desc), sort and add.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">StringComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>{</div><div class="line">       <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span>(String x, String y) {</div><div class="line">           <span class="keyword">if</span> (x.equals(y)) <span class="keyword">return</span> <span class="number">0</span>;            </div><div class="line">           <span class="keyword">return</span> -(x+y).compareTo(y+x);</div><div class="line">       }</div><div class="line">   }</div><div class="line"><span class="keyword">public</span> String <span class="title">largestNumber</span>(<span class="keyword">int</span>[] num){</div><div class="line">  String[] nums = <span class="keyword">new</span> String[num.length];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;num.length;i++){</div><div class="line">    nums[i]=String.valueOf(num[i]);</div><div class="line">  }</div><div class="line">  Comparator&lt;String&gt; comparator = <span class="keyword">new</span> StringComparator();</div><div class="line">  Arrays.sort(nums,comparator);</div><div class="line">  StringBuilder str = <span class="keyword">new</span> StringBuilder();</div><div class="line">  <span class="keyword">for</span>(String n:nums){</div><div class="line">    str.append(n);</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> str.charAt(<span class="number">0</span>)==<span class="string">'0'</span>?<span class="string">"0"</span>:str.toString();</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Pow(x,_n)">Pow(x, n)</h2>
<blockquote>
<p>Implement pow(x, n).</p>
</blockquote>
<h3 id="Recursive_Solution">Recursive Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pow</span>(<span class="keyword">double</span> x, <span class="keyword">int</span> n) {</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>)</div><div class="line">    {</div><div class="line">        n=-n;</div><div class="line">        x=<span class="number">1</span>/x;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> n%<span class="number">2</span>==<span class="number">0</span> ? pow(x*x,n/<span class="number">2</span>) : x*pow(x*x,n/<span class="number">2</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Sqrt(x)">Sqrt(x)</h2>
<blockquote>
<p>Implement int sqrt(int x).<br>Compute and return the square root of x.</p>
</blockquote>
<h3 id="Solution-2"><a href="http://www.cnblogs.com/pkuoliver/archive/2010/10/06/1844725.html" target="_blank" rel="external">Solution</a></h3>
<p>Beware of overflow problems…<br>mid*mid could overflow, instead of using long, compare mid with x/mid<br>but now we have to treat 0 and 1 as special cases…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sqrt</span>(<span class="keyword">int</span> x) {     </div><div class="line">       <span class="keyword">int</span> l=<span class="number">0</span>,r=x;</div><div class="line">       <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">       <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">       <span class="keyword">while</span>(l&lt;=r){</div><div class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(x/mid==mid) <span class="keyword">return</span> mid;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid&gt;x/mid){r=mid-<span class="number">1</span>;}</div><div class="line">        <span class="keyword">else</span> {l=mid+<span class="number">1</span>;}</div><div class="line">       }</div><div class="line">       <span class="keyword">return</span> r;      </div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Min_Stack">Min Stack</h2>
<blockquote>
<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.<br>push(x) — Push element x onto stack.<br>pop() — Removes the element on top of the stack.<br>top() — Get the top element.<br>getMin() — Retrieve the minimum element in the stack.</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<p>Just use an extra stack to keep track of the min values…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Stack&lt;Integer&gt; stk=<span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">   Stack&lt;Integer&gt; minstk=<span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">   </div><div class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span>(<span class="keyword">int</span> x) {</div><div class="line">       stk.push(x);</div><div class="line">       <span class="keyword">if</span>(minstk.isEmpty() || x&lt;=minstk.peek()){minstk.push(x);}</div><div class="line">   }</div><div class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span>() {</div><div class="line">    <span class="keyword">if</span>(stk.isEmpty()) <span class="keyword">return</span>;     </div><div class="line">       <span class="keyword">int</span> tmp=stk.pop();</div><div class="line">       <span class="keyword">if</span>(!minstk.isEmpty() && tmp==minstk.peek()){minstk.pop();}</div><div class="line">   }</div><div class="line">   <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span>() {</div><div class="line">    <span class="keyword">if</span>(stk.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> stk.peek();</div><div class="line">   }</div><div class="line">   <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span>() {</div><div class="line">       <span class="keyword">if</span>(!minstk.isEmpty()) <span class="keyword">return</span> minstk.peek();</div><div class="line">       <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Word_Ladder">Word Ladder</h2>
<blockquote>
<p>Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:<br>Only one letter can be changed at a time<br>Each intermediate word must exist in the dictionary<br>For example,<br>Given:<br>start = “hit”<br>end = “cog”<br>dict = [“hot”,”dot”,”dog”,”lot”,”log”]<br>As one shortest transformation is “hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; “cog”,<br>return its length 5.<br>Note:<br>Return 0 if there is no such transformation sequence.<br>All words have the same length.<br>All words contain only lowercase alphabetic characters.</p>
</blockquote>
<h3 id="BFS_Search_Solution">BFS Search Solution</h3>
<p>Naive approach might not give the shortest length, this problem is equavlent to finding the shortes path between start and end characters, in a graph where chars in dict are vertexes and vertexes with one char difference are connected.</p>
<p>Few more details to attend to:</p>
<p>length should start at 1, and return length+1<br>queue.size() and q.poll() is changing within each loop, so keep track of them</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span>(String start, String end, HashSet&lt;String&gt; dict) {</div><div class="line">    LinkedList&lt;String&gt; q=<span class="keyword">new</span> LinkedList&lt;String&gt;();</div><div class="line">    <span class="keyword">if</span>(start==<span class="keyword">null</span> || end==<span class="keyword">null</span> || dict==<span class="keyword">null</span> || dict.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> length=<span class="number">1</span>;</div><div class="line">    q.offer(start);</div><div class="line">    dict.remove(start);</div><div class="line">    <span class="keyword">while</span>(!q.isEmpty()){</div><div class="line">        <span class="keyword">int</span> count_level=q.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count_level;i++){</div><div class="line">            String cur=q.poll();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur.length();j++){</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">'a'</span>; c&lt;=<span class="string">'z'</span>;c++){</div><div class="line">                    String tmp=reorg(cur, j, c);</div><div class="line">                    <span class="keyword">if</span>(tmp.equals(end)) <span class="keyword">return</span> length+<span class="number">1</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(dict.contains(tmp)){dict.remove(tmp); q.offer(tmp);}</div><div class="line">                } </div><div class="line">            }</div><div class="line">        } length++;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div><div class="line"><span class="keyword">private</span> String <span class="title">reorg</span>(String s, <span class="keyword">int</span> i, <span class="keyword">char</span> c)</div><div class="line">{</div><div class="line">    <span class="keyword">char</span>[] tmparr=s.toCharArray();</div><div class="line">    tmparr[i]=c;</div><div class="line">    String res=<span class="keyword">new</span> String(tmparr);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Word_Ladder_II">Word Ladder II</h2>
<blockquote>
<p>Given two words (start and end), and a dictionary, find all shortest transformation sequence(s) from start to end, such that:<br>Only one letter can be changed at a time<br>Each intermediate word must exist in the dictionary<br>For example,<br>Given:<br>start = “hit”<br>end = “cog”<br>dict = [“hot”,”dot”,”dog”,”lot”,”log”]<br>Return</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="string">"hit"</span>,<span class="string">"hot"</span>,<span class="string">"dot"</span>,<span class="string">"dog"</span>,<span class="string">"cog"</span>],</div><div class="line">  [<span class="string">"hit"</span>,<span class="string">"hot"</span>,<span class="string">"lot"</span>,<span class="string">"log"</span>,<span class="string">"cog"</span>]</div><div class="line">]</div></pre></td></tr></table></figure>

<p>Note:<br>All words have the same length.<br>All words contain only lowercase alphabetic characters.</p>
<p>人家的解法都看晕了…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</div><div class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;String&gt;&gt; <span class="title">findLadders</span>(String start, String end, HashSet&lt;String&gt; dict) {</div><div class="line">        </div><div class="line">        <span class="comment">// Start typing your Java solution below</span></div><div class="line">        <span class="comment">// DO NOT write main() function              </span></div><div class="line">        </div><div class="line">        HashMap&lt;String, HashSet&lt;String&gt;&gt; neighbours = <span class="keyword">new</span> HashMap&lt;String, HashSet&lt;String&gt;&gt;();</div><div class="line">        </div><div class="line">        dict.add(start);</div><div class="line">        dict.add(end);</div><div class="line">        </div><div class="line">        <span class="comment">// init adjacent graph        </span></div><div class="line">        <span class="keyword">for</span>(String str : dict){</div><div class="line">            calcNeighbours(neighbours, str, dict);</div><div class="line">        }</div><div class="line">        </div><div class="line">        ArrayList&lt;ArrayList&lt;String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;String&gt;&gt;();</div><div class="line">        </div><div class="line">        <span class="comment">// BFS search queue</span></div><div class="line">        LinkedList&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</div><div class="line">        queue.add(<span class="keyword">new</span> Node(<span class="keyword">null</span>, start, <span class="number">1</span>));</div><div class="line">        </div><div class="line">        <span class="comment">// BFS level</span></div><div class="line">        <span class="keyword">int</span> previousLevel = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="comment">// mark which nodes have been visited, to break infinite loop</span></div><div class="line">        HashMap&lt;String, Integer&gt; visited = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;(); </div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty()){</div><div class="line">            Node n = queue.pollFirst();            </div><div class="line">            <span class="keyword">if</span>(end.equals(n.str)){ </div><div class="line">                <span class="comment">// fine one path, check its length, if longer than previous path it's valid</span></div><div class="line">                <span class="comment">// otherwise all possible short path have been found, should stop</span></div><div class="line">                <span class="keyword">if</span>(previousLevel == <span class="number">0</span> || n.level == previousLevel){</div><div class="line">                    previousLevel = n.level;</div><div class="line">                    findPath(n, result);                    </div><div class="line">                }<span class="keyword">else</span> {</div><div class="line">                    <span class="comment">// all path with length *previousLevel* have been found</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                }                </div><div class="line">            }<span class="keyword">else</span> {</div><div class="line">                HashSet&lt;String&gt; set = neighbours.get(n.str);                 </div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(set == <span class="keyword">null</span> || set.isEmpty()) <span class="keyword">continue</span>;</div><div class="line">                <span class="comment">// note: I'm not using simple for(String s: set) here. This is to avoid hashset's</span></div><div class="line">                <span class="comment">// current modification exception.</span></div><div class="line">                ArrayList&lt;String&gt; toRemove = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">                <span class="keyword">for</span> (String s : set) {</div><div class="line">                    </div><div class="line">                    <span class="comment">// if s has been visited before at a smaller level, there is already a shorter </span></div><div class="line">                    <span class="comment">// path from start to s thus we should ignore s so as to break infinite loop; if </span></div><div class="line">                    <span class="comment">// on the same level, we still need to put it into queue.</span></div><div class="line">                    <span class="keyword">if</span>(visited.containsKey(s)){</div><div class="line">                        Integer occurLevel = visited.get(s);</div><div class="line">                        <span class="keyword">if</span>(n.level+<span class="number">1</span> &gt; occurLevel){</div><div class="line">                            neighbours.get(s).remove(n.str);</div><div class="line">                            toRemove.add(s);</div><div class="line">                            <span class="keyword">continue</span>;</div><div class="line">                        }</div><div class="line">                    }</div><div class="line">                    visited.put(s,  n.level+<span class="number">1</span>);</div><div class="line">                    queue.add(<span class="keyword">new</span> Node(n, s, n.level + <span class="number">1</span>));</div><div class="line">                    <span class="keyword">if</span>(neighbours.containsKey(s))</div><div class="line">                        neighbours.get(s).remove(n.str);</div><div class="line">                }</div><div class="line">                <span class="keyword">for</span>(String s: toRemove){</div><div class="line">                    set.remove(s);</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPath</span>(Node n, ArrayList&lt;ArrayList&lt;String&gt;&gt; result){</div><div class="line">        ArrayList&lt;String&gt; path = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        Node p = n;</div><div class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span>){</div><div class="line">            path.add(<span class="number">0</span>, p.str);</div><div class="line">            p = p.parent; </div><div class="line">        }</div><div class="line">        result.add(path);</div><div class="line">    }</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * complexity: O(26*str.length*dict.size)=O(L*N)</div><div class="line">     */</div><div class="line">    <span class="keyword">void</span> calcNeighbours(HashMap&lt;String, HashSet&lt;String&gt;&gt; neighbours, String str, HashSet&lt;String&gt; dict) {</div><div class="line">        <span class="keyword">int</span> length = str.length();</div><div class="line">        <span class="keyword">char</span> [] chars = str.toCharArray();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) {</div><div class="line">            </div><div class="line">            <span class="keyword">char</span> old = chars[i]; </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; c++) {</div><div class="line">                <span class="keyword">if</span> (c == old)  <span class="keyword">continue</span>;</div><div class="line">                chars[i] = c;</div><div class="line">                String newstr = <span class="keyword">new</span> String(chars);                </div><div class="line">                </div><div class="line">                <span class="keyword">if</span> (dict.contains(newstr)) {</div><div class="line">                    HashSet&lt;String&gt; set = neighbours.get(str);</div><div class="line">                    <span class="keyword">if</span> (set != <span class="keyword">null</span>) {</div><div class="line">                        set.add(newstr);</div><div class="line">                    } <span class="keyword">else</span> {</div><div class="line">                        HashSet&lt;String&gt; newset = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">                        newset.add(newstr);</div><div class="line">                        neighbours.put(str, newset);</div><div class="line">                    }</div><div class="line">                }                </div><div class="line">            }</div><div class="line">            chars[i] = old;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</div><div class="line">        <span class="keyword">public</span> Node parent;</div><div class="line">        <span class="keyword">public</span> String str;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> level;</div><div class="line">        <span class="keyword">public</span> <span class="title">Node</span>(Node p, String s, <span class="keyword">int</span> l){</div><div class="line">            parent = p;</div><div class="line">            str = s;</div><div class="line">            level = l;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>





<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fsnow-man-4%2Fthe-xx-intro-themmmixx-long&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>




]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Plus_One">Plus One</h2>
<blockquote>
<p>Given a non-negative number represented as an array of digits, plus one to the number.<br>The digits are stored such that the most significant digit is at the head of the list.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Math" scheme="http://sunbingjie.tk/tags/Math/"/>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="String" scheme="http://sunbingjie.tk/tags/String/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Valid Parentheses, Longest Valid Parentheses, Generate Parentheses, Letter Combinations of a Phone Number, Valid Sudoku]]></title>
    <link href="http://sunbingjie.tk/2015/09/05/9.2/"/>
    <id>http://sunbingjie.tk/2015/09/05/9.2/</id>
    <published>2015-09-06T03:10:32.000Z</published>
    <updated>2015-09-06T03:10:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Valid_Parentheses">Valid Parentheses</h2>
<blockquote>
<p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.<br>The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<p>Just use a stack, push when empty, or left parenthese found; pop when found a match.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span>(String s) {</div><div class="line">    Stack&lt;Character&gt; stk=<span class="keyword">new</span> Stack&lt;Character&gt;();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++){</div><div class="line">        Character tmp=s.charAt(i);</div><div class="line">        <span class="keyword">if</span>(stk.isEmpty() && (tmp==<span class="string">')'</span> || tmp==<span class="string">']'</span> || tmp==<span class="string">'}'</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>(!stk.isEmpty() && isMatch(stk.peek(), tmp)) </div><div class="line">            stk.pop();</div><div class="line">        <span class="keyword">else</span> stk.push(tmp);</div><div class="line">    } <span class="keyword">return</span> stk.isEmpty();</div><div class="line">}</div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMatch</span>(Character a, Character b){</div><div class="line">    <span class="keyword">if</span>(a==<span class="string">'('</span> && b==<span class="string">')'</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span>(a==<span class="string">'['</span> && b==<span class="string">']'</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span>(a==<span class="string">'{'</span> && b==<span class="string">'}'</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Longest_Valid_Parentheses">Longest Valid Parentheses</h2>
<blockquote>
<p>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.<br>For “(()”, the longest valid parentheses substring is “()”, which has length = 2.<br>Another example is “)()())”, where the longest valid parentheses substring is “()()”, which has length = 4.</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span>(String s) {</div><div class="line">		<span class="keyword">if</span> (s==<span class="keyword">null</span>||s.length()==<span class="number">0</span>){</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> maxLen=<span class="number">0</span>;</div><div class="line">		Stack&lt;Integer&gt; stack=<span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length();i++){</div><div class="line">			<span class="keyword">if</span> (s.charAt(i)==<span class="string">'('</span>){</div><div class="line">				stack.push(i);</div><div class="line">			}<span class="keyword">else</span>{</div><div class="line">				<span class="keyword">if</span>(stack.isEmpty()){</div><div class="line">					<span class="comment">// record the position of first left parenthesis as start</span></div><div class="line">					start=i+<span class="number">1</span>;</div><div class="line">				}</div><div class="line">				<span class="keyword">else</span>{</div><div class="line">					stack.pop();</div><div class="line">					<span class="comment">// if stack is empty means all valid pairs are gone,current whole length i-start+1 is longest</span></div><div class="line">					<span class="keyword">if</span> (stack.isEmpty()){</div><div class="line">						maxLen=Math.max(i-start+<span class="number">1</span>, maxLen);</div><div class="line">					}</div><div class="line">					<span class="keyword">else</span>{</div><div class="line">						<span class="comment">// if stack is not empty, then for current i the longest valid parenthesis length is i-stack.peek()</span></div><div class="line">						maxLen=Math.max(i-stack.peek(),maxLen);</div><div class="line">					}</div><div class="line">				}</div><div class="line">			}</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> maxLen;</div><div class="line">	}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Generate_Parentheses">Generate Parentheses</h2>
<blockquote>
<p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.<br>For example, given n = 3, a solution set is:<br>“((()))”, “(()())”, “(())()”, “()(())”, “()()()”</p>
</blockquote>
<h3 id="DFS_+_Backtracking_Solution">DFS + Backtracking Solution</h3>
<ul>
<li>left/right represents how many l/r brackets left for use</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">generateParenthesis</span>(<span class="keyword">int</span> n) {</div><div class="line">    ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(); </div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">    dfs(res, sb, n, n);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">    </div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>(ArrayList&lt;String&gt; res, StringBuilder sb,<span class="keyword">int</span> left, <span class="keyword">int</span> right){</div><div class="line">    <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(left == <span class="number">0</span> && right == <span class="number">0</span>){</div><div class="line">        res.add(sb.toString());</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(left&gt;<span class="number">0</span>){</div><div class="line">        dfs(res,sb.append(<span class="string">'('</span>), left-<span class="number">1</span>, right);</div><div class="line">        sb.deleteCharAt(sb.length()-<span class="number">1</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(right&gt;<span class="number">0</span>){</div><div class="line">        dfs(res,sb.append(<span class="string">')'</span>), left, right-<span class="number">1</span>);</div><div class="line">        sb.deleteCharAt(sb.length()-<span class="number">1</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>If we use String here, no need to delete when backtracking</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">generateParenthesis</span>(<span class="keyword">int</span> n) {</div><div class="line">    ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    String tmp = <span class="string">""</span>; </div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">    dfs(res, tmp, n, n);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">    </div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>(ArrayList&lt;String&gt; res, String tmp, <span class="keyword">int</span> left, <span class="keyword">int</span> right){</div><div class="line">    <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(left == <span class="number">0</span> && right == <span class="number">0</span>){</div><div class="line">        res.add(<span class="keyword">new</span> String(tmp));</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(left&gt;<span class="number">0</span>){</div><div class="line">        dfs(res,tmp+<span class="string">"("</span>, left-<span class="number">1</span>, right);</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(right&gt;<span class="number">0</span>){</div><div class="line">        dfs(res,tmp+<span class="string">")"</span>, left, right-<span class="number">1</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Letter_Combinations_of_a_Phone_Number">Letter Combinations of a Phone Number</h2>
<blockquote>
<p>Given a digit string, return all possible letter combinations that the number could represent.<br>A mapping of digit to letters (just like on the telephone buttons) is given below.<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt=""><br>Input:Digit string “23”<br>Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].</p>
</blockquote>
<h3 id="Iterative_Solution">Iterative Solution</h3>
<ul>
<li>Simple BFS, use a Queue and store all combinations in a list</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> LinkedList&lt;String&gt; <span class="title">letterCombinations</span>(String digits) {</div><div class="line">    String map[] = {<span class="string">""</span>,<span class="string">""</span>,<span class="string">"abc"</span>,<span class="string">"def"</span>,<span class="string">"ghi"</span>,<span class="string">"jkl"</span>,<span class="string">"mno"</span>,<span class="string">"pqrs"</span>,<span class="string">"tuv"</span>,<span class="string">"wxyz"</span>};</div><div class="line">    LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;String&gt;();</div><div class="line">    <span class="keyword">if</span>(digits==<span class="keyword">null</span> || digits.length()==<span class="number">0</span>) <span class="keyword">return</span> list;</div><div class="line">    list.add(<span class="string">""</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;digits.length();i++){</div><div class="line">        <span class="keyword">int</span> num = digits.charAt(i) - <span class="string">'0'</span>;</div><div class="line">        <span class="keyword">int</span> size = list.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++){</div><div class="line">            String tmp = list.poll();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;map[num].length();k++){</div><div class="line">                list.add(tmp + map[num].charAt(k));</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> list;</div><div class="line">}</div></pre></td></tr></table></figure>



<h3 id="DFS_Solution">DFS Solution</h3>
<ul>
<li>Template DFS</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">letterCombinations</span>(String digits) {</div><div class="line">    String map[] = {<span class="string">""</span>,<span class="string">""</span>,<span class="string">"abc"</span>,<span class="string">"def"</span>,<span class="string">"ghi"</span>,<span class="string">"jkl"</span>,<span class="string">"mno"</span>,<span class="string">"pqrs"</span>,<span class="string">"tuv"</span>,<span class="string">"wxyz"</span>};</div><div class="line">    StringBuilder tmp = <span class="keyword">new</span> StringBuilder();</div><div class="line">    ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    <span class="keyword">if</span>(digits==<span class="keyword">null</span> || digits.length()==<span class="number">0</span>) <span class="keyword">return</span> res; <span class="comment">//[""] is not []...</span></div><div class="line">    dfs(digits, map, tmp, res, <span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>(String digits, String[] map, StringBuilder tmp, ArrayList&lt;String&gt; res, <span class="keyword">int</span> height){</div><div class="line">    <span class="keyword">if</span>(height == digits.length()){</div><div class="line">        res.add(tmp.toString());</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="keyword">int</span> num = digits.charAt(height)-<span class="string">'0'</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;map[num].length();i++){</div><div class="line">         tmp.append(map[num].charAt(i));</div><div class="line">         dfs(digits, map, tmp, res, height+<span class="number">1</span>);</div><div class="line">         tmp.deleteCharAt(tmp.length()-<span class="number">1</span>); <span class="comment">//delete when backtracking..</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Valid_Sudoku">Valid Sudoku</h2>
<blockquote>
<p>Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.<br>The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="pic"><br>A partially filled sudoku which is valid.<br>Note:<br>A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<p>Three HashSets, return false when add failure.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span>(<span class="keyword">char</span>[][] board) {</div><div class="line">    <span class="keyword">int</span> len=board[<span class="number">0</span>].length;</div><div class="line">    <span class="comment">//column</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len;i++){</div><div class="line">        HashSet&lt;Character&gt; col=<span class="keyword">new</span> HashSet&lt;Character&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ;j&lt;len;j++){</div><div class="line">        <span class="keyword">if</span>(board[j][i]!=<span class="string">'.'</span> && !col.add(board[j][i])) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    }</div><div class="line">    <span class="comment">//row</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len;i++){</div><div class="line">        HashSet&lt;Character&gt; row=<span class="keyword">new</span> HashSet&lt;Character&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ;j&lt;len;j++){</div><div class="line">        <span class="keyword">if</span>(board[i][j]!=<span class="string">'.'</span> && !row.add(board[i][j])) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    }</div><div class="line">    <span class="comment">//tuple</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++){</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++){</div><div class="line">            HashSet&lt;Character&gt; tup=<span class="keyword">new</span> HashSet&lt;Character&gt;();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=i*<span class="number">3</span>;m&lt;<span class="number">3</span>+i*<span class="number">3</span>;m++){</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> n=j*<span class="number">3</span>;n&lt;<span class="number">3</span>+j*<span class="number">3</span>;n++){</div><div class="line">                    <span class="keyword">if</span>(board[m][n]!=<span class="string">'.'</span> && !tup.add(board[m][n])) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Valid_Parentheses">Valid Parentheses</h2>
<blockquote>
<p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.<br>The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Math" scheme="http://sunbingjie.tk/tags/Math/"/>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="Stack" scheme="http://sunbingjie.tk/tags/Stack/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Single Number, Single Number II, Decode Ways, Triangle]]></title>
    <link href="http://sunbingjie.tk/2015/09/03/4.12/"/>
    <id>http://sunbingjie.tk/2015/09/03/4.12/</id>
    <published>2015-09-04T03:42:27.000Z</published>
    <updated>2015-09-04T03:42:27.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Single_Number">Single Number</h2>
<blockquote>
<p>Given an array of integers, every element appears twice except for one. Find that single one.<br>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
</blockquote>
<a id="more"></a>
<h3 id="O(n)_Memory_O(n)_Time_Solution">O(n) Memory O(n) Time Solution</h3>
<p>LTE? With an instantiated Iterator I can pass the OJ…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span>(<span class="keyword">int</span>[] A) {</div><div class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</div><div class="line">    <span class="keyword">for</span>(Integer i:A){</div><div class="line">        <span class="keyword">if</span>(set.contains(i)) set.remove(i);</div><div class="line">        <span class="keyword">else</span> set.add(i);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> set.iterator().next();</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="XOR_Solution">XOR Solution</h3>
<p><a href="http://wezly.iteye.com/blog/1120823" target="_blank" rel="external">Similar Problem</a></p>
<ul>
<li><p>n+1 elements in range n, find the duplicate. take XOR between 1 to n, and the given array.</p>
</li>
<li><p>Here we use the property x^x=0，x^0=x</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span>(<span class="keyword">int</span>[] A) {</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(Integer i:A){</div><div class="line">        res ^= i;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Single_Number_II">Single Number II</h2>
<blockquote>
<p>Given an array of integers, every element appears three times except for one. Find that single one.<br>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
</blockquote>
<h3 id="Solution">Solution</h3>
<ul>
<li>count 1 in each bit position among all A numbers.</li>
<li>if a count can be divided by 3, then it does not contain single number</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span>(<span class="keyword">int</span>[] A) {</div><div class="line">    <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++){</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;A.length;j++){</div><div class="line">            <span class="keyword">if</span>((A[j]&gt;&gt;i & <span class="number">1</span>)==<span class="number">1</span>){</div><div class="line">                count[i]+=<span class="number">1</span>; <span class="comment">//increment bit bin</span></div><div class="line">            }</div><div class="line">        }</div><div class="line">        res |= count[i]%<span class="number">3</span> &lt;&lt; i; <span class="comment">//recover single number</span></div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Decode_Ways">Decode Ways</h2>
<blockquote>
<p>A message containing letters from A-Z is being encoded to numbers using the following mapping:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'A'</span> -&gt; <span class="number">1</span></div><div class="line"><span class="string">'B'</span> -&gt; <span class="number">2</span></div><div class="line"><span class="keyword">...</span></div><div class="line"><span class="string">'Z'</span> -&gt; <span class="number">26</span></div></pre></td></tr></table></figure>

<p>Given an encoded message containing digits, determine the total number of ways to decode it.<br>For example,<br>Given encoded message “12”, it could be decoded as “AB” (1 2) or “L” (12).<br>The number of ways decoding “12” is 2.</p>
<h3 id="Recursive_Solution">Recursive Solution</h3>
<ul>
<li>quite straight forward…? LTE..</li>
<li>when at i, we can decode i separately , or decode i,i+1 as a whole</li>
<li>checking conditions: 1X or &lt;26, then we can return substr(1) + substr(2). </li>
<li>only when len==2 under this case, s.len would be 0, and return 1</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span>(String s) {</div><div class="line">    <span class="keyword">if</span>(s.length() == <span class="number">0</span> || s.length() == <span class="number">1</span> && s.charAt(<span class="number">0</span>) != <span class="string">'0'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(s.charAt(<span class="number">0</span>) == <span class="string">'0'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(s.charAt(<span class="number">0</span>) == <span class="string">'1'</span> || (s.charAt(<span class="number">0</span>) == <span class="string">'2'</span> && s.charAt(<span class="number">1</span>) &lt;= <span class="string">'6'</span>))</div><div class="line">        <span class="keyword">return</span> numDecodings(s.substring(<span class="number">1</span>)) + numDecodings(s.substring(<span class="number">2</span>));</div><div class="line">    <span class="keyword">return</span> numDecodings(s.substring(<span class="number">1</span>));</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="DP_Solution">DP Solution</h3>
<p>＋ ways[i] represents the # of decoding from i to end</p>
<ul>
<li>given s[i] is not ‘0’, we can always decode s in ways[i+1] ways, viewing s[i] as a separate code, ways[i] = ways[i+1]</li>
<li>check if i,i+1 forms a valid code, ways[i] = ways[i+1] + ways[i+2] </li>
<li>if s[i] is ‘0’, ways[i] is set to 0</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span>(String s) {</div><div class="line">    <span class="keyword">if</span>(s.length() == <span class="number">0</span> || s==<span class="keyword">null</span> || s.charAt(<span class="number">0</span>) == <span class="string">'0'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span>[] ways = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()+<span class="number">1</span>];</div><div class="line">    ways[s.length()] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s.length()-<span class="number">1</span>; i&gt;=<span class="number">0</span>;i--){</div><div class="line">        <span class="keyword">if</span>(s.charAt(i) == <span class="string">'0'</span>) ways[i]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> ways[i] = ways[i+<span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>(i+<span class="number">1</span>&lt;s.length() && (s.charAt(i) == <span class="string">'1'</span> || s.charAt(i) == <span class="string">'2'</span> && s.charAt(i+<span class="number">1</span>) &lt;= <span class="string">'6'</span>))</div><div class="line">            ways[i] = ways[i] + ways[i+<span class="number">2</span>];</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> ways[<span class="number">0</span>];</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="DP_forward">DP forward</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span>(String s) {</div><div class="line">    <span class="keyword">int</span>[] ways = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()+<span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(s.charAt(<span class="number">0</span>)==<span class="string">'0'</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    ways[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    ways[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=s.length();i++){</div><div class="line">        <span class="keyword">if</span>(s.charAt(i-<span class="number">1</span>)==<span class="string">'0'</span>){</div><div class="line">            <span class="keyword">if</span>(s.charAt(i-<span class="number">2</span>)==<span class="string">'1'</span> ||s.charAt(i-<span class="number">2</span>)==<span class="string">'2'</span>){ways[i]=ways[i-<span class="number">2</span>]; }</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span>{</div><div class="line">            <span class="keyword">if</span>(s.charAt(i-<span class="number">1</span>)&lt;=<span class="string">'6'</span> && s.charAt(i-<span class="number">2</span>)==<span class="string">'2'</span> || s.charAt(i-<span class="number">2</span>)==<span class="string">'1'</span>){</div><div class="line">                ways[i]=ways[i-<span class="number">1</span>]+ways[i-<span class="number">2</span>];</div><div class="line">            }   </div><div class="line">            <span class="keyword">else</span> ways[i]=ways[i-<span class="number">1</span>];</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> ways[s.length()];</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="O(1)_Space_DP">O(1) Space DP</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span>(String s) {</div><div class="line">    <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length()==<span class="number">0</span> || s.charAt(<span class="number">0</span>)==<span class="string">'0'</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> twopre = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> onepre = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length();i++){</div><div class="line">        <span class="keyword">if</span>(s.charAt(i)==<span class="string">'0'</span>){</div><div class="line">            <span class="keyword">if</span>(s.charAt(i-<span class="number">1</span>)==<span class="string">'1'</span> ||s.charAt(i-<span class="number">1</span>)==<span class="string">'2'</span>){cur = twopre; }</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span>{</div><div class="line">            <span class="keyword">if</span>(s.charAt(i)&lt;=<span class="string">'6'</span> && s.charAt(i-<span class="number">1</span>)==<span class="string">'2'</span> || s.charAt(i-<span class="number">1</span>)==<span class="string">'1'</span>){</div><div class="line">                cur = twopre + onepre;</div><div class="line">            }   </div><div class="line">            <span class="keyword">else</span> cur=onepre;</div><div class="line">        }</div><div class="line">        twopre=onepre;</div><div class="line">        onepre=cur;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> cur;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Triangle">Triangle</h2>
<blockquote>
<p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below<br>For example, given the following triangle</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">     [<span class="number">2</span>],</div><div class="line">    [<span class="number">3</span>,<span class="number">4</span>],</div><div class="line">   [<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>],</div><div class="line">  [<span class="number">4</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">3</span>]</div><div class="line">]</div></pre></td></tr></table></figure>

<p>The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).<br>Note:<br>Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.</p>
<h3 id="Inplace_DP_Solution">Inplace DP Solution</h3>
<ul>
<li>start from second to end level, change each element to the smaller sum with lower level’s two adjacent elements</li>
<li>the top one will be the shortest path</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span>(List&lt;List&lt;Integer&gt;&gt; triangle) {</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=triangle.size()-<span class="number">2</span>; i&gt;=<span class="number">0</span>; i--){</div><div class="line">        List&lt;Integer&gt; tmp = triangle.get(i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;tmp.size();j++){</div><div class="line">            tmp.set(j, tmp.get(j) + Math.min(triangle.get(i+<span class="number">1</span>).get(j),triangle.get(i+<span class="number">1</span>).get(j+<span class="number">1</span>)));</div><div class="line">        }    </div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> triangle.get(<span class="number">0</span>).get(<span class="number">0</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Finterscope%2Flana-del-rey-video-games&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Single_Number">Single Number</h2>
<blockquote>
<p>Given an array of integers, every element appears twice except for one. Find that single one.<br>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="DFS" scheme="http://sunbingjie.tk/tags/DFS/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="Bit Manipulation" scheme="http://sunbingjie.tk/tags/Bit-Manipulation/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Great Tree-List Recursion Problem, LRU Cache, Search Insert Position, Longest Common Prefix, Linked List Cycle, Linked List Cycle II]]></title>
    <link href="http://sunbingjie.tk/2015/09/03/4.18/"/>
    <id>http://sunbingjie.tk/2015/09/03/4.18/</id>
    <published>2015-09-04T03:39:23.000Z</published>
    <updated>2015-09-04T03:39:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="First_Problem_ఠ_ఠ">First Problem ఠ_ఠ</h2>
<blockquote>
<p>Convert a given Binary Tree to Doubly Linked List</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<p>Inorder traversal, then link each value…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> DListNode pre = <span class="keyword">new</span> DListNode();</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> DListNode dummy = pre;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">btreetolist</span>(TreeNode r){</div><div class="line">    <span class="keyword">if</span>(r==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    btreetolist(r.left);</div><div class="line">    DListNode cur = <span class="keyword">new</span> DListNode(r);</div><div class="line">    cur.prev = pre;</div><div class="line">    pre.next = cur;</div><div class="line">    pre = cur;</div><div class="line">    btreetolist(r.right);</div><div class="line">    }</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">    TreeNode root = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</div><div class="line">    TreeNode l = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</div><div class="line">    TreeNode r = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</div><div class="line">    root.left = l; root.right=r;</div><div class="line">    btreetolist(root);</div><div class="line">    System.out.println(dummy.next.val.val);</div><div class="line">    System.out.println(dummy.next.next.val.val);</div><div class="line">    System.out.println(dummy.next.next.next.val.val);</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="The_Great_Tree-List_Recursion_Problem"><a href="http://cslibrary.stanford.edu/109/TreeListRecursion.html" target="_blank" rel="external">The Great Tree-List Recursion Problem</a></h2>
<blockquote>
<p>Here’s the formal problem statement: Write a recursive function treeToList(Node root) that takes an ordered binary tree and rearranges the internal pointers to make a circular doubly linked list out of the tree nodes. The “previous” pointers should be stored in the “small” field and the “next” pointers should be stored in the “large” field. The list should be arranged so that the nodes are in increasing order. Return the head pointer to the new list. The operation can be done in O(n) time — essentially operating on each node once. Basically take figure-1 as input and rearrange the pointers to make figure-2.</p>
</blockquote>
<p><img src="http://cslibrary.stanford.edu/109/tree.gif" alt=""><br><img src="http://cslibrary.stanford.edu/109/list.gif" alt=""></p>
<h3 id="Solution-1">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">This is the simple Node class from which the tree and list</div><div class="line">are built. This does not have any methods -- it's just used</div><div class="line">as dumb storage by TreeList.</div><div class="line">The code below tries to be clear where it treats a Node pointer</div><div class="line">as a tree vs. where it is treated as a list.</div><div class="line"> */</div><div class="line">class Node {</div><div class="line">    <span class="keyword">int</span> data;</div><div class="line">    Node small;</div><div class="line">    Node large;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">Node</span>(<span class="keyword">int</span> data) {</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">        small = <span class="keyword">null</span>;</div><div class="line">        large = <span class="keyword">null</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">TreeList main methods:</div><div class="line">-join() -- utility to connect two list nodes</div><div class="line">-append() -- utility to append two lists</div><div class="line">-treeToList() -- the core recursive function</div><div class="line">-treeInsert() -- used to build the tree</div><div class="line"> */</div><div class="line">class TreeList {</div><div class="line">    <span class="comment">/*</span></div><div class="line">  helper function -- given two list nodes, join them</div><div class="line">  together so the second immediately follow the first.</div><div class="line">  Sets the .next of the first and the .previous of the second.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">join</span>(Node a, Node b) {</div><div class="line">        a.large = b;</div><div class="line">        b.small = a;</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">  helper function -- given two circular doubly linked</div><div class="line">  lists, append them and return the new list.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">append</span>(Node a, Node b) {</div><div class="line">        <span class="comment">// if either is null, return the other</span></div><div class="line">        <span class="keyword">if</span> (a==<span class="keyword">null</span>) <span class="keyword">return</span>(b);</div><div class="line">        <span class="keyword">if</span> (b==<span class="keyword">null</span>) <span class="keyword">return</span>(a);</div><div class="line"></div><div class="line">        <span class="comment">// find the last node in each using the .previous pointer</span></div><div class="line">        Node aLast = a.small;</div><div class="line">        Node bLast = b.small;</div><div class="line"></div><div class="line">        <span class="comment">// join the two together to make it connected and circular</span></div><div class="line">        join(aLast, b);</div><div class="line">        join(bLast, a);</div><div class="line"></div><div class="line">        <span class="keyword">return</span>(a);</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">  --Recursion--</div><div class="line">  Given an ordered binary tree, recursively change it into</div><div class="line">  a circular doubly linked list which is returned.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">treeToList</span>(Node root) {</div><div class="line">        <span class="comment">// base case: empty tree -&gt; empty list</span></div><div class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>) <span class="keyword">return</span>(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Recursively do the subtrees (leap of faith!)</span></div><div class="line">        Node aList = treeToList(root.small);</div><div class="line">        Node bList = treeToList(root.large);</div><div class="line"></div><div class="line">        <span class="comment">// Make the single root node into a list length-1</span></div><div class="line">        <span class="comment">// in preparation for the appending</span></div><div class="line">        root.small = root;</div><div class="line">        root.large = root;</div><div class="line"></div><div class="line">        <span class="comment">// At this point we have three lists, and it's</span></div><div class="line">        <span class="comment">// just a matter of appending them together</span></div><div class="line">        <span class="comment">// in the right order (aList, root, bList)</span></div><div class="line">        aList = append(aList, root);</div><div class="line">        aList = append(aList, bList);</div><div class="line"></div><div class="line">        <span class="keyword">return</span>(aList);</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">  Given a non-empty tree, insert a new node in the proper</div><div class="line">  place. The tree must be non-empty because Java's lack</div><div class="line">  of reference variables makes that case and this</div><div class="line">  method messier than they should be.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">treeInsert</span>(Node root, <span class="keyword">int</span> newData) {</div><div class="line">        <span class="keyword">if</span> (newData&lt;=root.data) {</div><div class="line">            <span class="keyword">if</span> (root.small!=<span class="keyword">null</span>) treeInsert(root.small, newData);</div><div class="line">            <span class="keyword">else</span> root.small = <span class="keyword">new</span> Node(newData);</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> {</div><div class="line">            <span class="keyword">if</span> (root.large!=<span class="keyword">null</span>) treeInsert(root.large, newData);</div><div class="line">            <span class="keyword">else</span> root.large = <span class="keyword">new</span> Node(newData);</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Do an inorder traversal to print a tree</span></div><div class="line">    <span class="comment">// Does not print the ending "\n"</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTree</span>(Node root) {</div><div class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        printTree(root.small);</div><div class="line">        System.out.print(Integer.toString(root.data) + <span class="string">" "</span>);</div><div class="line">        printTree(root.large);</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Do a traversal of the list and print it out</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printList</span>(Node head) {</div><div class="line">        Node current = head;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) {</div><div class="line">            System.out.print(Integer.toString(current.data) + <span class="string">" "</span>);</div><div class="line">            current = current.large;</div><div class="line">            <span class="keyword">if</span> (current == head) <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        System.out.println();</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Demonstrate tree-&gt;list with the list 1..5</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line"></div><div class="line">        <span class="comment">// first build the tree shown in the problem document</span></div><div class="line">        <span class="comment">// http://cslibrary.stanford.edu/109/</span></div><div class="line">        Node root = <span class="keyword">new</span> Node(<span class="number">4</span>);</div><div class="line">        treeInsert(root, <span class="number">2</span>);</div><div class="line">        treeInsert(root, <span class="number">1</span>);</div><div class="line">        treeInsert(root, <span class="number">3</span>);</div><div class="line">        treeInsert(root, <span class="number">5</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"tree:"</span>);</div><div class="line">        printTree(root);   <span class="comment">// 1 2 3 4 5</span></div><div class="line">        System.out.println();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"list:"</span>);</div><div class="line">        Node head = treeToList(root);</div><div class="line">        printList(head);   <span class="comment">// 1 2 3 4 5   yay!</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="LRU_Cache">LRU Cache</h2>
<blockquote>
<p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.<br>get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br>set(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>
</blockquote>
<h3 id="LinkedHashMap_Solution">LinkedHashMap Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> java.util.LinkedHashMap&lt;Integer,Integer&gt; self = <span class="keyword">new</span> java.util.LinkedHashMap&lt;Integer,Integer&gt;();</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> capacity;</div><div class="line"><span class="keyword">public</span> <span class="title">LRUCache</span>(<span class="keyword">int</span> capacity) {</div><div class="line">    <span class="keyword">this</span>.capacity = capacity;</div><div class="line">}</div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span>(<span class="keyword">int</span> key) {</div><div class="line">    Integer val = self.get(key);</div><div class="line">    <span class="keyword">if</span>(val==<span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    self.remove(key);</div><div class="line">    self.put(key,val);</div><div class="line">    <span class="keyword">return</span> val;</div><div class="line">}</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span>(<span class="keyword">int</span> key, <span class="keyword">int</span> value) {</div><div class="line">    Integer val = self.get(key);</div><div class="line">    <span class="keyword">if</span>(val==<span class="keyword">null</span> && self.size() == capacity){</div><div class="line">        self.remove(self.keySet().iterator().next());</div><div class="line">    }</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(val!=<span class="keyword">null</span>) self.remove(key);</div><div class="line">    self.put(key,value);</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Map_+_List_Solution">Map + List Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> HashMap&lt;Integer,Integer&gt; map;</div><div class="line"><span class="keyword">private</span> ArrayList&lt;Integer&gt; list;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> cap;</div><div class="line"><span class="keyword">public</span> <span class="title">LRUCache</span>(<span class="keyword">int</span> cap){</div><div class="line">    map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">    list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    <span class="keyword">this</span>.cap = cap; </div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span>(<span class="keyword">int</span> key){</div><div class="line">    <span class="keyword">if</span>(!map.containsKey(key)) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> var = map.get(key);</div><div class="line">    list.remove(list.indexOf(key));</div><div class="line">    list.add(key);</div><div class="line">    <span class="keyword">return</span> var;</div><div class="line">}</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span>(<span class="keyword">int</span> key, <span class="keyword">int</span> value){</div><div class="line">    <span class="keyword">int</span> val = get(key);</div><div class="line">    map.put(key, value);</div><div class="line">    <span class="keyword">if</span>(val == -<span class="number">1</span>){</div><div class="line">        list.add(key);</div><div class="line">        <span class="keyword">if</span>(map.size()&gt; cap){</div><div class="line">            map.remove(list.get(<span class="number">0</span>));</div><div class="line">            list.remove(<span class="number">0</span>);</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Search_Insert_Position">Search Insert Position</h2>
<blockquote>
<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.<br>You may assume no duplicates in the array.<br>Here are few examples.<br>[1,3,5,6], 5 → 2<br>[1,3,5,6], 2 → 1<br>[1,3,5,6], 7 → 4<br>[1,3,5,6], 0 → 0</p>
</blockquote>
<h3 id="Binary_Search_Solution">Binary Search Solution</h3>
<ul>
<li>Aside form the obvious scan solution..</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span>(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target) {</div><div class="line">    <span class="keyword">int</span> index = bsearch(A, target, <span class="number">0</span>, A.length-<span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> index;</div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">bsearch</span>(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target, <span class="keyword">int</span> l, <span class="keyword">int</span> r){</div><div class="line">    <span class="keyword">int</span> mid = (l+r) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(l&gt;=r) </div><div class="line">    {<span class="keyword">if</span>(A[l]&lt;target) <span class="keyword">return</span> l+<span class="number">1</span>;</div><div class="line">     <span class="keyword">if</span>(A[l]&gt;target) <span class="keyword">return</span> l;}</div><div class="line">    <span class="keyword">if</span>(target == A[mid]) <span class="keyword">return</span> mid;</div><div class="line">    <span class="keyword">if</span>(target &gt; A[mid]) <span class="keyword">return</span> bsearch(A,target,mid+<span class="number">1</span>,r);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> bsearch(A,target,l,mid-<span class="number">1</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Longest_Common_Prefix">Longest Common Prefix</h2>
<blockquote>
<p>Write a function to find the longest common prefix string amongst an array of strings.</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span>(String[] strs) {</div><div class="line">    <span class="keyword">int</span> n = strs.length;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(); </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;strs[<span class="number">0</span>].length();i++){</div><div class="line">        <span class="keyword">char</span> tmp = strs[<span class="number">0</span>].charAt(i);</div><div class="line">        <span class="keyword">for</span>(String s: strs){</div><div class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&gt;s.length() || s.charAt(i)!=tmp) <span class="keyword">return</span> sb.toString();</div><div class="line">        }</div><div class="line">        sb.append(tmp);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> sb.toString();</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Linked_List_Cycle">Linked List Cycle</h2>
<blockquote>
<p>Given a linked list, determine if it has a cycle in it.<br>Follow up:<br>Can you solve it without using extra space?</p>
</blockquote>
<h3 id="Fast_Slow_Pointer_Solution">Fast Slow Pointer Solution</h3>
<ul>
<li>Edge case one: input &lt;=1 element</li>
<li>Edge case two: fast==null || fast.next==null</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span>(ListNode head) {</div><div class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    ListNode a = head;</div><div class="line">    ListNode b = head;</div><div class="line">    <span class="keyword">while</span>(b!=<span class="keyword">null</span> && b.next!=<span class="keyword">null</span>){</div><div class="line">        a = a.next;</div><div class="line">        b = b.next.next;</div><div class="line">        <span class="keyword">if</span>(a==b) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Linked_List_Cycle_II">Linked List Cycle II</h2>
<blockquote>
<p>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.<br>Follow up:<br>Can you solve it without using extra space?</p>
</blockquote>
<h3 id="Solution-3">Solution</h3>
<ul>
<li>fast dis = a+b+c+b = 2 X slow dis = 2 * (a+b) -&gt; a=c</li>
</ul>
<p><img src="http://images.cnitblog.com/blog/354747/201311/05171805-64db9f059a1641e7afaf3dd8223c4fe7.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span>(ListNode head) {</div><div class="line">    ListNode a = head;</div><div class="line">    ListNode b = head;</div><div class="line">    <span class="keyword">while</span>(b!=<span class="keyword">null</span> && b.next!=<span class="keyword">null</span>){</div><div class="line">        a = a.next;</div><div class="line">        b = b.next.next;</div><div class="line">        <span class="keyword">if</span>(a==b){</div><div class="line">            a=head;</div><div class="line">            <span class="keyword">while</span>(a!=b){</div><div class="line">                a=a.next;</div><div class="line">                b=b.next;</div><div class="line">            }</div><div class="line">            <span class="keyword">return</span> a;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Falice-jemima%2Fno-diggity-1%3Fin%3Dcici-42%2Fsets%2Fsuits&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="First_Problem_ఠ_ఠ">First Problem ఠ_ఠ</h2>
<blockquote>
<p>Convert a given Binary Tree to Doubly Linked List</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Tree" scheme="http://sunbingjie.tk/tags/Tree/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="LinkedList" scheme="http://sunbingjie.tk/tags/LinkedList/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Combination Sum,Combination Sum II, Combination Sum III]]></title>
    <link href="http://sunbingjie.tk/2015/09/03/9.3/"/>
    <id>http://sunbingjie.tk/2015/09/03/9.3/</id>
    <published>2015-09-04T03:23:46.000Z</published>
    <updated>2015-09-04T03:23:46.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Combination_Sum">Combination Sum</h2>
<blockquote>
<p>Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.<br>The same repeated number may be chosen from C unlimited number of times.<br>Note:<br>All numbers (including target) will be positive integers.<br>Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).<br>The solution set must not contain duplicate combinations.<br>For example, given candidate set 2,3,6,7 and target 7,<br>A solution set is:<br>[7]<br>[2, 2, 3] </p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<p>Simple DFS</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title">combinationSum</span>(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) {</div><div class="line">    List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">    Arrays.sort(candidates);</div><div class="line">    dfs(res, tmp, candidates, target, <span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span>(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; tmp, <span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, <span class="keyword">int</span> start){</div><div class="line">	<span class="keyword">if</span>(target==<span class="number">0</span>) {</div><div class="line">		res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp));</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	}</div><div class="line">	</div><div class="line">	<span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;candidates.length;i++){</div><div class="line">		tmp.add(candidates[i]);</div><div class="line">		dfs(res,tmp,candidates,target-candidates[i],i);</div><div class="line">		tmp.remove(tmp.size()-<span class="number">1</span>);</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Combination_Sum_II">Combination Sum II</h2>
<blockquote>
<p>Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.<br>Each number in C may only be used once in the combination.<br>Note:<br>All numbers (including target) will be positive integers.<br>Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).<br>The solution set must not contain duplicate combinations.<br>For example, given candidate set 10,1,2,7,6,1,5 and target 8,<br>A solution set is:<br>[1, 7]<br>[1, 2, 5]<br>[2, 6]<br>[1, 1, 6]</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<p>Two small changes:</p>
<ul>
<li>pass in i+1 as new start in each recursive call</li>
<li>keep track of a prev value of the last value in the last tuple, if the next one equals to prev then it is duplicate</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title">combinationSum2</span>(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) {</div><div class="line">        List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        Arrays.sort(candidates);</div><div class="line">        dfs2(res, tmp, candidates, target, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs2</span>(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; tmp, <span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, <span class="keyword">int</span> start){</div><div class="line">         </div><div class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>) {</div><div class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> prev=-<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;candidates.length;i++){</div><div class="line">            <span class="keyword">if</span>(target&lt;candidates[i]) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span>(candidates[i]!=prev){</div><div class="line">                tmp.add(candidates[i]);</div><div class="line">                dfs2(res,tmp,candidates,target-candidates[i],i+<span class="number">1</span>);</div><div class="line">                prev=candidates[i];</div><div class="line">                tmp.remove(tmp.size()-<span class="number">1</span>);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Combination_Sum_III">Combination Sum III</h2>
<blockquote>
<p>Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.<br>Ensure that numbers within the set are sorted in ascending order.<br>Example 1:<br>Input: k = 3, n = 7<br>Output:<br>[[1,2,4]]<br>Example 2:<br>Input: k = 3, n = 9<br>Output:<br>[[1,2,6], [1,3,5], [2,3,4]]</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title">combinationSum3</span>(<span class="keyword">int</span> k, <span class="keyword">int</span> n) {</div><div class="line">        List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        dfs(res,tmp,k,n,<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    }</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span>(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt;tmp, <span class="keyword">int</span> k, <span class="keyword">int</span> n, <span class="keyword">int</span> start){</div><div class="line">        <span class="keyword">if</span>(tmp.size()==k && n==<span class="number">0</span>){</div><div class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span> || tmp.size()&gt;k) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start; i&lt;=<span class="number">9</span>; i++){</div><div class="line">            tmp.add(i);</div><div class="line">            dfs(res,tmp,k,n-i,i+<span class="number">1</span>);</div><div class="line">            tmp.remove(tmp.size()-<span class="number">1</span>);</div><div class="line">        }</div><div class="line">    }</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Combination_Sum">Combination Sum</h2>
<blockquote>
<p>Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.<br>The same repeated number may be chosen from C unlimited number of times.<br>Note:<br>All numbers (including target) will be positive integers.<br>Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).<br>The solution set must not contain duplicate combinations.<br>For example, given candidate set 2,3,6,7 and target 7,<br>A solution set is:<br>[7]<br>[2, 2, 3] </p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="Math" scheme="http://sunbingjie.tk/tags/Math/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Next Permutation, Permutation, Permutations II, Permutation Sequence]]></title>
    <link href="http://sunbingjie.tk/2015/09/01/8.25/"/>
    <id>http://sunbingjie.tk/2015/09/01/8.25/</id>
    <published>2015-09-01T05:54:06.000Z</published>
    <updated>2015-09-01T05:54:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Next_Permutation">Next Permutation</h2>
<blockquote>
<p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.<br>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).<br>The replacement must be in-place, do not allocate extra memory.<br>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.<br>1,2,3 → 1,3,2<br>3,2,1 → 1,2,3<br>1,1,5 → 1,5,1</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<p>Find the following <a href="http://blog.csdn.net/linhuanmars/article/details/20434115" target="_blank" rel="external">pattern</a>:</p>
<ol>
<li><p>From right to left, find the first digit (PartitionNumber) which violate the increase trend.</p>
</li>
<li><p>From right to left, find the first digit which larger than PartitionNumber, call it ChangeNumber.</p>
</li>
<li><p>Swap the PartitionNumber and ChangeNumber.</p>
</li>
<li><p>Reverse all the digit on the right of partition index.</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nextPermutation</span>(<span class="keyword">int</span>[] nums) {</div><div class="line">    	<span class="keyword">int</span> i=nums.length-<span class="number">1</span>;</div><div class="line">    	<span class="keyword">while</span>(i&gt;<span class="number">0</span> && nums[i-<span class="number">1</span>]&gt;=nums[i]){</div><div class="line">    		i--;</div><div class="line">    	}</div><div class="line">    	i--;</div><div class="line">  </div><div class="line">    	<span class="keyword">if</span>(i&lt;<span class="number">0</span>) {</div><div class="line">    		reverse(nums,<span class="number">0</span>);</div><div class="line">    		<span class="keyword">return</span> ;</div><div class="line">    	}</div><div class="line">    	<span class="keyword">int</span> j=nums.length-<span class="number">1</span>;</div><div class="line">    	<span class="keyword">while</span>(j&gt;i && nums[j]&lt;=nums[i]){</div><div class="line">    		j--;</div><div class="line">    	}</div><div class="line">      	 </div><div class="line">    	<span class="comment">//swap i,j</span></div><div class="line">    	<span class="keyword">int</span> tmp=nums[i];</div><div class="line">    	nums[i]=nums[j];</div><div class="line">    	nums[j]=tmp;</div><div class="line"></div><div class="line">    	<span class="comment">//reverse the partition after i</span></div><div class="line">    	reverse(nums, i+<span class="number">1</span>);</div><div class="line"></div><div class="line">    	<span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    </div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span>(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i){</div><div class="line">	   <span class="keyword">int</span> l=i, r=nums.length-<span class="number">1</span>;</div><div class="line">	   <span class="keyword">while</span>(l&lt;r){</div><div class="line">			<span class="keyword">int</span> tmp=nums[l];</div><div class="line">			nums[l]=nums[r];</div><div class="line">			nums[r]=tmp;</div><div class="line">			l++;</div><div class="line">			r--;</div><div class="line">	   }</div><div class="line">	   <span class="keyword">return</span>;</div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Permutation">Permutation</h2>
<blockquote>
<p>Given a collection of numbers, return all possible permutations.<br>For example,<br>[1,2,3] have the following permutations:<br>[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].</p>
</blockquote>
<h3 id="DFS_Solution">DFS Solution</h3>
<ul>
<li>Each digit has n possible values</li>
<li>If containing the same values as previous ones, continue</li>
<li>When reached end level, remove last element from list</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title">permute</span>(<span class="keyword">int</span>[] nums) {</div><div class="line">    	List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">    	List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    	dfs(result,tmp,nums);</div><div class="line">    	<span class="keyword">return</span> result;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span>(List&lt;List&lt;Integer&gt;&gt; result,List&lt;Integer&gt; tmp, <span class="keyword">int</span>[] nums){</div><div class="line">    	<span class="keyword">if</span>(tmp.size() == nums.length) {</div><div class="line">    		result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp));</div><div class="line">    		<span class="keyword">return</span>;}</div><div class="line">    	 </div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++){</div><div class="line">    		<span class="keyword">if</span>(tmp.contains(nums[i])) <span class="keyword">continue</span>;</div><div class="line">			 tmp.add(nums[i]);</div><div class="line">			 dfs(result, tmp, nums);</div><div class="line">			 tmp.remove(tmp.size()-<span class="number">1</span>);</div><div class="line">    		}</div><div class="line">    	<span class="keyword">return</span>;</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Permutations_II">Permutations II</h2>
<blockquote>
<p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.<br>For example,<br>[1,1,2] have the following unique permutations:<br>[1,1,2], [1,2,1], and [2,1,1].</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<ul>
<li>Similar to Permutations, we only need to make sure not using the same element twice in the same way</li>
<li>Use Visited[] to keep track of currently used element</li>
<li>After sorted, if previous element is not visited and the same with current, then this will be duplicate permutation</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title">permuteUnique</span>(<span class="keyword">int</span>[] num) {</div><div class="line">      List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">      <span class="keyword">if</span>(num == <span class="keyword">null</span> || num.length == <span class="number">0</span>)</div><div class="line">          <span class="keyword">return</span> result;</div><div class="line">      List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">      <span class="keyword">int</span>[] visited = <span class="keyword">new</span> <span class="keyword">int</span>[num.length];</div><div class="line">      </div><div class="line">      Arrays.sort(num);</div><div class="line">      helper(result, list, visited, num);</div><div class="line">      <span class="keyword">return</span> result;</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">helper</span>(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; list, <span class="keyword">int</span>[] visited, <span class="keyword">int</span>[] num) {</div><div class="line">      <span class="keyword">if</span>(list.size() == num.length) {</div><div class="line">          result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">      }</div><div class="line">      </div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length; i++) {</div><div class="line">          <span class="keyword">if</span> (visited[i] == <span class="number">1</span> || (i != <span class="number">0</span> && num[i] == num[i - <span class="number">1</span>] && visited[i - <span class="number">1</span>] == <span class="number">0</span>)){</div><div class="line">              <span class="keyword">continue</span>;</div><div class="line">          }</div><div class="line">          visited[i] = <span class="number">1</span>;</div><div class="line">          list.add(num[i]);</div><div class="line">          helper(result, list, visited, num);</div><div class="line">          list.remove(list.size() - <span class="number">1</span>);</div><div class="line">          visited[i] = <span class="number">0</span>;</div><div class="line">      }</div><div class="line">  }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Permutation_Sequence">Permutation Sequence</h2>
<blockquote>
<p>The set [1,2,3,…,n] contains a total of n! unique permutations.<br>By listing and labeling all of the permutations in order,<br>We get the following sequence (ie, for n = 3):<br>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>Given n and k, return the kth permutation sequence.<br>Note: Given n will be between 1 and 9 inclusive.</p>
</blockquote>
<h3 id="DFS_Solution-1">DFS Solution</h3>
<ul>
<li>Find kth permutation, LTE…</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPermutation</span>(<span class="keyword">int</span> n, <span class="keyword">int</span> k) {</div><div class="line">        <span class="keyword">int</span>[] count={<span class="number">0</span>};</div><div class="line">        ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        tmp = dfs(tmp, n, k, count);</div><div class="line">        StringBuilder re= <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : tmp){</div><div class="line">            re.append(i);</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> re.toString();</div><div class="line">    }</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">dfs</span>(ArrayList&lt;Integer&gt; tmp, <span class="keyword">int</span> n , <span class="keyword">int</span> k, <span class="keyword">int</span>[] count){</div><div class="line">    </div><div class="line">        <span class="keyword">if</span>(tmp.size() == n){</div><div class="line">            count[<span class="number">0</span>]++;</div><div class="line">            <span class="keyword">if</span>(count[<span class="number">0</span>]==k) <span class="keyword">return</span> tmp;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++){</div><div class="line">            <span class="keyword">if</span>(tmp.contains(i)) <span class="keyword">continue</span>;</div><div class="line">            tmp.add(i);</div><div class="line">            ArrayList&lt;Integer&gt; res = dfs(tmp, n, k, count);</div><div class="line">            <span class="keyword">if</span>(res!= <span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">            tmp.remove(tmp.size()-<span class="number">1</span>);</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    }</div></pre></td></tr></table></figure>

<h3 id="Math_Solution">Math Solution</h3>
<p>Find the following <a href="https://leetcode.com/discuss/42700/explain-like-im-five-java-solution-in-o-n" target="_blank" rel="external">pattern</a>:</p>
<ul>
<li>To find kth sequence, (k-1)/(n-1)! will be the index of the number to be added</li>
<li>We have elimated  (k-1)/(n-1)! <em> (n-1)! tuples, so keep finding k-(k-1)/(n-1)! </em> (n-1)! === k%(n-1)! in the sub problems</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPermutation</span>(<span class="keyword">int</span> n, <span class="keyword">int</span> k){</div><div class="line">       StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">       k=k-<span class="number">1</span>;</div><div class="line">       <span class="keyword">int</span> factorial=<span class="number">1</span>;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++){</div><div class="line">           factorial*=i;</div><div class="line">       }</div><div class="line">       ArrayList&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) {</div><div class="line">           nums.add(i);</div><div class="line">       }</div><div class="line">       <span class="keyword">while</span>(n&gt;<span class="number">1</span>){</div><div class="line">           <span class="keyword">int</span> index = k/factorial;</div><div class="line">           sb.append(nums.get(index));</div><div class="line">           nums.remove(index);</div><div class="line">           k = k%factorial;</div><div class="line">           factorial = factorial/(n-<span class="number">1</span>);</div><div class="line">            </div><div class="line">           n--;</div><div class="line">       }</div><div class="line">       sb.append(nums.get(<span class="number">0</span>));</div><div class="line">       <span class="keyword">return</span> sb.toString();</div><div class="line">   }</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Next_Permutation">Next Permutation</h2>
<blockquote>
<p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.<br>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).<br>The replacement must be in-place, do not allocate extra memory.<br>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.<br>1,2,3 → 1,3,2<br>3,2,1 → 1,2,3<br>1,1,5 → 1,5,1</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="Math" scheme="http://sunbingjie.tk/tags/Math/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Divide Two Integers]]></title>
    <link href="http://sunbingjie.tk/2015/08/24/8.24/"/>
    <id>http://sunbingjie.tk/2015/08/24/8.24/</id>
    <published>2015-08-24T18:44:52.000Z</published>
    <updated>2015-08-24T18:44:52.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Divide_Two_Integers">Divide Two Integers</h2>
<blockquote>
<p>Divide two integers without using multiplication, division and mod operator.<br>If it is overflow, return MAX_INT.</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution_Subtraction">Solution Subtraction</h3>
<ul>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divide2</span>(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor) { </div><div class="line">       <span class="keyword">if</span> (dividend == <span class="number">0</span> || divisor == <span class="number">0</span>) { </div><div class="line">           <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">       } </div><div class="line">       <span class="keyword">long</span> a = Math.abs((<span class="keyword">long</span>) dividend); </div><div class="line">       <span class="keyword">long</span> b = Math.abs((<span class="keyword">long</span>) divisor); </div><div class="line">       <span class="keyword">if</span> (b &gt; a) { </div><div class="line">           <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">       } </div><div class="line">  </div><div class="line">       <span class="keyword">long</span> sum = <span class="number">0</span>; </div><div class="line">       <span class="keyword">long</span> pow = <span class="number">0</span>; </div><div class="line">       <span class="keyword">long</span> result = <span class="number">0</span>; </div><div class="line">       <span class="keyword">while</span> (a &gt;= b) { </div><div class="line">           pow = <span class="number">1</span>; </div><div class="line">           sum = b; </div><div class="line">           <span class="keyword">while</span> (sum + sum &lt;= a) { </div><div class="line">               sum += sum; </div><div class="line">               pow += pow; </div><div class="line">           } </div><div class="line">           a -= sum; </div><div class="line">           result += pow; </div><div class="line">       }</div><div class="line">       result = ((((dividend ^ divisor) &gt;&gt; <span class="number">31</span>) & <span class="number">1</span>) == <span class="number">1</span>) ? -result: result;   </div><div class="line">       </div><div class="line">        <span class="keyword">if</span> (result &gt; Integer.MAX_VALUE || result &lt; Integer.MIN_VALUE) {</div><div class="line">       	 </div><div class="line">           <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">        }</div><div class="line">         </div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)result;</div><div class="line">   }</div></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Solution_Bit_Manipulation">Solution Bit Manipulation</h3>
<ul>
<li></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divide</span>(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor){</div><div class="line">  	  <span class="keyword">if</span> (dividend == <span class="number">0</span> || divisor == <span class="number">0</span>) { </div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">        } </div><div class="line">        <span class="keyword">long</span> a = Math.abs((<span class="keyword">long</span>) dividend); </div><div class="line">        <span class="keyword">long</span> b = Math.abs((<span class="keyword">long</span>) divisor); </div><div class="line">        <span class="keyword">long</span> bb = Math.abs((<span class="keyword">long</span>) divisor); </div><div class="line">        <span class="keyword">if</span> (b &gt; a) { </div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">        } </div><div class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>; </div><div class="line">        <span class="keyword">long</span> pow = <span class="number">0</span>; </div><div class="line">        <span class="keyword">long</span> count = <span class="number">1</span>;</div><div class="line">        <span class="keyword">long</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(a&gt;bb){</div><div class="line">      	  bb=bb&lt;&lt;<span class="number">1</span>;</div><div class="line">      	  count=count&lt;&lt;<span class="number">1</span>;</div><div class="line">        }</div><div class="line">       </div><div class="line">        <span class="keyword">while</span> (a&gt;=b){</div><div class="line">            <span class="keyword">while</span> (a&gt;=bb){</div><div class="line">                a -= bb;</div><div class="line">                result = result+count;</div><div class="line">            }</div><div class="line">            bb=bb&gt;&gt;<span class="number">1</span>;</div><div class="line">      	  count=count&gt;&gt;<span class="number">1</span>;    </div><div class="line">        }</div><div class="line">        </div><div class="line">        result = ((((dividend ^ divisor) &gt;&gt; <span class="number">31</span>) & <span class="number">1</span>) == <span class="number">1</span>) ? -result: result;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (result &gt; Integer.MAX_VALUE || result &lt; Integer.MIN_VALUE) {</div><div class="line">       	 </div><div class="line">           <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)result;       </div><div class="line">  }</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Divide_Two_Integers">Divide Two Integers</h2>
<blockquote>
<p>Divide two integers without using multiplication, division and mod operator.<br>If it is overflow, return MAX_INT.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Math" scheme="http://sunbingjie.tk/tags/Math/"/>
    
      <category term="BitManipulation" scheme="http://sunbingjie.tk/tags/BitManipulation/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swap Nodes in Pairs]]></title>
    <link href="http://sunbingjie.tk/2015/08/24/8.15/"/>
    <id>http://sunbingjie.tk/2015/08/24/8.15/</id>
    <published>2015-08-24T18:44:51.000Z</published>
    <updated>2015-08-24T18:44:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Swap_Nodes_in_Pairs">Swap Nodes in Pairs</h2>
<blockquote>
<p>Given a linked list, swap every two adjacent nodes and return its head.<br>For example,<br>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.<br>Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution_In-Place">Solution In-Place</h3>
<ul>
<li>Use a dummyhead to avoid dealin with null cases, as usual</li>
<li>Keep track of the first node in next pair</li>
<li>Termination conditions: take care of odd and even node number cases</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">swapPairs</span>(ListNode head) {</div><div class="line">	ListNode dummyhead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">	dummyhead.next = head; <span class="comment">//use dummyhead to deal with null case</span></div><div class="line">	ListNode first = dummyhead;</div><div class="line">	ListNode second =head;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(second!=<span class="keyword">null</span> && second.next!=<span class="keyword">null</span>){<span class="comment">//when second is null (odd), or second next is null(even)</span></div><div class="line">	ListNode tmp = second.next.next; <span class="comment">//record next start</span></div><div class="line">	second.next.next = second; <span class="comment">//reverse</span></div><div class="line">	first.next = second.next; <span class="comment">// link to second</span></div><div class="line">	second.next = tmp; <span class="comment">// link to next start</span></div><div class="line">	first=second; <span class="comment">// move to next</span></div><div class="line">	second = second.next; <span class="comment">//move to next</span></div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> dummyhead.next;</div><div class="line">	}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Swap_Nodes_in_Pairs">Swap Nodes in Pairs</h2>
<blockquote>
<p>Given a linked list, swap every two adjacent nodes and return its head.<br>For example,<br>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.<br>Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="LinkedList" scheme="http://sunbingjie.tk/tags/LinkedList/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2Sum, 3Sum, 3Sum Closest, 4Sum]]></title>
    <link href="http://sunbingjie.tk/2015/08/24/1.7/"/>
    <id>http://sunbingjie.tk/2015/08/24/1.7/</id>
    <published>2015-08-24T18:44:42.000Z</published>
    <updated>2015-08-24T18:44:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="2Sum">2Sum</h2>
<blockquote>
<p>Given an array of integers, find two numbers such that they add up to a specific target number.<br>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.<br>You may assume that each input would have exactly one solution.<br>Input: numbers={2, 7, 11, 15}, target=9<br>Output: index1=1, index2=2</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<p>Two Pointer Solution:<br>First copy numbers[] into old[] and sort old[]. Then we use two pointers to scan for the target sum. At last, we recover the indexes of these two elements in the unsorted array. This takes O(nlogn) time.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">twoSum</span>(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) {</div><div class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">int</span>[] old = <span class="keyword">new</span> <span class="keyword">int</span>[numbers.length];</div><div class="line">        System.arraycopy(numbers, <span class="number">0</span>, old, <span class="number">0</span>, numbers.length);  </div><div class="line">        Arrays.sort(old);  </div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> j=numbers.length-<span class="number">1</span>;</div><div class="line">        <span class="comment">//use i, j to scan the whole array</span></div><div class="line">        <span class="keyword">while</span>(i&lt;j)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(old[i]+old[j]&gt;target)</div><div class="line">                {j--;</div><div class="line">            <span class="keyword">continue</span>;}</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(old[i]+old[j]&lt;target)</div><div class="line">                {</div><div class="line">                i++;    </div><div class="line">            <span class="keyword">continue</span>;}</div><div class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> n1=old[i];</div><div class="line">        <span class="keyword">int</span> n2=old[j];</div><div class="line">        <span class="keyword">int</span> a = -<span class="number">1</span>,b=-<span class="number">1</span>;</div><div class="line">        <span class="comment">//recover indexes of the original array</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ii=<span class="number">0</span>; ii&lt;numbers.length;ii++){</div><div class="line">            <span class="keyword">if</span>(numbers[ii]==n1 || numbers[ii]==n2){</div><div class="line">                <span class="keyword">if</span>(a==-<span class="number">1</span>){a=ii+<span class="number">1</span>;}</div><div class="line">                <span class="keyword">else</span> b=ii+<span class="number">1</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        result[<span class="number">0</span>]=a;</div><div class="line">        result[<span class="number">1</span>]=b;</div><div class="line">        Arrays.sort(result);</div><div class="line">        <span class="keyword">return</span> result;    </div><div class="line">    }</div></pre></td></tr></table></figure>

<h3 id="HashTable_Solution:">HashTable Solution:</h3>
<p>During one pass, we put element and index (as key, value) into the map, meanwhile we search for target-num[i] in our map. If found, get the two indexes. This takes O(n) time.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">twoSum</span>(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) {  </div><div class="line">    </div><div class="line">       HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;(); </div><div class="line">       </div><div class="line">       <span class="keyword">int</span> n = numbers.length;  </div><div class="line">       <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];  </div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++)  </div><div class="line">       {  </div><div class="line">           <span class="keyword">if</span> (map.containsKey(target - numbers[i]))  </div><div class="line">           {  </div><div class="line">               result[<span class="number">0</span>] = map.get(target-numbers[i]) + <span class="number">1</span>;  </div><div class="line">               result[<span class="number">1</span>] = i + <span class="number">1</span>;  </div><div class="line">               <span class="keyword">break</span>;  </div><div class="line">           }  </div><div class="line">           <span class="keyword">else</span>  </div><div class="line">           {  </div><div class="line">               map.put(numbers[i], i);  </div><div class="line">           }  </div><div class="line">       }  </div><div class="line">       <span class="keyword">return</span> result;  </div><div class="line">         </div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="3Sum">3Sum</h2>
<blockquote>
<p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.<br>Note:<br>Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)<br>The solution set must not contain duplicate triplets.<br>For example, given array S = {-1 0 1 2 -1 -4},<br>A solution set is:<br>(-1, 0, 1)<br>(-1, -1, 2)</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<p>Brute force method.<br>Use three loops, for each i,j,k indexes check if 3 sum equals to 0. In order to avoid duplicate sets, we make the following obeservations:</p>
<li>The first element must be non-positive</li>

<li>Given the first element, the first two element must sum to non-positive</li>

<p>Note: the Solution doesn’t handle duplicates, and O(N^3) exceeded limited time.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title">threeSum</span>(<span class="keyword">int</span>[] num) {</div><div class="line">Arrays.sort(num);</div><div class="line">ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res= <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">ArrayList&lt;Integer&gt; each=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.length;i++){</div><div class="line">   <span class="keyword">if</span>(num[i]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;num.length;j++){</div><div class="line">       <span class="keyword">if</span>(num[i]+num[j]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;num.length;k++){</div><div class="line">           <span class="keyword">if</span>(num[i]+num[j]+num[k]==<span class="number">0</span>){</div><div class="line">               each.add(num[i]);</div><div class="line">               each.add(num[j]);</div><div class="line">               each.add(num[k]);</div><div class="line">               res.add(each);</div><div class="line">               each.clear();                </div><div class="line">           }</div><div class="line">       }</div><div class="line">   }</div><div class="line">}</div><div class="line">   <span class="keyword">return</span> res;</div><div class="line">   </div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Better_Solution:">Better Solution:</h3>
<p>Similar to how we used 2 pointers in 2Sum, we now use three pointers to solve 3Sum. For removing duplicate sets, we first sort input.</p>
<li>For the first element, we only run checking process for the first of duplicate elements.</li>

<li>We use two pointers to check for cases such that num[i]+num[l]+num[r]==0. If found, move both pointers closer (don’t forget to skip duplicates), if not found, move only one pointer.</li>

<p>Overall runtime is O(N^2) and we can guarantee no duplicate sets.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title">threeSum</span>(<span class="keyword">int</span>[] num) {</div><div class="line">    Arrays.sort(num);</div><div class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res= <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.length-<span class="number">2</span>;i++){</div><div class="line">       <span class="keyword">if</span>(num[i]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">       <span class="comment">//skip the duplicated first element</span></div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">0</span> && num[i]==num[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</div><div class="line">       l=i+<span class="number">1</span>;</div><div class="line">       r=num.length-<span class="number">1</span>;</div><div class="line">       <span class="comment">//use left and right pointer to scan the rest </span></div><div class="line">       <span class="keyword">while</span>(l&lt;r){</div><div class="line">           <span class="keyword">if</span>(num[i]+num[l]+num[r]==<span class="number">0</span>){</div><div class="line">               ArrayList&lt;Integer&gt; tmp=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">                    tmp.add(num[i]);</div><div class="line">                    tmp.add(num[l]);</div><div class="line">                    tmp.add(num[r]);</div><div class="line">                    res.add(tmp);</div><div class="line">                    l++;</div><div class="line">                    r--;</div><div class="line">                    <span class="comment">//skip duplicates</span></div><div class="line">                    <span class="keyword">while</span>(l&lt;r && num[l]==num[l-<span class="number">1</span>]) l++;</div><div class="line">                    <span class="keyword">while</span>(l&lt;r && num[r]==num[r+<span class="number">1</span>]) r--;</div><div class="line">           }</div><div class="line">           <span class="comment">//scan the rest starting with num[i]</span></div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(num[i]+num[l]+num[r]&lt;<span class="number">0</span>) l++;</div><div class="line">           <span class="keyword">else</span> r--;</div><div class="line">           </div><div class="line">       }</div><div class="line"> </div><div class="line">       </div><div class="line">        </div><div class="line">    }</div><div class="line">     <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="3Sum_Closest">3Sum Closest</h2>
<blockquote>
<p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.<br>For example, given array S = {-1 2 1 -4}, and target = 1.<br>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p>
</blockquote>
<p>Similar to 3Sum, first sort the array and then we use three pointers to scan for the closest sum:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span>(<span class="keyword">int</span>[] num, <span class="keyword">int</span> target) {</div><div class="line">     <span class="keyword">int</span> cls=Integer.MAX_VALUE,res=Integer.MAX_VALUE;</div><div class="line">     <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</div><div class="line">     <span class="keyword">int</span>[] newnum = <span class="keyword">new</span> <span class="keyword">int</span>[num.length];</div><div class="line">     System.arraycopy(num, <span class="number">0</span>, newnum, <span class="number">0</span>, num.length);  </div><div class="line">     Arrays.sort(newnum); </div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.length;i++){</div><div class="line">         l=i+<span class="number">1</span>; r=num.length-<span class="number">1</span>;</div><div class="line">         <span class="keyword">while</span>(l&lt;r){</div><div class="line">             <span class="keyword">int</span> sum=newnum[i]+newnum[l]+newnum[r];</div><div class="line">             <span class="keyword">int</span> diff=Math.abs(target-sum);</div><div class="line">             <span class="comment">//if match found, immediately return sum</span></div><div class="line">             <span class="keyword">if</span>(diff==<span class="number">0</span>) <span class="keyword">return</span> sum;</div><div class="line">             <span class="comment">//check if current cls is min, update sum</span></div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (diff&lt;cls){</div><div class="line">                 cls=diff;             </div><div class="line">                 res=sum;</div><div class="line">                 }</div><div class="line">             <span class="comment">//move pointers accordingly</span></div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span>(sum-target&lt;=<span class="number">0</span>) l++;</div><div class="line">             </div><div class="line">             <span class="keyword">else</span> {r--;}</div><div class="line">         }</div><div class="line">     }</div><div class="line">     </div><div class="line">     <span class="keyword">return</span> res;</div><div class="line">     </div><div class="line"> }</div></pre></td></tr></table></figure>

<hr>
<h2 id="4Sum">4Sum</h2>
<blockquote>
<p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.<br>Note:<br>Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)<br>The solution set must not contain duplicate quadruplets.<br>For example, given array S = {1 0 -1 0 -2 2}, and target = 0.<br>    A solution set is:<br>    (-1,  0, 0, 1)<br>    (-2, -1, 1, 2)<br>    (-2,  0, 0, 2)</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<ul>
<li>similar to 3sum, use to pointer to find quadruplets faster, O(n^3) time.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title">fourSum</span>(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) {</div><div class="line">     Arrays.sort(nums);</div><div class="line">     List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">      </div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length-<span class="number">3</span>; i++){</div><div class="line">     <span class="keyword">if</span> (i &gt; <span class="number">0</span> && nums[i] == nums[i-<span class="number">1</span>]) <span class="comment">//remove duplicates</span></div><div class="line">       <span class="keyword">continue</span>;</div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;nums.length-<span class="number">2</span>; j++){</div><div class="line">             <span class="keyword">if</span> (j&gt;i+<span class="number">1</span> && nums[j]==nums[j-<span class="number">1</span>]) <span class="comment">//remove duplicates</span></div><div class="line">         <span class="keyword">continue</span>;</div><div class="line">               <span class="keyword">int</span> left = j+<span class="number">1</span>;</div><div class="line">               <span class="keyword">int</span> right = nums.length-<span class="number">1</span>;</div><div class="line">               </div><div class="line">               <span class="keyword">while</span>(left&lt;nums.length && left&lt;right){</div><div class="line">                 </div><div class="line">                 <span class="keyword">if</span>(nums[left]+ nums[right] == target-nums[i]-nums[j]) {</div><div class="line">                     ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">                     <span class="keyword">int</span> leftnum = nums[left]; </div><div class="line">                     tmp.add(nums[i]);</div><div class="line">                     tmp.add(nums[j]);</div><div class="line">                     tmp.add(nums[left]);</div><div class="line">                     tmp.add(nums[right]);</div><div class="line">                     res.add(tmp);</div><div class="line">                     <span class="keyword">while</span>(left&lt;nums.length && nums[left] == leftnum){</div><div class="line">                       left++;</div><div class="line">                     }</div><div class="line">                 }</div><div class="line">                 <span class="keyword">else</span> <span class="keyword">if</span>(nums[left]+ nums[right] &gt; target-nums[i]-nums[j]){</div><div class="line">                   right--;</div><div class="line">                 }</div><div class="line">                 <span class="keyword">else</span>{</div><div class="line">                   left++;</div><div class="line">                 }</div><div class="line">               }</div><div class="line">           }</div><div class="line">       }      </div><div class="line">       <span class="keyword">return</span> res;</div><div class="line">   }</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fzydii%2Flilly-wood-the-prick-and-robin-schulz-prayer-in-c-robin-schulz-remix-official&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="2Sum">2Sum</h2>
<blockquote>
<p>Given an array of integers, find two numbers such that they add up to a specific target number.<br>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.<br>You may assume that each input would have exactly one solution.<br>Input: numbers={2, 7, 11, 15}, target=9<br>Output: index1=1, index2=2</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="HashMap" scheme="http://sunbingjie.tk/tags/HashMap/"/>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Find Median of two Sorted Arrays]]></title>
    <link href="http://sunbingjie.tk/2015/08/09/7.23/"/>
    <id>http://sunbingjie.tk/2015/08/09/7.23/</id>
    <published>2015-08-09T22:17:48.000Z</published>
    <updated>2015-08-09T22:17:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Median_of_Two_Sorted_Arrays">Median of Two Sorted Arrays</h2>
<blockquote>
<p>There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution"><a href="http://www.lifeincode.net/programming/leetcode-median-of-two-sorted-arrays-java/" target="_blank" rel="external">Solution</a></h3>
<ul>
<li>O(n+m) solution is easy to think of, just use merge sort and find kth smallest element</li>
<li>Similar to binary search, we compare the median of two arrays each time and cut off the smaller, therefore safer, portion of that array, until we find the kth smallest element</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span>(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) {</div><div class="line">     <span class="keyword">int</span> len = nums1.length + nums2.length;</div><div class="line">     <span class="keyword">if</span>(nums1.length == <span class="number">0</span>) <span class="keyword">return</span> len % <span class="number">2</span> == <span class="number">0</span> ? (nums2[len/<span class="number">2</span>] + nums2[len/<span class="number">2</span> - <span class="number">1</span>]) / <span class="number">2.0</span> : nums2[len/<span class="number">2</span>];</div><div class="line">     <span class="keyword">if</span>(nums2.length == <span class="number">0</span>) <span class="keyword">return</span> len % <span class="number">2</span> == <span class="number">0</span> ? (nums1[len/<span class="number">2</span>] + nums1[len/<span class="number">2</span> - <span class="number">1</span>]) / <span class="number">2.0</span> : nums1[len/<span class="number">2</span>];</div><div class="line">     <span class="keyword">if</span>(len % <span class="number">2</span> != <span class="number">0</span>){ <span class="keyword">return</span> findkth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, len/<span class="number">2</span> + <span class="number">1</span>);}</div><div class="line">     <span class="keyword">else</span> <span class="keyword">return</span> (findkth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, len/<span class="number">2</span>) + findkth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, len/<span class="number">2</span> + <span class="number">1</span>)) / <span class="number">2.0</span>;</div><div class="line"> }</div><div class="line"> </div><div class="line"> <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findkth</span>(<span class="keyword">int</span>[] A, <span class="keyword">int</span> a, <span class="keyword">int</span>[] B, <span class="keyword">int</span> b, <span class="keyword">int</span> k){</div><div class="line">     <span class="comment">//first, put the shorter array up-front</span></div><div class="line">     <span class="keyword">if</span>(A.length-a &gt; B.length-b) <span class="keyword">return</span> findkth(B, b, A, a, k);</div><div class="line">     <span class="comment">//second, if the smaller array overflows, find the k-1 th in B</span></div><div class="line">     <span class="keyword">if</span>(a &gt;= A.length) <span class="keyword">return</span> B[b+k-<span class="number">1</span>];</div><div class="line">     <span class="comment">//third, if k is down to 1, return the smaller one in current two arrays</span></div><div class="line">     <span class="keyword">if</span>(k == <span class="number">1</span>) <span class="keyword">return</span> Math.min(A[a], B[b]);</div><div class="line">     <span class="comment">//else, compare two medians and cut off the smaller portion</span></div><div class="line">     <span class="keyword">int</span> mida = Math.min(k/<span class="number">2</span>, A.length-a);</div><div class="line">     <span class="keyword">int</span> midb = k - mida;</div><div class="line">     <span class="keyword">if</span>(A[a+mida-<span class="number">1</span>] &lt; B[b+midb-<span class="number">1</span>]){</div><div class="line">         <span class="comment">//if mida is smaller, find k-mida in</span></div><div class="line">         <span class="keyword">return</span> findkth(A , mida+a, B, b, k-mida);</div><div class="line">     }</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span>(A[a+mida-<span class="number">1</span>] &gt; B[b+midb-<span class="number">1</span>]){</div><div class="line">         <span class="comment">//if mida is bigger, find k-mid</span></div><div class="line">         <span class="keyword">return</span> findkth(A, a, B, midb+b, k-midb);</div><div class="line">     }</div><div class="line">     <span class="keyword">else</span>{</div><div class="line">         <span class="comment">//mida equals to midb, return anyone of them</span></div><div class="line">         <span class="keyword">return</span> A[a+mida-<span class="number">1</span>];</div><div class="line">     }</div><div class="line">     </div><div class="line"> }</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Median_of_Two_Sorted_Arrays">Median of Two Sorted Arrays</h2>
<blockquote>
<p>There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Learning AngularJS day by day]]></title>
    <link href="http://sunbingjie.tk/2015/08/07/angular/"/>
    <id>http://sunbingjie.tk/2015/08/07/angular/</id>
    <published>2015-08-08T02:19:56.000Z</published>
    <updated>2015-08-08T02:19:56.000Z</updated>
    <content type="html"><![CDATA[<p>I’ll be using AngularJS for a project at work, mainly using <a href="http://www.amazon.com/Mastering-Web-Application-Development-AngularJS/dp/1782161821" target="_blank" rel="external">Mastering Web Application Development with AngularJS</a> and <a href="http://henriquat.re/" target="_blank" rel="external">This ebook</a>.</p>
<a id="more"></a>
<h1 id="Basic_Concepts">Basic Concepts</h1>
<h2 id="Model">Model</h2>
<p>AngularJS models are plain, old JS objects. Models properties are not limited to be represented by primitive values(any valid JS object or array can be used).  To expose a model to AngularJS you simply assign it to a $scope.</p>
<h2 id="Controller">Controller</h2>
<p>In AngularJS, a controller is just a regular JavaScript constructor which accepts a magic $scope parameter.<br>The primary responsibility of a controller is to initialize scope objects. </p>
<ul>
<li>Providing initial model values</li>
<li>Augmenting $scope with UI-specific behavior/functions</li>
<li>A controller does the same job as the ng-init directive, but doing so in JS not HTML, when it comes to setting up initial model values.</li>
</ul>
<h2 id="Service_&amp;_Dependency_Injection">Service &amp; Dependency Injection</h2>
<p><a href="https://www.airpair.com/javascript/posts/services-in-angularjs-simplified-with-examples" target="_blank" rel="external">What are services</a>:</p>
<ul>
<li>Think of Service as the method of registering a constructor function/any singleton object that is created and managed by angular DI, with service dependency injection we can eliminate the new keyword</li>
<li>Services are singleton. All components of application works with single instance of the service.</li>
<li>Service instance gets created when application components need it.</li>
<li>Provides organization of shared data and functions across the application.</li>
</ul>
<p>Service can be created in four different ways:</p>
<ul>
<li>Using the service() method</li>
<li>Using the factory() method</li>
<li>Using the provider() method</li>
<li>Using the value() method</li>
<li>Using the constant() method</li>
</ul>
<h2 id="Using_ervice()">Using ervice()</h2>
<p>Using the service() method uses the function constructor and it returns the object or instance of the function to work with<br>creating a calculator service</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CalculatorService = angular.module(<span class="string">'CalculatorService'</span>, []).service(<span class="string">'Calculator'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{ </div><div class="line">     <span class="keyword">this</span>.square = <span class="function"><span class="keyword">function</span> <span class="params">(a)</span> </span>{ <span class="keyword">return</span> a*a}; </div><div class="line">     });</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>, [<span class="string">'CalculatorService'</span>]);</div><div class="line">     myApp.controller(<span class="string">'CalculatorController'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$scope</span>, Calculator)</span> </span>{ </div><div class="line">          <span class="variable">$scope</span>.findSquare = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{ </div><div class="line">                   <span class="variable">$scope</span>.answer = Calculator.square(<span class="variable">$scope</span>.number); </div><div class="line">                    }});</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"CalculatorController"</span>&gt;</span></div><div class="line">                Enter a number:</div><div class="line">                <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"number"</span> <span class="attribute">ng-model</span>=<span class="value">"number"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="title">button</span>  <span class="attribute">ng-click</span>=<span class="value">"findSquare()"</span>&gt;</span>Square<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<h2 id="Using_factory()">Using factory()</h2>
<p>create factory object and assign the methods to it.<br>Using the factory() method uses the returned value of the function. It returns the value of the function returned after the execution<br>Creating the service to reverse the string.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">CalculatorService.factory(<span class="string">'StringManipulation'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{ </div><div class="line">     <span class="keyword">var</span> r= <span class="function"><span class="keyword">function</span> <span class="title">reverse</span><span class="params">(s)</span> </span>{ </div><div class="line">          <span class="keyword">var</span> o = <span class="string">''</span>; </div><div class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = s.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) </div><div class="line">               o += s[i]; </div><div class="line">               <span class="keyword">return</span> o; </div><div class="line">          } </div><div class="line">     <span class="keyword">return</span>{ </div><div class="line">          reverseString: <span class="function"><span class="keyword">function</span> <span class="title">reverseString</span><span class="params">(name)</span> </span>{ </div><div class="line">               <span class="keyword">return</span> r(name); </div><div class="line">               } } });</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'CalculatorController'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$scope</span>, StringManipulation)</span> </span>{ </div><div class="line">     <span class="variable">$scope</span>.findReverse =  <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{<span class="variable">$scope</span>.reversename = StringManipulation.reverseString(<span class="variable">$scope</span>.name);}</div><div class="line">});</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"StringController"</span>&gt;</span></div><div class="line">              Enter Name:</div><div class="line">              <span class="tag">&lt;<span class="title">input</span> <span class="attribute">ng-model</span>=<span class="value">"name"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="title">button</span>  <span class="attribute">ng-click</span>=<span class="value">"findReverse()"</span>&gt;</span>Reverse Name<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p>The difference between creating a service using the service() method and the factory() method:</p>
<ul>
<li>Using the service() method uses the function constructor and it returns the object or instance of the function to work with</li>
<li>Using the factory() method uses the returned value of the function. It returns the value of the function returned after the execution</li>
</ul>
<p>(<a href="http://stackoverflow.com/questions/13762228/confused-about-service-vs-factory" target="_blank" rel="external">http://stackoverflow.com/questions/13762228/confused-about-service-vs-factory</a>)</p>
<h2 id="Well_known_services">Well known services</h2>
<h3 id="$http_and_$q">$http and $q</h3>
<p>$http in AngularJS is a core service for reading data from web servers. $http.get(url) is the function to use for reading server data.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line">app.controller(<span class="string">'planetController'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$scope</span>, <span class="variable">$http</span>)</span> </span>{</div><div class="line">  <span class="variable">$http</span>.get(<span class="string">"http://www.bogotobogo.com/AngularJS/files/httpRequest/planet.json"</span>)</div><div class="line">  .success(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> </span>{<span class="variable">$scope</span>.names = response;});</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="$resource">$resource</h3>
<h3 id="$document">$document</h3>
<h3 id="$window">$window</h3>
<h3 id="$timeout_&amp;_$interval">$timeout &amp; $interval</h3>
<p>(<a href="http://stackoverflow.com/questions/14237070/using-setinterval-in-angularjs-factory" target="_blank" rel="external">http://stackoverflow.com/questions/14237070/using-setinterval-in-angularjs-factory</a>)<br>(<a href="http://tutorials.jenkov.com/angularjs/timeout-interval.html#injecting-interval" target="_blank" rel="external">http://tutorials.jenkov.com/angularjs/timeout-interval.html#injecting-interval</a>)<br>(<a href="http://plnkr.co/edit/?p=preview" target="_blank" rel="external">http://plnkr.co/edit/?p=preview</a>)</p>
<h3 id="$parse">$parse</h3>
<h3 id="$cacheFactory">$cacheFactory</h3>
<h3 id="$filter">$filter</h3>
<h3 id="$apply">$apply</h3>
<h3 id="$watch_&amp;_$watchcollection">$watch &amp; $watchcollection</h3>
<p>(<a href="http://jsfiddle.net/TheSharpieOne/RA2j7/2/" target="_blank" rel="external">http://jsfiddle.net/TheSharpieOne/RA2j7/2/</a>)</p>
<h2 id="Directive">Directive</h2>
<h1 id="Simple_program">Simple program</h1>
<p>I’ve build a simple one-page website using angular-ui and .NET framework.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">AngularWeb</div><div class="line">-<span class="ruby">-content </span></div><div class="line">  -<span class="ruby">-bootstrap.css</span></div><div class="line">-<span class="ruby">-scripts</span></div><div class="line">  -<span class="ruby">-app</span></div><div class="line">    -<span class="ruby">-studentCtrl.js</span></div><div class="line">  -<span class="ruby">-angular.js</span></div><div class="line">-<span class="ruby">-<span class="constant">Default</span>.aspx</span></div><div class="line">-<span class="ruby">-<span class="constant">Site</span>.<span class="constant">Master</span></span></div></pre></td></tr></table></figure>

<hr>
<h2 id="studentCtrl-js">studentCtrl.js</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var app = angular.module(<span class="string">'app'</span>, [<span class="string">'ngResource'</span>, <span class="string">'ui.bootstrap'</span>]);</div><div class="line"></div><div class="line">app.value(<span class="string">'studentInfo'</span>, [</div><div class="line">{ id: <span class="number">1</span>, name: <span class="string">'Mahedee Hasan'</span>, credit: <span class="number">20</span>, semester: <span class="string">'8th'</span> },</div><div class="line">{ id: <span class="number">2</span>, name: <span class="string">'Enamul Haque'</span>, credit: <span class="number">15</span>, semester: <span class="string">'7th'</span> },</div><div class="line">{ id: <span class="number">2</span>, name: <span class="string">'Arefin Billah'</span>, credit: <span class="number">15</span>, semester: <span class="string">'6th'</span> },</div><div class="line">{ id: <span class="number">3</span>, name: <span class="string">'Zahid Hasan'</span>, credit: <span class="number">12</span>, semester: <span class="string">'7th'</span> },</div><div class="line">{ id: <span class="number">1</span>, name: <span class="string">'Mahedee Hasan'</span>, credit: <span class="number">20</span>, semester: <span class="string">'8th'</span> },</div><div class="line">{ id: <span class="number">2</span>, name: <span class="string">'Enamul Haque'</span>, credit: <span class="number">15</span>, semester: <span class="string">'7th'</span> },</div><div class="line">{ id: <span class="number">2</span>, name: <span class="string">'Arefin Billah'</span>, credit: <span class="number">15</span>, semester: <span class="string">'6th'</span> },</div><div class="line">{ id: <span class="number">3</span>, name: <span class="string">'Zahid Hasan'</span>, credit: <span class="number">12</span>, semester: <span class="string">'7th'</span> },</div><div class="line">{ id: <span class="number">1</span>, name: <span class="string">'Mahedee Hasan'</span>, credit: <span class="number">20</span>, semester: <span class="string">'8th'</span> },</div><div class="line">{ id: <span class="number">2</span>, name: <span class="string">'Enamul Haque'</span>, credit: <span class="number">15</span>, semester: <span class="string">'7th'</span> },</div><div class="line">{ id: <span class="number">2</span>, name: <span class="string">'Arefin Billah'</span>, credit: <span class="number">15</span>, semester: <span class="string">'6th'</span> },</div><div class="line">{ id: <span class="number">3</span>, name: <span class="string">'Zahid Hasan'</span>, credit: <span class="number">12</span>, semester: <span class="string">'7th'</span> }</div><div class="line">]);</div><div class="line"></div><div class="line">app.controller(<span class="string">'studentsCtrl'</span>, function ($scope, studentInfo) {</div><div class="line">$scope.studentInfo = studentInfo;</div><div class="line">$scope.keys = <span class="keyword">null</span>;</div><div class="line">});</div><div class="line"></div><div class="line">app.controller(<span class="string">'sumController'</span>, function ($scope) {</div><div class="line">$scope.data = {</div><div class="line">sum: <span class="number">1</span></div><div class="line">}</div><div class="line"></div><div class="line">$scope.increment = function(value) {</div><div class="line">$scope.data.sum += value;</div><div class="line">}</div><div class="line"></div><div class="line">$scope.revert = function(value) {</div><div class="line">$scope.data.sum -= value;</div><div class="line">}</div><div class="line"></div><div class="line">$scope.clear = function() {</div><div class="line">$scope.data.sum = <span class="number">0</span>;</div><div class="line">}</div><div class="line">})</div><div class="line"></div><div class="line">app.directive(<span class="string">'myclick'</span>, function ($parse) {</div><div class="line"><span class="keyword">return</span> {</div><div class="line">restrict: <span class="string">'A'</span>,</div><div class="line">link: function (scope, element, attr) {</div><div class="line">var parsed = $parse(attr .myclick);</div><div class="line">element.bind(<span class="string">"click"</span>, function () {</div><div class="line">alert(<span class="string">"loading..."</span>);</div><div class="line">scope.$apply(function () {</div><div class="line">parsed(scope);</div><div class="line">})</div><div class="line">})</div><div class="line">}</div><div class="line">}</div><div class="line">})</div></pre></td></tr></table></figure>

<hr>
<h2 id="Default-aspx">Default.aspx</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%@ Page Title="" Language="C#" MasterPageFile="~/Site.Master" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="AngularWeb.Default" %&gt;</div><div class="line"></div><div class="line">&lt;asp:Content ID="Content2" ContentPlaceHolderID="MainContent" runat="server"&gt;</div><div class="line"></div><div class="line">&lt;div class="page-header"&gt;</div><div class="line">&lt;h1&gt; Test program</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div class="container" ng-controller="studentsCtrl" ng-app="app"&gt;</div><div class="line"></div><div class="line">&lt;input type="text" ng-model="keys" placeholder="Search..." type="text" class="form-control" /&gt;</div><div class="line"></div><div class="line">&lt;table class="table table-striped table-hover table-condensed"&gt;</div><div class="line">&lt;thead&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;th&gt;Id&lt;/th&gt;</div><div class="line">&lt;th&gt;Name&lt;/th&gt;</div><div class="line">&lt;th&gt;Credit&lt;/th&gt;</div><div class="line">&lt;th&gt;Wow&lt;/th&gt;</div><div class="line"></div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;/thead&gt;</div><div class="line"></div><div class="line">&lt;tr ng-repeat="student in studentInfo | filter : keys"&gt;</div><div class="line">&lt;td&gt;</div><div class="line">&lt;/td&gt;</div><div class="line">&lt;td&gt;</div><div class="line">&lt;/td&gt;</div><div class="line">&lt;td&gt;</div><div class="line">&lt;/td&gt;</div><div class="line">&lt;td&gt;</div><div class="line">&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line"></div><div class="line">&lt;/table&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;div ng-app="app" ng-controller="sumController" class="btn-group"&gt;</div><div class="line">&lt;h4&gt;Current Value: &lt;/h4&gt; &lt;br/&gt;</div><div class="line">&lt;label class="btn btn-primary" ng-click="increment(2)"&gt; Add to current&lt;/label&gt;</div><div class="line">&lt;label class="btn btn-primary" ng-click="revert(2)"&gt;Revert&lt;/label&gt;</div><div class="line">&lt;label class="btn btn-primary" ng-click="clear()"&gt;Clear&lt;/label&gt;</div><div class="line">&lt;label class="btn btn-primary" myclick="increment(2)"&gt;Try Directives&lt;/label&gt;</div><div class="line">&lt;br/&gt;</div><div class="line"></div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/asp:Content&gt;</div></pre></td></tr></table></figure>

<hr>
<h2 id="Site-Master">Site.Master</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%@ Master Language="C#" AutoEventWireup="true" CodeBehind="Site.master.cs" Inherits="AngularWeb.Site" %&gt;</div><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"></div><div class="line">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;</div><div class="line">&lt;head runat="server"&gt;</div><div class="line">&lt;title&gt;&lt;/title&gt;</div><div class="line"></div><div class="line">&lt;asp:ContentPlaceHolder ID="HeadContent" runat="server"&gt;</div><div class="line">&lt;/asp:ContentPlaceHolder&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;form id="form1" runat="server"&gt;</div><div class="line">&lt;div&gt;</div><div class="line">&lt;asp:ContentPlaceHolder ID="MainContent" runat="server"&gt;</div><div class="line">&lt;/asp:ContentPlaceHolder&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;link href="Content/bootstrap.css" rel="stylesheet" type="text/css" /&gt;</div><div class="line">&lt;script src="scripts/angular.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="scripts/angular-resource.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="scripts/ui-bootstrap-tpls-0.13.0.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="scripts/app/app.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="scripts/app/data.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="scripts/app/studentsCtrl.js"&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>

<p><img src="http://s9.postimg.org/jput6wcgu/temp.jpg" alt=""></p>
<hr>
<h1 id="Useful_Plugins">Useful Plugins</h1>
<h2 id="UI-Router">UI-Router</h2>
<h2 id="Angular-UI">Angular-UI</h2>
<h2 id="Datatables">Datatables</h2>
]]></content>
    <summary type="html">
    <![CDATA[<p>I’ll be using AngularJS for a project at work, mainly using <a href="http://www.amazon.com/Mastering-Web-Application-Development-AngularJS/dp/1782161821" target="_blank" rel="external">Mastering Web Application Development with AngularJS</a> and <a href="http://henriquat.re/" target="_blank" rel="external">This ebook</a>.</p>
]]>
    
    </summary>
    
      <category term="AngularJS" scheme="http://sunbingjie.tk/tags/AngularJS/"/>
    
      <category term="学习" scheme="http://sunbingjie.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jump Game, Jump Game II]]></title>
    <link href="http://sunbingjie.tk/2015/06/07/5.30/"/>
    <id>http://sunbingjie.tk/2015/06/07/5.30/</id>
    <published>2015-06-07T06:18:52.000Z</published>
    <updated>2015-06-07T06:18:52.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Jump_Game">Jump Game</h2>
<blockquote>
<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.<br>Each element in the array represents your maximum jump length at that position.<br>Determine if you are able to reach the last index.<br>For example:<br>A = [2,3,1,1,4], return true.<br>A = [3,2,1,0,4], return false.</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<p>Simple 1D DP, update maxjump on each step, when we are at a place even maxjump cannot reach, return false.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span>(<span class="keyword">int</span>[] nums) {</div><div class="line">    <span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span> || nums.length==<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">int</span> maxjump = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++){</div><div class="line">        <span class="keyword">if</span>(i &gt; maxjump) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// max jump streak cannot reach i</span></div><div class="line">        <span class="keyword">if</span>(nums[i]+i &gt; maxjump){</div><div class="line">            maxjump = nums[i]+i;</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(maxjump &gt;= nums.length-<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Jump_Game_II">Jump Game II</h2>
<blockquote>
<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.<br>Each element in the array represents your maximum jump length at that position.<br>Your goal is to reach the last index in the minimum number of jumps.<br>For example:<br>Given array A = [2,3,1,1,4]<br>The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<p>Similar to one, we record a lastjump var. Whenver we have to take a step(i&gt;lastjump), update lastjump to maxjump(which is update on each index), as a simple greedy process.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span>(<span class="keyword">int</span>[] nums) {</div><div class="line">        <span class="keyword">int</span> maxjump=<span class="number">0</span>, lastjump=<span class="number">0</span>, step=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++){</div><div class="line">            <span class="keyword">if</span>(i&gt;lastjump){</div><div class="line">                step++;</div><div class="line">                lastjump=maxjump;</div><div class="line">            }</div><div class="line">            <span class="keyword">if</span>(nums[i]+i&gt;maxjump){</div><div class="line">                maxjump=nums[i]+i;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(maxjump&gt;=nums.length-<span class="number">1</span>) <span class="keyword">return</span> step;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    }</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Ftijn-speets%2Flo-fang-youre-the-one-that-i-want-chanel-5%3Fin%3Dcici-42%2Fsets%2Fsummer-vibes&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Jump_Game">Jump Game</h2>
<blockquote>
<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.<br>Each element in the array represents your maximum jump length at that position.<br>Determine if you are able to reach the last index.<br>For example:<br>A = [2,3,1,1,4], return true.<br>A = [3,2,1,0,4], return false.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="DP" scheme="http://sunbingjie.tk/tags/DP/"/>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[List of piano sheet to learn]]></title>
    <link href="http://sunbingjie.tk/2015/05/01/pianosheets/"/>
    <id>http://sunbingjie.tk/2015/05/01/pianosheets/</id>
    <published>2015-05-02T02:26:42.000Z</published>
    <updated>2015-05-02T02:26:42.000Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>
<h3 id="Easy">Easy</h3>
<p>Maksim Mrvica - Claudine   </p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/Nkgezt05MOE" frameborder="0" allowfullscreen></iframe>

<h3 id="Inter">Inter</h3>
<p>Tchaikovsky The Seasons: June “Barcarole”</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/oLxz9rai_bM" frameborder="0" allowfullscreen></iframe>

<h3 id="Hard">Hard</h3>
<p>Chopin - Ballade No. 1 in G minor, Op. 23</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/Ce8p0VcTbuA" frameborder="0" allowfullscreen></iframe>

<p>Liszt - Liebestraum No. 3 in A-flat Major</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/XsxDH4HcOWA" frameborder="0" allowfullscreen></iframe><br><iframe width="420" height="315" src="https://www.youtube.com/embed/nkXOrkeZyqQ" frameborder="0" allowfullscreen></iframe>]]></content>
    <summary type="html">
    <![CDATA[<a id="more"></a>
<h3 id="Easy">Easy</h3>
<p>Maksim Mrvica - Claudine   </p>
<iframe width="420" height="315" src="https://www.youtube.com/e]]>
    </summary>
    
      <category term="Classical" scheme="http://sunbingjie.tk/tags/Classical/"/>
    
      <category term="Music" scheme="http://sunbingjie.tk/categories/Music/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MapReduce的模式、算法和用例]]></title>
    <link href="http://sunbingjie.tk/2015/05/01/mapreduceinonepage/"/>
    <id>http://sunbingjie.tk/2015/05/01/mapreduceinonepage/</id>
    <published>2015-05-01T22:51:54.000Z</published>
    <updated>2015-05-01T22:51:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在这篇文章里总结了几种网上或者论文中常见的MapReduce模式和算法，并系统化的解释了这些技术的不同之处。所有描述性的文字和代码都使用了标准hadoop的MapReduce模型，包括Mappers, Reduces, Combiners, Partitioners,和 sorting。如下图所示。<br><img src="http://www.kuqin.com/upimg/allimg/130629/192PQ950-.png" alt=""></p>
<a id="more"></a>
<h2 id="基本MapReduce模式">基本MapReduce模式</h2>
<h3 id="计数与求和">计数与求和</h3>
<p>问题陈述:有许多文档，每个文档都有一些字段组成。需要计算出每个字段在所有文档中的出现次数或者这些字段的其他什么统计值。例如，给定一个log文件，其中的每条记录都包含一个响应时间，需要计算出平均响应时间。</p>
<p>解决方案:</p>
<p>让我们先从简单的例子入手。在下面的代码片段里，Mapper每遇到指定词就把频次记1，Reducer一个个遍历这些词的集合然后把他们的频次加和。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class <span class="type">Mapper</span></div><div class="line"><span class="keyword">method</span> <span class="type">Map</span>(docid id, doc d)</div><div class="line"><span class="keyword">for</span> all term t <span class="keyword">in</span> doc d <span class="keyword">do</span></div><div class="line"><span class="type">Emit</span>(term t, count <span class="number">1</span>)</div><div class="line"> </div><div class="line">class <span class="type">Reducer</span></div><div class="line"><span class="keyword">method</span> <span class="type">Reduce</span>(term t, counts [c1, c2,...])</div><div class="line">sum = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> all count c <span class="keyword">in</span> [c1, c2,...] <span class="keyword">do</span></div><div class="line">sum = sum + c</div><div class="line"><span class="type">Emit</span>(term t, count sum)</div></pre></td></tr></table></figure>

<p>这种方法的缺点显而易见，Mapper提交了太多无意义的计数。它完全可以通过先对每个文档中的词进行计数从而减少传递给Reducer的数据量:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class <span class="type">Mapper</span></div><div class="line"><span class="keyword">method</span> <span class="type">Map</span>(docid id, doc d)</div><div class="line">H = new <span class="type">AssociativeArray</span></div><div class="line"><span class="keyword">for</span> all term t <span class="keyword">in</span> doc d <span class="keyword">do</span></div><div class="line">H{t} = H{t} + <span class="number">1</span></div><div class="line"><span class="keyword">for</span> all term t <span class="keyword">in</span> H <span class="keyword">do</span></div><div class="line"><span class="type">Emit</span>(term t, count H{t})</div></pre></td></tr></table></figure>

<p>如果要累计计数的的不只是单个文档中的内容，还包括了一个Mapper节点处理的所有文档，那就要用到Combiner了:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Mapper</div><div class="line">method Map(docid id, doc d)</div><div class="line"><span class="keyword">for</span> all term t <span class="keyword">in</span> doc d do</div><div class="line">Emit(term t, count <span class="number">1</span>)</div><div class="line"> </div><div class="line">class Combiner</div><div class="line">method Combine(term t, [c1, c2,<span class="keyword">...</span>])</div><div class="line">sum = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> all count c <span class="keyword">in</span> [c1, c2,<span class="keyword">...</span>] do</div><div class="line">sum = sum + c</div><div class="line">Emit(term t, count sum)</div><div class="line"> </div><div class="line">class Reducer</div><div class="line">method Reduce(term t, counts [c1, c2,<span class="keyword">...</span>])</div><div class="line">sum = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> all count c <span class="keyword">in</span> [c1, c2,<span class="keyword">...</span>] do</div><div class="line">sum = sum + c</div><div class="line">Emit(term t, count sum)</div></pre></td></tr></table></figure>

<p>应用:<br>Log 分析, 数据查询</p>
<h3 id="整理归类">整理归类</h3>
<p>问题陈述:</p>
<p>有一系列条目，每个条目都有几个属性，要把具有同一属性值的条目都保存在一个文件里，或者把条目按照属性值分组。 最典型的应用是倒排索引。</p>
<p>解决方案：</p>
<p>解决方案很简单。 在 Mapper 中以每个条目的所需属性值作为 key，其本身作为值传递给 Reducer。 Reducer 取得按照属性值分组的条目，然后可以处理或者保存。如果是在构建倒排索引，那么 每个条目相当于一个词而属性值就是词所在的文档ID。</p>
<p>应用:<br>倒排索引， ETL</p>
<h3 id="过滤_(文本查找)，解析和校验">过滤 (文本查找)，解析和校验</h3>
<p>问题陈述:</p>
<p>假设有很多条记录，需要从其中找出满足某个条件的所有记录，或者将每条记录传换成另外一种形式（转换操作相对于各条记录独立，即对一条记录的操作与其他记录无关）。像文本解析、特定值抽取、格式转换等都属于后一种用例。</p>
<p>解决方案:</p>
<p>非常简单，在Mapper 里逐条进行操作，输出需要的值或转换后的形式。</p>
<p>应用:<br>日志分析，数据查询，ETL，数据校验</p>
<h3 id="分布式任务执行">分布式任务执行</h3>
<p>问题陈述:</p>
<p>大型计算可以分解为多个部分分别进行然后合并各个计算的结果以获得最终结果。</p>
<p>解决方案: 将数据切分成多份作为每个 Mapper 的输入，每个Mapper处理一份数据，执行同样的运算，产生结果，Reducer把多个Mapper的结果组合成一个。</p>
<p>案例研究： 数字通信系统模拟<br>像 WiMAX 这样的数字通信模拟软件通过系统模型来传输大量的随机数据，然后计算传输中的错误几率。 每个 Mapper 处理样本 1/N 的数据，计算出这部分数据的错误率，然后在 Reducer 里计算平均错误率。</p>
<p>应用:<br>工程模拟，数字分析，性能测试</p>
<h3 id="排序">排序</h3>
<p>问题陈述:</p>
<p>有许多条记录，需要按照某种规则将所有记录排序或是按照顺序来处理记录。</p>
<p>解决方案:简单排序很好办 – Mappers 将待排序的属性值为键，整条记录为值输出。 不过实际应用中的排序要更加巧妙一点， 这就是它之所以被称为MapReduce 核心的原因（“核心”是说排序？因为证明Hadoop计算能力的实验是大数据排序？还是说Hadoop的处理过程中对key排序的环节？）。在实践中，常用组合键来实现二次排序和分组。</p>
<p>MapReduce 最初只能够对键排序， 但是也有技术利用可以利用Hadoop 的特性来实现按值排序。想了解的话可以看这篇博客。</p>
<p>按照BigTable的概念，使用 MapReduce来对最初数据而非中间数据排序，也即保持数据的有序状态更有好处，必须注意这一点。换句话说，在数据插入时排序一次要比在每次查询数据的时候排序更高效。</p>
<h2 id="非基本_MapReduce_模式">非基本 MapReduce 模式</h2>
<h3 id="迭代消息传递_(图处理)">迭代消息传递 (图处理)</h3>
<p>问题陈述：</p>
<p>假设一个实体网络，实体之间存在着关系。 需要按照与它比邻的其他实体的属性计算出一个状态。这个状态可以表现为它和其它节点之间的距离， 存在特定属性的邻接点的迹象， 邻域密度特征等等。</p>
<p>解决方案：</p>
<p>网络存储为系列节点的结合，每个节点包含有其所有邻接点ID的列表。按照这个概念，MapReduce 迭代进行，每次迭代中每个节点都发消息给它的邻接点。邻接点根据接收到的信息更新自己的状态。当满足了某些条件的时候迭代停止，如达到了最大迭代次数（网络半径）或两次连续的迭代几乎没有状态改变。从技术上来看，Mapper 以每个邻接点的ID为键发出信息，所有的信息都会按照接受节点分组，reducer 就能够重算各节点的状态然后更新那些状态改变了的节点。下面展示了这个算法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class <span class="type">Mapper</span></div><div class="line"><span class="keyword">method</span> <span class="type">Map</span>(id n, <span class="keyword">object</span> N)</div><div class="line"><span class="type">Emit</span>(id n, <span class="keyword">object</span> N)</div><div class="line"><span class="keyword">for</span> all id m <span class="keyword">in</span> N.<span class="type">OutgoingRelations</span> <span class="keyword">do</span></div><div class="line"><span class="type">Emit</span>(id m, message getMessage(N))</div><div class="line"> </div><div class="line">class <span class="type">Reducer</span></div><div class="line"><span class="keyword">method</span> <span class="type">Reduce</span>(id m, [s1, s2,...])</div><div class="line">M = null</div><div class="line">messages = []</div><div class="line"><span class="keyword">for</span> all s <span class="keyword">in</span> [s1, s2,...] <span class="keyword">do</span></div><div class="line"><span class="keyword">if</span> <span class="type">IsObject</span>(s) then</div><div class="line">M = s</div><div class="line"><span class="keyword">else</span>               // s <span class="keyword">is</span> a message</div><div class="line">messages.add(s)</div><div class="line">M.<span class="type">State</span> = calculateState(messages)</div><div class="line"><span class="type">Emit</span>(id m, item M)</div></pre></td></tr></table></figure>

<p>一个节点的状态可以迅速的沿着网络传全网，那些被感染了的节点又去感染它们的邻居，整个过程就像下面的图示一样：<br><img src="http://www.kuqin.com/upimg/allimg/130629/192PU644-.png" alt=""></p>
<p>案例研究： 沿分类树的有效性传递<br>问题陈述：</p>
<p>这个问题来自于真实的电子商务应用。将各种货物分类，这些类别可以组成一个树形结构，比较大的分类（像男人、女人、儿童）可以再分出小分类（像男裤或女装），直到不能再分为止（像男式蓝色牛仔裤）。这些不能再分的基层类别可以是有效（这个类别包含有货品）或者已无效的（没有属于这个分类的货品）。如果一个分类至少含有一个有效的子分类那么认为这个分类也是有效的。我们需要在已知一些基层分类有效的情况下找出分类树上所有有效的分类。</p>
<p>解决方案：</p>
<p>这个问题可以用上一节提到的框架来解决。我们咋下面定义了名为 getMessage和 calculateState 的方法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class N</div><div class="line"><span class="type">State</span> <span class="keyword">in</span> {<span class="type">True</span> = <span class="number">2</span>, <span class="type">False</span> = <span class="number">1</span>, null = <span class="number">0</span>},</div><div class="line">initialized <span class="number">1</span> <span class="keyword">or</span> <span class="number">2</span> <span class="keyword">for</span> <span class="keyword">end</span>-<span class="keyword">of</span>-line categories, <span class="number">0</span> otherwise</div><div class="line"><span class="keyword">method</span> getMessage(<span class="keyword">object</span> N)</div><div class="line"><span class="keyword">return</span> N.<span class="type">State</span></div><div class="line"><span class="keyword">method</span> calculateState(state s, data [d1, d2,...])</div><div class="line"><span class="keyword">return</span> max( [d1, d2,...] )</div></pre></td></tr></table></figure>

<p>案例研究：广度优先搜索<br>问题陈述：需要计算出一个图结构中某一个节点到其它所有节点的距离。</p>
<p>解决方案：Source源节点给所有邻接点发出值为0的信号，邻接点把收到的信号再转发给自己的邻接点，每转发一次就对信号值加1：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class N</div><div class="line"><span class="type">State</span> <span class="keyword">is</span> distance,</div><div class="line">initialized <span class="number">0</span> <span class="keyword">for</span> source node, <span class="type">INFINITY</span> <span class="keyword">for</span> all other nodes</div><div class="line"><span class="keyword">method</span> getMessage(N)</div><div class="line"><span class="keyword">return</span> N.<span class="type">State</span> + <span class="number">1</span></div><div class="line"><span class="keyword">method</span> calculateState(state s, data [d1, d2,...])</div><div class="line">min( [d1, d2,...] )</div></pre></td></tr></table></figure>

<p>案例研究：网页排名和 Mapper 端数据聚合<br>这个算法由Google提出，使用权威的PageRank算法，通过连接到一个网页的其他网页来计算网页的相关性。真实算法是相当复杂的，但是核心思想是权重可以传播，也即通过一个节点的各联接节点的权重的均值来计算节点自身的权重。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class N</div><div class="line"><span class="type">State</span> <span class="keyword">is</span> <span class="type">PageRank</span></div><div class="line"><span class="keyword">method</span> getMessage(<span class="keyword">object</span> N)</div><div class="line"><span class="keyword">return</span> N.<span class="type">State</span> / N.<span class="type">OutgoingRelations</span>.size()</div><div class="line"><span class="keyword">method</span> calculateState(state s, data [d1, d2,...])</div><div class="line"><span class="keyword">return</span> ( sum([d1, d2,...]) )</div></pre></td></tr></table></figure>

<p>要指出的是上面用一个数值来作为评分实际上是一种简化，在实际情况下，我们需要在Mapper端来进行聚合计算得出这个值。下面的代码片段展示了这个改变后的逻辑 （针对于 PageRank 算法）：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class <span class="type">Mapper</span></div><div class="line"><span class="keyword">method</span> <span class="type">Initialize</span></div><div class="line">H = new <span class="type">AssociativeArray</span></div><div class="line"><span class="keyword">method</span> <span class="type">Map</span>(id n, <span class="keyword">object</span> N)</div><div class="line">p = N.<span class="type">PageRank</span>  / N.<span class="type">OutgoingRelations</span>.size()</div><div class="line"><span class="type">Emit</span>(id n, <span class="keyword">object</span> N)</div><div class="line"><span class="keyword">for</span> all id m <span class="keyword">in</span> N.<span class="type">OutgoingRelations</span> <span class="keyword">do</span></div><div class="line">H{m} = H{m} + p</div><div class="line"><span class="keyword">method</span> <span class="type">Close</span></div><div class="line"><span class="keyword">for</span> all id n <span class="keyword">in</span> H <span class="keyword">do</span></div><div class="line"><span class="type">Emit</span>(id n, value H{n})</div><div class="line"> </div><div class="line">class <span class="type">Reducer</span></div><div class="line"><span class="keyword">method</span> <span class="type">Reduce</span>(id m, [s1, s2,...])</div><div class="line">M = null</div><div class="line">p = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> all s <span class="keyword">in</span> [s1, s2,...] <span class="keyword">do</span></div><div class="line"><span class="keyword">if</span> <span class="type">IsObject</span>(s) then</div><div class="line">M = s</div><div class="line"><span class="keyword">else</span></div><div class="line">p = p + s</div><div class="line">M.<span class="type">PageRank</span> = p</div><div class="line"><span class="type">Emit</span>(id m, item M)</div></pre></td></tr></table></figure>

<p>应用：<br>图分析，网页索引</p>
<h3 id="值去重_（对唯一项计数）">值去重 （对唯一项计数）</h3>
<p>问题陈述:记录包含值域F和值域 G，要分别统计相同G值的记录中不同的F值的数目 (相当于按照 G分组).</p>
<p>这个问题可以推而广之应用于分面搜索（某些电子商务网站称之为Narrow Search）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Record <span class="number">1</span>: <span class="variable">F=</span><span class="number">1</span>, <span class="variable">G=</span>{a, b}</div><div class="line">Record <span class="number">2</span>: <span class="variable">F=</span><span class="number">2</span>, <span class="variable">G=</span>{a, d, e}</div><div class="line">Record <span class="number">3</span>: <span class="variable">F=</span><span class="number">1</span>, <span class="variable">G=</span>{b}</div><div class="line">Record <span class="number">4</span>: <span class="variable">F=</span><span class="number">3</span>, <span class="variable">G=</span>{a, b}</div><div class="line"> </div><div class="line">Result:</div><div class="line">a -&gt; <span class="number">3</span> // <span class="variable">F=</span><span class="number">1</span>, <span class="variable">F=</span><span class="number">2</span>, <span class="variable">F=</span><span class="number">3</span></div><div class="line">b -&gt; <span class="number">2</span> // <span class="variable">F=</span><span class="number">1</span>, <span class="variable">F=</span><span class="number">3</span></div><div class="line">d -&gt; <span class="number">1</span> // <span class="variable">F=</span><span class="number">2</span></div><div class="line">e -&gt; <span class="number">1</span> // <span class="variable">F=</span><span class="number">2</span></div></pre></td></tr></table></figure>

<p>解决方案 I:</p>
<p>第一种方法是分两个阶段来解决这个问题。第一阶段在Mapper中使用F和G组成一个复合值对，然后在Reducer中输出每个值对，目的是为了保证F值的唯一性。在第二阶段，再将值对按照G值来分组计算每组中的条目数。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">第一阶段：</div><div class="line">class Mapper</div><div class="line">method Map(null, record [value f, categories [g1, g2,<span class="keyword">...</span>]])</div><div class="line"><span class="keyword">for</span> all category g <span class="keyword">in</span> [g1, g2,<span class="keyword">...</span>]</div><div class="line">Emit(record [g, f], count <span class="number">1</span>)</div><div class="line"> </div><div class="line">class Reducer</div><div class="line">method Reduce(record [g, f], counts [n1, n2, <span class="keyword">...</span>])</div><div class="line">Emit(record [g, f], null )</div><div class="line">第二阶段：</div><div class="line">class Mapper</div><div class="line">method Map(record [f, g], null)</div><div class="line">Emit(value g, count <span class="number">1</span>)</div><div class="line"> </div><div class="line">class Reducer</div><div class="line">method Reduce(value g, counts [n1, n2,<span class="keyword">...</span>])</div><div class="line">Emit(value g, sum( [n1, n2,<span class="keyword">...</span>] ) )</div><div class="line">解决方案 II:</div></pre></td></tr></table></figure>

<p>第二种方法只需要一次MapReduce 即可实现，但扩展性不强。算法很简单-Mapper 输出值和分类，在Reducer里为每个值对应的分类去重然后给每个所属的分类计数加1，最后再在Reducer结束后将所有计数加和。这种方法适用于只有有限个分类，而且拥有相同F值的记录不是很多的情况。例如网络日志处理和用户分类，用户的总数很多，但是每个用户的事件是有限的，以此分类得到的类别也是有限的。值得一提的是在这种模式下可以在数据传输到Reducer之前使用Combiner来去除分类的重复值。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Mapper</div><div class="line">method Map(null, record [value f, categories [g1, g2,<span class="keyword">...</span>] )</div><div class="line"><span class="keyword">for</span> all category g <span class="keyword">in</span> [g1, g2,<span class="keyword">...</span>]</div><div class="line">Emit(value f, category g)</div><div class="line"> </div><div class="line">class Reducer</div><div class="line">method Initialize</div><div class="line">H = new AssociativeArray : category -&gt; count</div><div class="line">method Reduce(value f, categories [g1, g2,<span class="keyword">...</span>])</div><div class="line">[g1<span class="string">', g2'</span>,..] = ExcludeDuplicates( [g1, g2,..] )</div><div class="line"><span class="keyword">for</span> all category g <span class="keyword">in</span> [g1<span class="string">', g2'</span>,<span class="keyword">...</span>]</div><div class="line">H{g} = H{g} + <span class="number">1</span></div><div class="line">method Close</div><div class="line"><span class="keyword">for</span> all category g <span class="keyword">in</span> H do</div><div class="line">Emit(category g, count H{g})</div></pre></td></tr></table></figure>

<p>应用：<br>日志分析，用户计数</p>
<h3 id="互相关">互相关</h3>
<p>问题陈述：有多个各由若干项构成的组，计算项两两共同出现于一个组中的次数。假如项数是N，那么应该计算N*N。</p>
<p>这种情况常见于文本分析（条目是单词而元组是句子），市场分析（购买了此物的客户还可能购买什么）。如果N*N小到可以容纳于一台机器的内存，实现起来就比较简单了。</p>
<p>配对法</p>
<p>第一种方法是在Mapper中给所有条目配对，然后在Reducer中将同一条目对的计数加和。但这种做法也有缺点：</p>
<p>使用 combiners 带来的的好处有限，因为很可能所有项对都是唯一的<br>不能有效利用内存</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Mapper</div><div class="line">method Map(null, items [i1, i2,<span class="keyword">...</span>] )</div><div class="line"><span class="keyword">for</span> all item i <span class="keyword">in</span> [i1, i2,<span class="keyword">...</span>]</div><div class="line"><span class="keyword">for</span> all item j <span class="keyword">in</span> [i1, i2,<span class="keyword">...</span>]</div><div class="line">Emit(pair [i j], count <span class="number">1</span>)</div><div class="line"> </div><div class="line">class Reducer</div><div class="line">method Reduce(pair [i j], counts [c1, c2,<span class="keyword">...</span>])</div><div class="line">s = sum([c1, c2,<span class="keyword">...</span>])</div><div class="line">Emit(pair[i j], count s)</div><div class="line">Stripes Approach（条方法？不知道这个名字怎么理解）</div></pre></td></tr></table></figure>

<p>第二种方法是将数据按照pair中的第一项来分组，并维护一个关联数组，数组中存储的是所有关联项的计数。The second approach is to group data by the first item in pair and maintain an associative array (“stripe”) where counters for all adjacent items are accumulated. Reducer receives all stripes for leading item i, merges them, and emits the same result as in the Pairs approach.</p>
<p>中间结果的键数量相对较少，因此减少了排序消耗。<br>可以有效利用 combiners。<br>可在内存中执行，不过如果没有正确执行的话也会带来问题。<br>实现起来比较复杂。<br>一般来说， “stripes” 比 “pairs” 更快</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Mapper</div><div class="line">method Map(null, items [i1, i2,<span class="keyword">...</span>] )</div><div class="line"><span class="keyword">for</span> all item i <span class="keyword">in</span> [i1, i2,<span class="keyword">...</span>]</div><div class="line">H = new AssociativeArray : item -&gt; counter</div><div class="line"><span class="keyword">for</span> all item j <span class="keyword">in</span> [i1, i2,<span class="keyword">...</span>]</div><div class="line">H{j} = H{j} + <span class="number">1</span></div><div class="line">Emit(item i, stripe H)</div><div class="line"> </div><div class="line">class Reducer</div><div class="line">method Reduce(item i, stripes [H1, H2,<span class="keyword">...</span>])</div><div class="line">H = new AssociativeArray : item -&gt; counter</div><div class="line">H = merge-sum( [H1, H2,<span class="keyword">...</span>] )</div><div class="line"><span class="keyword">for</span> all item j <span class="keyword">in</span> H.keys()</div><div class="line">Emit(pair [i j], H{j})</div></pre></td></tr></table></figure>

<p>应用：<br>文本分析，市场分析</p>
<h2 id="用MapReduce_表达关系模式">用MapReduce 表达关系模式</h2>
<p>在这部分我们会讨论一下怎么使用MapReduce来进行主要的关系操作。</p>
<h3 id="筛选（Selection）">筛选（Selection）</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Mapper</div><div class="line"><span class="function"><span class="keyword">method</span> <span class="title">Map</span><span class="params">(rowkey key, <span class="keyword">tuple</span> t)</span></span></div><div class="line"><span class="title">if</span> <span class="title">t</span> <span class="title">satisfies</span> <span class="title">the</span> <span class="title">predicate</span></div><div class="line"><span class="title">Emit</span><span class="params">(<span class="keyword">tuple</span> t, null)</span></div></pre></td></tr></table></figure>

<h3 id="投影（Projection）">投影（Projection）</h3>
<p>投影只比筛选稍微复杂一点，在这种情况下我们可以用Reducer来消除可能的重复值。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class <span class="type">Mapper</span></div><div class="line"><span class="keyword">method</span> <span class="type">Map</span>(rowkey key, <span class="keyword">tuple</span> t)</div><div class="line"><span class="keyword">tuple</span> g = project(t) // extract required fields to <span class="keyword">tuple</span> g</div><div class="line"><span class="type">Emit</span>(<span class="keyword">tuple</span> g, null)</div><div class="line"> </div><div class="line">class <span class="type">Reducer</span></div><div class="line"><span class="keyword">method</span> <span class="type">Reduce</span>(<span class="keyword">tuple</span> t, <span class="type">array</span> n) // n <span class="keyword">is</span> an <span class="type">array</span> <span class="keyword">of</span> nulls</div><div class="line"><span class="type">Emit</span>(<span class="keyword">tuple</span> t, null)</div></pre></td></tr></table></figure>

<h3 id="合并（Union）">合并（Union）</h3>
<p>两个数据集中的所有记录都送入Mapper，在Reducer里消重。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class <span class="type">Mapper</span></div><div class="line"><span class="keyword">method</span> <span class="type">Map</span>(rowkey key, <span class="keyword">tuple</span> t)</div><div class="line"><span class="type">Emit</span>(<span class="keyword">tuple</span> t, null)</div><div class="line"> </div><div class="line">class <span class="type">Reducer</span></div><div class="line"><span class="keyword">method</span> <span class="type">Reduce</span>(<span class="keyword">tuple</span> t, <span class="type">array</span> n) // n <span class="keyword">is</span> an <span class="type">array</span> <span class="keyword">of</span> one <span class="keyword">or</span> two nulls</div><div class="line"><span class="type">Emit</span>(<span class="keyword">tuple</span> t, null)</div></pre></td></tr></table></figure>

<h3 id="交集（Intersection）">交集（Intersection）</h3>
<p>将两个数据集中需要做交叉的记录输入Mapper，Reducer 输出出现了两次的记录。因为每条记录都有一个主键，在每个数据集中只会出现一次，所以这样做是可行的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class <span class="type">Mapper</span></div><div class="line"><span class="keyword">method</span> <span class="type">Map</span>(rowkey key, <span class="keyword">tuple</span> t)</div><div class="line"><span class="type">Emit</span>(<span class="keyword">tuple</span> t, null)</div><div class="line"> </div><div class="line">class <span class="type">Reducer</span></div><div class="line"><span class="keyword">method</span> <span class="type">Reduce</span>(<span class="keyword">tuple</span> t, <span class="type">array</span> n) // n <span class="keyword">is</span> an <span class="type">array</span> <span class="keyword">of</span> one <span class="keyword">or</span> two nulls</div><div class="line"><span class="keyword">if</span> n.size() = <span class="number">2</span></div><div class="line"><span class="type">Emit</span>(<span class="keyword">tuple</span> t, null)</div></pre></td></tr></table></figure>

<h3 id="差异（Difference）">差异（Difference）</h3>
<p>假设有两个数据集R和S，我们要找出R与S的差异。Mapper将所有的元组做上标记，表明他们来自于R还是S，Reducer只输出那些存在于R中而不在S中的记录。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class <span class="type">Mapper</span></div><div class="line"><span class="keyword">method</span> <span class="type">Map</span>(rowkey key, <span class="keyword">tuple</span> t)</div><div class="line"><span class="type">Emit</span>(<span class="keyword">tuple</span> t, <span class="type">string</span> t.<span class="type">SetName</span>) // t.<span class="type">SetName</span> <span class="keyword">is</span> either 'R' <span class="keyword">or</span> 'S'</div><div class="line"> </div><div class="line">class <span class="type">Reducer</span></div><div class="line"><span class="keyword">method</span> <span class="type">Reduce</span>(<span class="keyword">tuple</span> t, <span class="type">array</span> n) // <span class="type">array</span> n can be ['R'], ['S'], ['R' 'S'], <span class="keyword">or</span> ['S', 'R']</div><div class="line"><span class="keyword">if</span> n.size() = <span class="number">1</span> <span class="keyword">and</span> n[<span class="number">1</span>] = 'R'</div><div class="line"><span class="type">Emit</span>(<span class="keyword">tuple</span> t, null)</div></pre></td></tr></table></figure>

<h3 id="分组聚合（GroupBy_and_Aggregation）">分组聚合（GroupBy and Aggregation）</h3>
<p>分组聚合可以在如下的一个MapReduce中完成。Mapper抽取数据并将之分组聚合，Reducer 中对收到的数据再次聚合。典型的聚合应用比如求和与最值可以以流的方式进行计算，因而不需要同时保有所有的值。但是另外一些情景就必须要两阶段MapReduce，前面提到过的惟一值模式就是一个这种类型的例子。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Mapper</div><div class="line">method Map(null, tuple [value GroupBy, value AggregateBy, value <span class="keyword">...</span>])</div><div class="line">Emit(value GroupBy, value AggregateBy)</div><div class="line">class Reducer</div><div class="line">method Reduce(value GroupBy, [v1, v2,<span class="keyword">...</span>])</div><div class="line">Emit(value GroupBy, aggregate( [v1, v2,<span class="keyword">...</span>] ) ) // aggregate() : sum(), max(),<span class="keyword">...</span></div></pre></td></tr></table></figure>

<h3 id="连接（Joining）">连接（Joining）</h3>
<p>MapperReduce框架可以很好地处理连接，不过在面对不同的数据量和处理效率要求的时候还是有一些技巧。在这部分我们会介绍一些基本方法，在后面的参考文档中还列出了一些关于这方面的专题文章。</p>
<p>分配后连接 （Reduce端连接,排序-合并连接）<br>这个算法按照键K来连接数据集R和L。Mapper 遍历R和L中的所有元组，以K为键输出每一个标记了来自于R还是L的元组，Reducer把同一个K的数据分装入两个容器（R和L），然后嵌套循环遍历两个容器中的数据以得到交集，最后输出的每一条结果都包含了R中的数据、L中的数据和K。这种方法有以下缺点：</p>
<p>Mapper要输出所有的数据，即使一些key只会在一个集合中出现。<br>Reducer 要在内存中保有一个key的所有数据，如果数据量打过了内存，那么就要缓存到硬盘上，这就增加了硬盘IO的消耗。<br>尽管如此，再分配连接方式仍然是最通用的方法，特别是其他优化技术都不适用的时候。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Mapper</div><div class="line">method Map(null, tuple [join_key k, value v1, value v2,<span class="keyword">...</span>])</div><div class="line">Emit(join_key k, tagged_tuple [set_name tag, values [v1, v2, <span class="keyword">...</span>] ] )</div><div class="line"> </div><div class="line">class Reducer</div><div class="line">method Reduce(join_key k, tagged_tuples [t1, t2,<span class="keyword">...</span>])</div><div class="line">H = new AssociativeArray : set_name -&gt; values</div><div class="line"><span class="keyword">for</span> all tagged_tuple t <span class="keyword">in</span> [t1, t2,<span class="keyword">...</span>] // separate values into <span class="number">2</span> arrays</div><div class="line">H{t.tag}.add(t.values)</div><div class="line"><span class="keyword">for</span> all values r <span class="keyword">in</span> H{<span class="string">'R'</span>} // produce a cross-join of the two arrays</div><div class="line"><span class="keyword">for</span> all values l <span class="keyword">in</span> H{<span class="string">'L'</span>}</div><div class="line">Emit(null, [k r l] )</div></pre></td></tr></table></figure>

<p>复制链接Replicated Join （Mapper端连接, Hash 连接）<br>在实际应用中，将一个小数据集和一个大数据集连接是很常见的（如用户与日志记录）。假定要连接两个集合R和L，其中R相对较小，这样，可以把R分发给所有的Mapper，每个Mapper都可以载入它并以连接键来索引其中的数据，最常用和有效的索引技术就是哈希表。之后，Mapper遍历L，并将其与存储在哈希表中的R中的相应记录连接，。这种方法非常高效，因为不需要对L中的数据排序，也不需要通过网络传送L中的数据，但是R必须足够小到能够分发给所有的Mapper。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Mapper</div><div class="line"><span class="function"><span class="keyword">method</span> <span class="title">Initialize</span></span></div><div class="line"><span class="title">H</span> = <span class="title">new</span> <span class="title">AssociativeArray</span> : join_key -&gt; <span class="keyword">tuple</span> <span class="keyword">from</span> R</div><div class="line">R = loadR()</div><div class="line"><span class="keyword">for</span> all [ join_key k, <span class="keyword">tuple</span> [r1, r2,...] ] <span class="keyword">in</span> R</div><div class="line">H<span class="comment">{k}</span> = H<span class="comment">{k}</span>.append( [r1, r2,...] )</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">method</span> <span class="title">Map</span><span class="params">(join_key k, <span class="keyword">tuple</span> l)</span></span></div><div class="line"><span class="title">for</span> <span class="title">all</span> <span class="title">tuple</span> <span class="title">r</span> <span class="title">in</span> <span class="title">H</span><span class="comment">{k}</span></div><div class="line"><span class="title">Emit</span><span class="params">(null, <span class="keyword">tuple</span> [k r l] )</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2>
<p>在这篇文章里总结了几种网上或者论文中常见的MapReduce模式和算法，并系统化的解释了这些技术的不同之处。所有描述性的文字和代码都使用了标准hadoop的MapReduce模型，包括Mappers, Reduces, Combiners, Partitioners,和 sorting。如下图所示。<br><img src="http://www.kuqin.com/upimg/allimg/130629/192PQ950-.png" alt=""></p>
]]>
    
    </summary>
    
      <category term="Hadoop" scheme="http://sunbingjie.tk/tags/Hadoop/"/>
    
      <category term="学习" scheme="http://sunbingjie.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Web scraping with Scrapy]]></title>
    <link href="http://sunbingjie.tk/2015/05/01/scrapy/"/>
    <id>http://sunbingjie.tk/2015/05/01/scrapy/</id>
    <published>2015-05-01T22:50:53.000Z</published>
    <updated>2015-05-01T22:50:53.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://doc.scrapy.org/en/latest/intro/overview.html" target="_blank" rel="external">Scrapy</a> is an application framework for crawling web sites and extracting structured data which can be used for a wide range of useful applications, like data mining, information processing or historical archival.<br>So you need to extract some information from a website, but the website doesn’t provide any API or mechanism to access that info programmatically. Scrapy can help you extract that information.</p>
</blockquote>
<a id="more"></a>
<ul>
<li>To write a web crawler, we need at least basic knowledge on XPath and Python, that’s enough! </li>
</ul>
<h3 id="Installation">Installation</h3>
<p>Install using pip</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install Scrapy</div></pre></td></tr></table></figure>

<p>Create project</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy startproject name</div></pre></td></tr></table></figure>

<p>This will create a name dir with the following files</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">name/</div><div class="line">    scrapy.cfg</div><div class="line">    tutorial/</div><div class="line">        __init__.py</div><div class="line">        items.py</div><div class="line">        pipelines.py</div><div class="line">        settings.py</div><div class="line">        spiders/</div><div class="line">            __init__.py</div><div class="line">            <span class="keyword">...</span></div></pre></td></tr></table></figure>

<h3 id="Defining_the_Items_you_will_extract">Defining the Items you will extract</h3>
<p>In items.py, item class which loads our data are declared by creating a scrapy.Item class and defining its attributes as scrapy.Field objects, like you will in an ORM.</p>
<p>Here’s my Item definition:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrawlItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    des = scrapy.Field()</div><div class="line">    image_urls = scrapy.Field()</div><div class="line">    images = scrapy.Field()</div></pre></td></tr></table></figure>

<h3 id="Writing_a_spider_to_crawl_a_site_and_extract_Items">Writing a spider to crawl a site and extract Items</h3>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.contrib.spiders <span class="keyword">import</span> Rule, CrawlSpider</div><div class="line"><span class="keyword">from</span> scrapy.contrib.linkextractors <span class="keyword">import</span> LinkExtractor</div><div class="line"><span class="keyword">from</span> crawl.items <span class="keyword">import</span> CrawlItem</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrawlSpider</span><span class="params">(CrawlSpider)</span>:</span></div><div class="line"></div><div class="line">    name = <span class="string">"crawl"</span></div><div class="line">    allowed_domains = [<span class="string">"polyvore.com"</span>]</div><div class="line">    start_urls = [<span class="string">"http://www.polyvore.com/?filter=fashion"</span>]</div><div class="line">    rules = [Rule(LinkExtractor(allow =[<span class="string">'/.*'</span>]), <span class="string">'parse_crawl'</span>)]</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_crawl</span><span class="params">(self, response)</span>:</span></div><div class="line"> </div><div class="line">        item =CrawlItem()</div><div class="line"></div><div class="line">        link_rel = response.xpath(<span class="string">"//img[@class='img_size_l']/@title"</span>).extract()</div><div class="line">        </div><div class="line">        item[<span class="string">'des'</span>] = [x <span class="keyword">for</span> x <span class="keyword">in</span> link_rel]</div><div class="line"> </div><div class="line">        link = response.xpath(<span class="string">"//img[@class='img_size_l']/@src"</span>).extract()</div><div class="line"> </div><div class="line">        item[<span class="string">'image_urls'</span>] = [ x <span class="keyword">for</span> x <span class="keyword">in</span> link]</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>

<p>Start crawling…</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy crawl crawl</div></pre></td></tr></table></figure>

<h3 id="Writing_an_Item_Pipeline_to_store_the_extracted_Items">Writing an Item Pipeline to store the extracted Items</h3>
<p>If we are just downloading the images to local<br>Add these two lines in setting.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ITEM_PIPELINES = {<span class="string">'scrapy.contrib.pipeline.images.ImagesPipeline'</span>: <span class="number">1</span>}</div><div class="line"> </div><div class="line">IMAGES_STORE = <span class="string">"img"</span></div></pre></td></tr></table></figure>

<p>Results: all images are stored under name/img/full directory;)</p>
<p>If we need to Write items to a JSON file,  by using the Feed exports.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy crawl dmoz -o items.json</div></pre></td></tr></table></figure>

<p>If backendDB is required:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</div><div class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLStorePipeline</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    self.conn = MySQLdb.connect(user=<span class="string">'user'</span>, <span class="string">'passwd'</span>, <span class="string">'dbname'</span>, <span class="string">'host'</span>, charset=<span class="string">"utf8"</span>, use_unicode=<span class="keyword">True</span>)</div><div class="line">    self.cursor = self.conn.cursor()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span>    </div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        self.cursor.execute(<span class="string">"""INSERT INTO test (des, image_urls)  </span></div><div class="line">                        VALUES (%s, %s)""", </div><div class="line">                       (item[<span class="string">'des'</span>].encode(<span class="string">'utf-8'</span>), </div><div class="line">                        item[<span class="string">'image_urls'</span>].encode(<span class="string">'utf-8'</span>)))</div><div class="line"></div><div class="line">        self.conn.commit()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">except</span> MySQLdb.Error, e:</div><div class="line">        <span class="keyword">print</span> <span class="string">"Error %d: %s"</span> % (e.args[<span class="number">0</span>], e.args[<span class="number">1</span>])</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> item</div></pre></td></tr></table></figure>

<hr>
<p>recently falling for a bit METAL…ヾ(○´▽｀○)ノ </p>
<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fnuclearblastrecords%2Fnightwish-amaranth&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><a href="http://doc.scrapy.org/en/latest/intro/overview.html" target="_blank" rel="external">Scrapy</a> is an application framework for crawling web sites and extracting structured data which can be used for a wide range of useful applications, like data mining, information processing or historical archival.<br>So you need to extract some information from a website, but the website doesn’t provide any API or mechanism to access that info programmatically. Scrapy can help you extract that information.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Crawler" scheme="http://sunbingjie.tk/tags/Crawler/"/>
    
      <category term="学习" scheme="http://sunbingjie.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Niccolo Paganini Selected Works]]></title>
    <link href="http://sunbingjie.tk/2015/05/01/Paganini/"/>
    <id>http://sunbingjie.tk/2015/05/01/Paganini/</id>
    <published>2015-05-01T21:01:59.000Z</published>
    <updated>2015-05-01T21:01:59.000Z</updated>
    <content type="html"><![CDATA[<p>Leonid Kogan - Cantabile, Paganini</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/xsFJS4I_05E" frameborder="0" allowfullscreen></iframe>

<p>Kogan - La Campanella</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/lWaOnqmtr9U" frameborder="0" allowfullscreen></iframe>


<p>Jascha Heifetz - Caprice No. 24</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/vPcnGrie__M" frameborder="0" allowfullscreen></iframe>]]></content>
    <summary type="html">
    <![CDATA[<p>Leonid Kogan - Cantabile, Paganini</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/xsFJS4I_05E" frameborder="0" a]]>
    </summary>
    
      <category term="Classical" scheme="http://sunbingjie.tk/tags/Classical/"/>
    
      <category term="Music" scheme="http://sunbingjie.tk/categories/Music/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Path Sum, Path Sum II, Binary Tree Maximum Path Sum, Minimum Path Sum]]></title>
    <link href="http://sunbingjie.tk/2015/04/18/4.11/"/>
    <id>http://sunbingjie.tk/2015/04/18/4.11/</id>
    <published>2015-04-18T21:57:43.000Z</published>
    <updated>2015-04-18T21:57:43.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Path_Sum">Path Sum</h2>
<blockquote>
<p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.<br>For example:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Given the below binary tree and sum = 22,</div><div class="line">              5</div><div class="line">             / <span class="command">\</span></div><div class="line">            4   8</div><div class="line">           /   / <span class="command">\</span></div><div class="line">          11  13  4</div><div class="line">         /  <span class="command">\ </span>     <span class="command">\</span></div><div class="line">        7    2      1</div></pre></td></tr></table></figure>

<p>return true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22.</p>
<a id="more"></a>
<h3 id="Recursive_Solution">Recursive Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span>(TreeNode root, <span class="keyword">int</span> sum) {</div><div class="line">    <span class="keyword">return</span> dfs(root, sum);</div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span>(TreeNode root, <span class="keyword">int</span> sum){</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    sum = sum-root.val;</div><div class="line">    <span class="keyword">if</span>(root.left==<span class="keyword">null</span> && root.right==<span class="keyword">null</span>) <span class="keyword">return</span> sum==<span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> dfs(root.left, sum) || dfs(root.right, sum);</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Iterative_Solution">Iterative Solution</h3>
<ul>
<li>Use two queues to store all possible sum and curnode pairs</li>
<li>when reached a leave, check if the corresponding sum is true</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span>(TreeNode root, <span class="keyword">int</span> sum) {</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    LinkedList&lt;TreeNode&gt; node = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">    LinkedList&lt;Integer&gt; value = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">    node.offer(root);</div><div class="line">    value.offer(root.val);</div><div class="line">    <span class="keyword">while</span>(!node.isEmpty()){</div><div class="line">        TreeNode cur = node.poll();</div><div class="line">        <span class="keyword">int</span> cursum = value.poll();</div><div class="line">        <span class="keyword">if</span>(cur.left==<span class="keyword">null</span> && cur.right==<span class="keyword">null</span> && cursum==sum){</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>) {</div><div class="line">            node.offer(cur.left);</div><div class="line">            value.offer(cursum+cur.left.val);</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>){</div><div class="line">            node.offer(cur.right);</div><div class="line">            value.offer(cursum+cur.right.val);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;   </div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Path_Sum_II">Path Sum II</h2>
<blockquote>
<p>Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given sum.<br>For example:<br>Given the below binary tree and sum = 22,</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">              5</div><div class="line">             / <span class="command">\</span></div><div class="line">            4   8</div><div class="line">           /   / <span class="command">\</span></div><div class="line">          11  13  4</div><div class="line">         /  <span class="command">\ </span>   / <span class="command">\</span></div><div class="line">        7    2  5   1</div><div class="line">return</div><div class="line"><span class="special">[</span></div><div class="line">   <span class="special">[</span>5,4,11,2<span class="special">]</span>,</div><div class="line">   <span class="special">[</span>5,8,4,5<span class="special">]</span></div><div class="line"><span class="special">]</span></div></pre></td></tr></table></figure>

<h3 id="DFS_Solution">DFS Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;LinkedList&lt;Integer&gt;&gt; <span class="title">pathSum</span>(TreeNode root, <span class="keyword">int</span> sum) {</div><div class="line">    ArrayList&lt;LinkedList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;LinkedList&lt;Integer&gt;&gt;();</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">    LinkedList&lt;Integer&gt; pathlist = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">    dfs(root, sum, pathlist, res);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>(TreeNode r, <span class="keyword">int</span> sum, LinkedList&lt;Integer&gt; pathlist, ArrayList&lt;LinkedList&lt;Integer&gt;&gt; res){</div><div class="line">    pathlist.add(r.val);</div><div class="line">    <span class="keyword">int</span> curvalue = sum-r.val;</div><div class="line">    <span class="keyword">if</span>(r.left==<span class="keyword">null</span> && r.right==<span class="keyword">null</span> && curvalue==<span class="number">0</span>) {res.add(<span class="keyword">new</span> LinkedList&lt;Integer&gt;(pathlist));}</div><div class="line">    <span class="keyword">if</span>(r.left!=<span class="keyword">null</span>) dfs(r.left, curvalue, pathlist, res);</div><div class="line">    <span class="keyword">if</span>(r.right!=<span class="keyword">null</span>) dfs(r.right, curvalue, pathlist, res);</div><div class="line">    pathlist.remove(pathlist.size()-<span class="number">1</span>); <span class="comment">//**</span></div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Binary_Tree_Maximum_Path_Sum">Binary Tree Maximum Path Sum</h2>
<blockquote>
<p>Given a binary tree, find the maximum path sum.<br>The path may start and end at any node in the tree.<br>For example:<br>Given the below binary tree,</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">       <span class="number">1</span></div><div class="line">      / \</div><div class="line">     <span class="number">2</span>   <span class="number">3</span></div><div class="line"><span class="keyword">Return</span> <span class="number">6</span>.</div></pre></td></tr></table></figure>

<h3 id="DFS_+_DP_Solution">DFS + DP Solution</h3>
<ul>
<li>Return each time the max single path starting from current r</li>
<li>update maxsofar among single/arc of current r </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPathSum</span>(TreeNode root) {</div><div class="line">    <span class="keyword">int</span>[] maxsofar = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</div><div class="line">    maxsofar[<span class="number">0</span>]= Integer.MIN_VALUE;</div><div class="line">    dfs(root,maxsofar);</div><div class="line">    <span class="keyword">return</span> maxsofar[<span class="number">0</span>];</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span>(TreeNode r, <span class="keyword">int</span>[] maxsofar){</div><div class="line">    <span class="keyword">if</span>(r==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> left = dfs(r.left, maxsofar);</div><div class="line">    <span class="keyword">int</span> right = dfs(r.right, maxsofar);</div><div class="line">    <span class="keyword">int</span> arc = left + right + r.val;</div><div class="line">    <span class="keyword">int</span> single = Math.max(r.val, Math.max(left, right)+r.val);</div><div class="line">    maxsofar[<span class="number">0</span>] = Math.max(maxsofar[<span class="number">0</span>], Math.max(single,arc));</div><div class="line">    <span class="keyword">return</span> single;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Minimum_Path_Sum">Minimum Path Sum</h2>
<blockquote>
<p>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.<br>Note: You can only move either down or right at any point in time.</p>
</blockquote>
<h3 id="DP_Solution">DP Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span>(<span class="keyword">int</span>[][] grid) {</div><div class="line">    <span class="keyword">int</span> rows = grid.length;</div><div class="line">    <span class="keyword">int</span> cols = grid[<span class="number">0</span>].length;</div><div class="line">    <span class="keyword">int</span> sum[][] = <span class="keyword">new</span> <span class="keyword">int</span>[rows][cols];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++){</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++){</div><div class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>&&j==<span class="number">0</span>){</div><div class="line">                sum[i][j] = grid[i][j];</div><div class="line">            }</div><div class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>&&j!=<span class="number">0</span>){</div><div class="line">                sum[i][j] = sum[i][j-<span class="number">1</span>]+grid[i][j];</div><div class="line">            }</div><div class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>&&j==<span class="number">0</span>){</div><div class="line">                sum[i][j] = sum[i-<span class="number">1</span>][j]+grid[i][j];</div><div class="line">            }</div><div class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>&&j!=<span class="number">0</span>){</div><div class="line">                <span class="keyword">int</span> a = sum[i-<span class="number">1</span>][j]+grid[i][j];</div><div class="line">                <span class="keyword">int</span> b = sum[i][j-<span class="number">1</span>]+grid[i][j];</div><div class="line">                sum[i][j] = Math.min(a,b);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> sum[rows-<span class="number">1</span>][cols-<span class="number">1</span>];</div><div class="line">}</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Flanarey%2Flana-del-rey-lucky-ones-demo&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Path_Sum">Path Sum</h2>
<blockquote>
<p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.<br>For example:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Given the below binary tree and sum = 22,</div><div class="line">              5</div><div class="line">             / <span class="command">\</span></div><div class="line">            4   8</div><div class="line">           /   / <span class="command">\</span></div><div class="line">          11  13  4</div><div class="line">         /  <span class="command">\ </span>     <span class="command">\</span></div><div class="line">        7    2      1</div></pre></td></tr></table></figure>

<p>return true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22.</p>
]]>
    
    </summary>
    
      <category term="Tree" scheme="http://sunbingjie.tk/tags/Tree/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="DP" scheme="http://sunbingjie.tk/tags/DP/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Validate Binary Search Tree， Unique Binary Search Trees, Unique Binary Search Trees II, Binary Tree Preorder Traversal,Binary Tree Inorder Traversal ,Binary Tree Postorder Traversal, Binary Tree Zigzag Level Order Traversal, Binary Search Tree Iterator]]></title>
    <link href="http://sunbingjie.tk/2015/04/16/4.10/"/>
    <id>http://sunbingjie.tk/2015/04/16/4.10/</id>
    <published>2015-04-16T05:07:47.000Z</published>
    <updated>2015-04-16T05:07:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Validate_Binary_Search_Tree">Validate Binary Search Tree</h2>
<blockquote>
<p>Given a binary tree, determine if it is a valid binary search tree (BST).<br>Assume a BST is defined as follows:<br>The left subtree of a node contains only nodes with keys less than the node’s key.<br>The right subtree of a node contains only nodes with keys greater than the node’s key.<br>Both the left and right subtrees must also be binary search trees.</p>
</blockquote>
<h3 id="Brute_force_Solution">Brute force Solution</h3>
<p>Inorder traversal, then compare each value…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span>(TreeNode root) {</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    LinkedList&lt;Integer&gt; p = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">    inorder(root, p);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">0</span>;j&lt; p.size() - <span class="number">1</span>;j++) {</div><div class="line">        <span class="keyword">if</span>(p.get(j)&gt;=p.get(j+<span class="number">1</span>))</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorder</span>(TreeNode r, LinkedList&lt;Integer&gt; p){</div><div class="line">    <span class="keyword">if</span>(r==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    inorder(r.left,p);</div><div class="line">    p.add(r.val);</div><div class="line">    inorder(r.right,p);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Or use static variable to store the previous val:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> pre = Integer.MIN_VALUE; </div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span>(TreeNode root) {</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span>(!isValidBST(root.left)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span>(root.val&lt;=pre) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    System.out.println(pre);</div><div class="line">    pre=root.val;</div><div class="line">    <span class="keyword">if</span>(!isValidBST(root.right)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Recursive/MinMax_Solution">Recursive/MinMax Solution</h3>
<p>At each node we must satisty</p>
<ul>
<li>left subtree max value must not exceed cur.val</li>
<li>right subtree min value must not be lower than cur.val</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span>(TreeNode root) {</div><div class="line">    <span class="keyword">return</span> dfs(root, (<span class="keyword">long</span>)Integer.MIN_VALUE-<span class="number">1</span>,(<span class="keyword">long</span>)Integer.MAX_VALUE+<span class="number">1</span>);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span>(TreeNode r,<span class="keyword">long</span> minv, <span class="keyword">long</span> maxv){</div><div class="line">    <span class="keyword">if</span>(r==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span>(r.val&gt;=maxv ||r.val&lt;=minv) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">return</span>  dfs(r.left, minv, r.val) && dfs(r.right, r.val, maxv);</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="Unique_Binary_Search_Trees">Unique Binary Search Trees</h2>
<blockquote>
<p>Given n, how many structurally unique BST’s (binary search trees) that store values 1…n?<br>For example,<br>Given n = 3, there are a total of 5 unique BST’s.</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1         3     3      2      1</div><div class="line"> <span class="command">\ </span>      /     /      / <span class="command">\ </span>     <span class="command">\</span></div><div class="line">  3     2     1      1   3      2</div><div class="line"> /     /       <span class="command">\ </span>                <span class="command">\</span></div><div class="line">2     1         2                 3</div></pre></td></tr></table></figure>

<h3 id="DP_Solution">DP Solution</h3>
<ul>
<li>Define c[i] as the number of unique binary tree possibly generated with [0….i]</li>
<li>A tree with i as its root, left subtree is consist of [1…i-1], right subtree is consist of [i+1…n]</li>
<li>c[0] = 0 ; c[1]=1 ; c[2] = c[0]<em>c[1] //1 as root + c[1]</em>c[0] //0 as root; c[3] = c[0] <em> c[2] //1 as root + c[1] </em> c[1] //2 as root + c[2] * c[0] //3 as root</li>
<li>Ct+1 += Ci*Ct-i(0&lt;= i &lt;= t)</li>
<li>Ct += Ci*t-1-i(0&lt;=i&lt;=t-1, 1&lt;=t&lt;=n)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span>(<span class="keyword">int</span> n) {</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>||n == <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span>[] C = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</div><div class="line">        C[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=n;t++){  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=t-<span class="number">1</span>;i++){  </div><div class="line">            C[t] += C[i]*C[t-<span class="number">1</span>-i];  </div><div class="line">        }  </div><div class="line">    }</div><div class="line">        <span class="keyword">return</span> C[n];</div><div class="line">    }</div></pre></td></tr></table></figure>

<h2 id="Unique_Binary_Search_Trees_II">Unique Binary Search Trees II</h2>
<blockquote>
<p>Given n, generate all structurally unique BST’s (binary search trees) that store values 1…n.<br>For example,<br>Given n = 3, your program should return all 5 unique BST’s shown below.</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1         3     3      2      1</div><div class="line"> <span class="command">\ </span>      /     /      / <span class="command">\ </span>     <span class="command">\</span></div><div class="line">  3     2     1      1   3      2</div><div class="line"> /     /       <span class="command">\ </span>                <span class="command">\</span></div><div class="line">2     1         2                 3</div></pre></td></tr></table></figure>

<h3 id="DFS_Solution"><a href="http://www.cnblogs.com/springfor/p/3884029.html" target="_blank" rel="external">DFS Solution</a></h3>
<p>Similar to I, we pick (1…n) as root, recursivly get all left and right subtrees.<br>We pick one from left subtree and one from right subtree, attach them to current root and return all the possibilities.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;TreeNode&gt; <span class="title">generateTrees</span>(<span class="keyword">int</span> n) {</div><div class="line">    <span class="keyword">return</span> buildTrees(<span class="number">1</span>,n);</div><div class="line">    </div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">public</span> ArrayList&lt;TreeNode&gt; <span class="title">buildTrees</span>(<span class="keyword">int</span> min, <span class="keyword">int</span> max){</div><div class="line">    ArrayList&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">    <span class="keyword">if</span>(min&gt;max){res.add(<span class="keyword">null</span>); <span class="keyword">return</span> res;}</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=min;i&lt;=max;i++){</div><div class="line">        ArrayList&lt;TreeNode&gt; l = buildTrees(min,i-<span class="number">1</span>);</div><div class="line">        ArrayList&lt;TreeNode&gt; r = buildTrees(i+<span class="number">1</span>,max);</div><div class="line">        <span class="keyword">for</span>(TreeNode j: l){</div><div class="line">            <span class="keyword">for</span>(TreeNode k:r){</div><div class="line">                TreeNode root =  <span class="keyword">new</span> TreeNode(i);</div><div class="line">                root.left = j;</div><div class="line">                root.right = k;</div><div class="line">                res.add(root);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Binary_Tree_Preorder_Traversal">Binary Tree Preorder Traversal</h2>
<blockquote>
<p>Given a binary tree, return the preorder traversal of its nodes’ values.<br>For example:<br>Given binary tree {1,#,2,3},</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   <span class="number">1</span></div><div class="line">    \</div><div class="line">     <span class="number">2</span></div><div class="line">    /</div><div class="line">   <span class="number">3</span></div><div class="line"><span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].</div></pre></td></tr></table></figure>

<h3 id="Recursive_Solution">Recursive Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span>(TreeNode root) {</div><div class="line">    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    preorder(root, res);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preorder</span>(TreeNode n, ArrayList&lt;Integer&gt; res){</div><div class="line">    <span class="keyword">if</span>(n==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    res.add(n.val);</div><div class="line">    preorder(n.left,res);</div><div class="line">    preorder(n.right,res);</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Iterative_Solution">Iterative Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span>(TreeNode root) {</div><div class="line">    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    Stack&lt;TreeNode&gt; stk =<span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res; <span class="comment">//别忘了这句...</span></div><div class="line">    stk.push(root);</div><div class="line">    <span class="keyword">while</span>(!stk.isEmpty()){</div><div class="line">        TreeNode tmp = stk.pop();</div><div class="line">        res.add(tmp.val);</div><div class="line">        <span class="keyword">if</span>(tmp.right!=<span class="keyword">null</span>) stk.push(tmp.right);</div><div class="line">        <span class="keyword">if</span>(tmp.left!=<span class="keyword">null</span>) stk.push(tmp.left);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Binary_Tree_Inorder_Traversal">Binary Tree Inorder Traversal</h2>
<blockquote>
<p>Given a binary tree, return the inorder traversal of its nodes’ values.<br>For example:<br>Given binary tree {1,#,2,3},</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   <span class="number">1</span></div><div class="line">    \</div><div class="line">     <span class="number">2</span></div><div class="line">    /</div><div class="line">   <span class="number">3</span></div><div class="line"><span class="keyword">return</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>].</div></pre></td></tr></table></figure>

<h3 id="Iterative_Solution-1">Iterative Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">inorderTraversal</span>(TreeNode root) {</div><div class="line">        ArrayList&lt;Integer&gt; res= <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        Stack&lt;TreeNode&gt; stk=<span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">        stk.push(root);</div><div class="line">        <span class="keyword">while</span>(!stk.isEmpty()){</div><div class="line">            TreeNode tmp = stk.pop();</div><div class="line">            <span class="keyword">if</span>(tmp == <span class="keyword">null</span>){</div><div class="line">                res.add(stk.pop().val);</div><div class="line">            }</div><div class="line">            <span class="keyword">else</span>{</div><div class="line">                <span class="keyword">if</span>(tmp.right!=<span class="keyword">null</span>){stk.push(tmp.right);}</div><div class="line">                stk.push(tmp);</div><div class="line">                stk.push(<span class="keyword">null</span>);</div><div class="line">                <span class="keyword">if</span>(tmp.left!=<span class="keyword">null</span>){stk.push(tmp.left);}</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> res;</div></pre></td></tr></table></figure>

<hr>
<h2 id="Binary_Tree_Postorder_Traversal">Binary Tree Postorder Traversal</h2>
<blockquote>
<p>Given a binary tree, return the postorder traversal of its nodes’ values.<br>For example:<br>Given binary tree {1,#,2,3},</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   <span class="number">1</span></div><div class="line">    \</div><div class="line">     <span class="number">2</span></div><div class="line">    /</div><div class="line">   <span class="number">3</span></div><div class="line"><span class="keyword">return</span> [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>].</div></pre></td></tr></table></figure>

<h3 id="Recursive_Solution-1">Recursive Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span>(TreeNode root) {</div><div class="line">    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    postorder(root, res);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postorder</span>(TreeNode n, ArrayList&lt;Integer&gt; res){</div><div class="line">    <span class="keyword">if</span>(n==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    postorder(n.left,res);</div><div class="line">    postorder(n.right,res);</div><div class="line">    res.add(n.val);</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Iterative_Solution-1">Iterative Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span>(TreeNode root) {</div><div class="line">    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    Stack&lt;TreeNode&gt; stk =<span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res; </div><div class="line">    stk.push(root);</div><div class="line">    <span class="keyword">while</span>(!stk.isEmpty()){</div><div class="line">        TreeNode tmp = stk.pop();</div><div class="line">        <span class="keyword">if</span>(tmp==<span class="keyword">null</span>) res.add(stk.pop().val);</div><div class="line">        <span class="keyword">else</span>{</div><div class="line">            stk.push(tmp);</div><div class="line">            stk.push(<span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span>(tmp.right!=<span class="keyword">null</span>) stk.push(tmp.right);</div><div class="line">            <span class="keyword">if</span>(tmp.left!=<span class="keyword">null</span>) stk.push(tmp.left);</div><div class="line">        }</div><div class="line">    }        </div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Binary_Tree_Zigzag_Level_Order_Traversal">Binary Tree Zigzag Level Order Traversal</h2>
<blockquote>
<p>Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).<br>For example:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Given binary tree {<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="comment">#,#,15,7},</span></div><div class="line">    <span class="number">3</span></div><div class="line">   / \</div><div class="line">  <span class="number">9</span>  <span class="number">20</span></div><div class="line">    /  \</div><div class="line">   <span class="number">15</span>   <span class="number">7</span></div><div class="line"><span class="command">return</span> <span class="keyword">its</span> zigzag level order traversal <span class="keyword">as</span>:</div><div class="line">[</div><div class="line">  [<span class="number">3</span>],</div><div class="line">  [<span class="number">20</span>,<span class="number">9</span>],</div><div class="line">  [<span class="number">15</span>,<span class="number">7</span>]</div><div class="line">]</div></pre></td></tr></table></figure>

<h3 id="Recursive_Solution-1">Recursive Solution</h3>
<ul>
<li>Simple DFS, check height%2 each level</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;List&lt;Integer&gt;&gt; <span class="title">zigzagLevelOrder</span>(TreeNode root) {</div><div class="line"> ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList();</div><div class="line"> <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line"> dfs(root, res, <span class="number">0</span>);</div><div class="line"> <span class="keyword">return</span> res;</div><div class="line"> }</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>(TreeNode r, ArrayList&lt;List&lt;Integer&gt;&gt; res, <span class="keyword">int</span> h){</div><div class="line">    <span class="keyword">if</span>(r==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(h&gt;res.size()-<span class="number">1</span>){</div><div class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(h%<span class="number">2</span>==<span class="number">1</span>){</div><div class="line">        res.get(h).add(<span class="number">0</span>,r.val);</div><div class="line">    }  </div><div class="line">    <span class="keyword">else</span>{</div><div class="line">        res.get(h).add(r.val);</div><div class="line">    }</div><div class="line">    dfs(r.left, res, h+<span class="number">1</span>);</div><div class="line">    dfs(r.right,res,h+<span class="number">1</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Iterative_Solution-1">Iterative Solution</h3>
<ul>
<li>a queue to store nodes in BFS order</li>
<li>a boolean value to decide insert order in each level list</li>
<li>each new level, set poopsite direction, clear list and add to result</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;List&lt;Integer&gt;&gt; <span class="title">zigzagLevelOrder</span>(TreeNode root) {</div><div class="line">  ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList();</div><div class="line">  <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">  Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">  List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">  q.offer(root);</div><div class="line">  <span class="keyword">int</span> size = q.size();</div><div class="line">  <span class="keyword">boolean</span> l2r = <span class="keyword">true</span>;</div><div class="line">  <span class="keyword">while</span>(!q.isEmpty()){</div><div class="line">      TreeNode cur = q.poll();</div><div class="line">      size--;</div><div class="line">      <span class="keyword">if</span>(l2r){</div><div class="line">         tmp.add(cur.val);</div><div class="line">         }</div><div class="line">      <span class="keyword">else</span>{</div><div class="line">         tmp.add(<span class="number">0</span>,cur.val);</div><div class="line">      }</div><div class="line">      <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>) q.offer(cur.left);</div><div class="line">      <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>) q.offer(cur.right);</div><div class="line">      <span class="keyword">if</span>(size==<span class="number">0</span>){</div><div class="line">          res.add(<span class="keyword">new</span> ArrayList(tmp));</div><div class="line">          l2r=!l2r;</div><div class="line">          tmp.clear();</div><div class="line">          size = q.size();</div><div class="line">      }</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">  }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Binary_Search_Tree_Iterator">Binary Search Tree Iterator</h2>
<blockquote>
<p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.<br>Calling next() will return the next smallest number in the BST.<br>Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.</p>
</blockquote>
<h3 id="Solution">Solution</h3>
<ul>
<li>Use one Array to store the inorder traversal of nodes </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">ArrayDeque&lt;TreeNode&gt; arr;</div><div class="line"><span class="keyword">public</span> <span class="title">BSTIterator</span>(TreeNode root) {</div><div class="line">    arr = <span class="keyword">new</span> ArrayDeque&lt;TreeNode&gt;();</div><div class="line">    inorder(root, arr);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorder</span>(TreeNode root, ArrayDeque&lt;TreeNode&gt; arr){</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    inorder(root.left, arr);</div><div class="line">    arr.add(root);</div><div class="line">    inorder(root.right,arr);</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="javadoc">/**<span class="javadoctag"> @return</span> whether we have a next smallest number */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span>() {</div><div class="line">    <span class="keyword">return</span> !arr.isEmpty();</div><div class="line">}</div><div class="line"></div><div class="line"><span class="javadoc">/**<span class="javadoctag"> @return</span> the next smallest number */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span>() {</div><div class="line">    <span class="keyword">if</span>(hasNext()) <span class="keyword">return</span> arr.poll().val;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="O(1)_Time_O(h)_Memory_Solution">O(1) Time O(h) Memory Solution</h3>
<ul>
<li>Dissect inorder into two parts</li>
<li>push root’s all left children into stack</li>
<li>upon calling next(), pop one node and push all right child’s left child into stack </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Stack&lt;TreeNode&gt; stk;</div><div class="line"><span class="keyword">public</span> <span class="title">BSTIterator</span>(TreeNode root) {</div><div class="line">    stk = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">    <span class="keyword">while</span>(root!=<span class="keyword">null</span>){</div><div class="line">        stk.push(root);</div><div class="line">        root=root.left;</div><div class="line">    }</div><div class="line">   </div><div class="line">}</div><div class="line"><span class="javadoc">/**<span class="javadoctag"> @return</span> whether we have a next smallest number */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span>() {</div><div class="line">    <span class="keyword">return</span> !stk.isEmpty();</div><div class="line">}</div><div class="line"><span class="javadoc">/**<span class="javadoctag"> @return</span> the next smallest number */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span>() {</div><div class="line">    <span class="keyword">if</span>(!stk.isEmpty())</div><div class="line">        {TreeNode tmp = stk.pop();</div><div class="line">         <span class="keyword">int</span> res=tmp.val;</div><div class="line">         <span class="keyword">if</span>(tmp.right!=<span class="keyword">null</span>){</div><div class="line">             TreeNode node = tmp.right;</div><div class="line">             <span class="keyword">while</span>(node!=<span class="keyword">null</span>){</div><div class="line">                 stk.push(node);</div><div class="line">                 node=node.left;</div><div class="line">             }</div><div class="line">         }</div><div class="line">         <span class="keyword">return</span> res;</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<iframe width="560" height="315" src="https://www.youtube.com/embed/MYSVMgRr6pw" frameborder="0" allowfullscreen></iframe>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Validate_Binary_Search_Tree">Validate Binary Search Tree</h2>
<blockquote>
<p>Given a binary tree, determine if it is a valid binary]]>
    </summary>
    
      <category term="Tree" scheme="http://sunbingjie.tk/tags/Tree/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="Stack" scheme="http://sunbingjie.tk/tags/Stack/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Number of Islands]]></title>
    <link href="http://sunbingjie.tk/2015/04/12/4.6/"/>
    <id>http://sunbingjie.tk/2015/04/12/4.6/</id>
    <published>2015-04-12T06:23:51.000Z</published>
    <updated>2015-04-12T06:23:51.000Z</updated>
    <content type="html"><![CDATA[<p>Update—Leetcode now includes this problem:</p>
<h2 id="Number_of_Islands">Number of Islands</h2>
<blockquote>
<p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.<br>Example 1:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">11110</span></div><div class="line"><span class="number">11010</span></div><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">00000</span></div><div class="line"><span class="label">Answer:</span> <span class="number">1</span></div></pre></td></tr></table></figure>

<p>Example 2:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">00100</span></div><div class="line"><span class="number">00011</span></div><div class="line"><span class="label">Answer:</span> <span class="number">3</span></div></pre></td></tr></table></figure>

<h2 id="Solution">Solution</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span>(<span class="keyword">char</span>[][] grid) {</div><div class="line">    <span class="keyword">if</span>(grid.length==<span class="number">0</span> || grid==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;grid.length; i++){</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;grid[<span class="number">0</span>].length;j++){</div><div class="line">            <span class="keyword">if</span>(grid[i][j]==<span class="string">'1'</span>){</div><div class="line">                count++;</div><div class="line">                dfs(grid, i, j);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j){</div><div class="line">    <span class="keyword">if</span>(i&lt;grid.length && i&gt;=<span class="number">0</span> & j&lt;grid[<span class="number">0</span>].length && j&gt;=<span class="number">0</span> && grid[i][j]==<span class="string">'1'</span>){</div><div class="line">        grid[i][j]=<span class="string">'0'</span>;</div><div class="line">        dfs(grid, i-<span class="number">1</span>,j);</div><div class="line">        dfs(grid, i+<span class="number">1</span>,j);</div><div class="line">        dfs(grid, i,j-<span class="number">1</span>);</div><div class="line">        dfs(grid, i,j+<span class="number">1</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="CountIslands/Floodfill">CountIslands/Floodfill</h2>
<blockquote>
<p>给定matrix，只有0和1，求1的连通size，连通只算上下左右，不算对角线</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0 1 0 0 1 </div><div class="line">1 1 1 0 0</div><div class="line">1 0 0 0 1</div><div class="line">0 0 0 0 1</div></pre></td></tr></table></figure>

<p>Return 5， 1， 2</p>
<h3 id="Solution-1">Solution</h3>
<p>For each 1 in the matrix, recursivly search for the four neighbors, terminate if 0/boundary found.</p>
<ul>
<li>Mark each node visited to avoid duplicated counting.</li>
</ul>
<pre><code><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">countIslands</span>(<span class="keyword">int</span>[][] mat){
    <span class="keyword">int</span> one,count;
    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();
    <span class="keyword">int</span>[][] mark = <span class="keyword">new</span> <span class="keyword">int</span>[mat.length][mat[<span class="number">0</span>].length];

    <span class="keyword">if</span>(mat == <span class="keyword">null</span> || mat.length == <span class="number">0</span>) <span class="keyword">return</span> res;

    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mat.length; i++){
        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;mat[<span class="number">0</span>].length; j++){

            <span class="keyword">if</span>(mark[i][j]!=<span class="number">1</span> &amp;&amp; mat[i][j]==<span class="number">1</span>){
                res.add(dfs(i,j, mat, mark));
            }
        }
    }
    <span class="keyword">return</span> res;
}

<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span>(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span>[][] mat, <span class="keyword">int</span>[][] mark){
    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;mat.length-<span class="number">1</span> || j&gt;mat[<span class="number">0</span>].length-<span class="number">1</span> || mat[i][j]==<span class="number">0</span> || mark[i][j]==<span class="number">1</span>)
        <span class="keyword">return</span> <span class="number">0</span>;
    mark[i][j] = <span class="number">1</span>;
    <span class="keyword">return</span> <span class="number">1</span>+dfs(i-<span class="number">1</span>,j,mat,mark)+dfs(i+<span class="number">1</span>,j,mat,mark)+dfs(i,j-<span class="number">1</span>,mat,mark)+dfs(i,j+<span class="number">1</span>,mat,mark);
}

<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
    <span class="keyword">int</span>[][] test = {{<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>} ,{<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>}, {<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>}, {<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>}};
    countIslands c = <span class="keyword">new</span> countIslands();
    System.<span class="keyword">out</span>.println(c.countIslands(test));
}
</code></pre><iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fdanielasings%2Fgnarls-barkley-crazy-cover-by%3Fin%3Dcici-42%2Fsets%2Fsuits&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<p>Update—Leetcode now includes this problem:</p>
<h2 id="Number_of_Islands">Number of Islands</h2>
<blockquote>
<p>Given a 2d grid map of ‘]]>
    </summary>
    
      <category term="DFS" scheme="http://sunbingjie.tk/tags/DFS/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
</feed>
