<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Cici's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="sunbingjie.tk/"/>
  <updated>2015-02-26T03:41:36.285Z</updated>
  <id>sunbingjie.tk/</id>
  
  <author>
    <name><![CDATA[Cici Sun]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Roman to Integer, Integer to Roman, ZigZag Conversion]]></title>
    <link href="sunbingjie.tk/2015/02/25/2.5/"/>
    <id>sunbingjie.tk/2015/02/25/2.5/</id>
    <published>2015-02-26T03:40:54.000Z</published>
    <updated>2015-02-26T03:40:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Roman_to_Integer">Roman to Integer</h2>
<blockquote>
<p>Given a roman numeral, convert it to an integer.<br>Input is guaranteed to be within the range from 1 to 3999.</p>
</blockquote>
<h3 id="Solution">Solution</h3>
<p>How roman numbers work:</p>
<p>M | D | C | L | X | V | I |</p>
<p>1000 | 500 | 100 | 50 | 10 | 5 | 1 |</p>
<p>If the current character is larger than previous one, then we substract previous form current, otherwise add up all digits.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span>(String s) {</div><div class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n=s.length(),res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt; n;i++){</div><div class="line">    </div><div class="line">            <span class="keyword">switch</span>(s.charAt(i)){</div><div class="line">            </div><div class="line">                <span class="keyword">case</span> <span class="string">'I'</span>: </div><div class="line">                    <span class="keyword">if</span>(i&lt;n-<span class="number">1</span> && s.charAt(i+<span class="number">1</span>)!=<span class="string">'I'</span>){res-=<span class="number">1</span>;<span class="keyword">break</span>;}</div><div class="line">                    <span class="keyword">else</span>{res+=<span class="number">1</span>; <span class="keyword">break</span>;}</div><div class="line">                </div><div class="line">                <span class="keyword">case</span> <span class="string">'V'</span>: </div><div class="line">                    <span class="keyword">if</span>(i&lt;n-<span class="number">1</span> && s.charAt(i+<span class="number">1</span>)!=<span class="string">'I'</span>){res-=<span class="number">5</span>;<span class="keyword">break</span>;}</div><div class="line">                    <span class="keyword">else</span> {res+=<span class="number">5</span>; <span class="keyword">break</span>;}</div><div class="line">                <span class="keyword">case</span> <span class="string">'X'</span>: </div><div class="line">                    <span class="keyword">if</span>(i&lt;n-<span class="number">1</span> && (s.charAt(i+<span class="number">1</span>)==<span class="string">'L'</span>||s.charAt(i+<span class="number">1</span>)==<span class="string">'C'</span>||s.charAt(i+<span class="number">1</span>)==<span class="string">'D'</span>||s.charAt(i+<span class="number">1</span>)==<span class="string">'M'</span>)){res-=<span class="number">10</span>;<span class="keyword">break</span>;}</div><div class="line">                    <span class="keyword">else</span> {res+=<span class="number">10</span>; <span class="keyword">break</span>;}</div><div class="line">                <span class="keyword">case</span> <span class="string">'L'</span>: </div><div class="line">                    <span class="keyword">if</span>(i&lt;n-<span class="number">1</span> && (s.charAt(i+<span class="number">1</span>)==<span class="string">'C'</span>||s.charAt(i+<span class="number">1</span>)==<span class="string">'D'</span>||s.charAt(i+<span class="number">1</span>)==<span class="string">'M'</span>)){res-=<span class="number">50</span>;<span class="keyword">break</span>;}</div><div class="line">                    <span class="keyword">else</span> {res+=<span class="number">50</span>; <span class="keyword">break</span>;}</div><div class="line">                <span class="keyword">case</span> <span class="string">'C'</span>: </div><div class="line">                    <span class="keyword">if</span>(i&lt;n-<span class="number">1</span> && (s.charAt(i+<span class="number">1</span>)==<span class="string">'D'</span>||s.charAt(i+<span class="number">1</span>)==<span class="string">'M'</span>)){res-=<span class="number">100</span>; <span class="keyword">break</span>;}</div><div class="line">                    <span class="keyword">else</span> {res+=<span class="number">100</span>;<span class="keyword">break</span>;}</div><div class="line">                <span class="keyword">case</span> <span class="string">'D'</span>: </div><div class="line">                    <span class="keyword">if</span>(i&lt;n-<span class="number">1</span> && s.charAt(i+<span class="number">1</span>)==<span class="string">'M'</span>) {res-=<span class="number">500</span>; <span class="keyword">break</span>;}</div><div class="line">                    <span class="keyword">else</span> {res+=<span class="number">500</span>; <span class="keyword">break</span>;}</div><div class="line">                <span class="keyword">case</span> <span class="string">'M'</span>: res+=<span class="number">1000</span>; <span class="keyword">break</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Integer_to_Roman">Integer to Roman</h2>
<blockquote>
<p>Given an integer, convert it to a roman numeral.<br>Input is guaranteed to be within the range from 1 to 3999.</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> String <span class="title">intToRoman</span>(<span class="keyword">int</span> num) {</div><div class="line">     <span class="keyword">int</span>[] numbers={<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>};</div><div class="line">     String[] tokens={<span class="string">"M"</span>,<span class="string">"CM"</span>,<span class="string">"D"</span>,<span class="string">"CD"</span>,<span class="string">"C"</span>,<span class="string">"XC"</span>,<span class="string">"L"</span>,<span class="string">"XL"</span>,<span class="string">"X"</span>,<span class="string">"IX"</span>,<span class="string">"V"</span>,<span class="string">"IV"</span>,<span class="string">"I"</span>};</div><div class="line">     StringBuilder sb=<span class="keyword">new</span> StringBuilder();</div><div class="line">     <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">     <span class="keyword">while</span>(num&gt;<span class="number">0</span>){</div><div class="line">         <span class="keyword">int</span> tmp=num/numbers[i];</div><div class="line">         num=num-tmp*numbers[i];</div><div class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> k=tmp;k&gt;=<span class="number">1</span>;k--){</div><div class="line">             sb.append(tokens[i]);</div><div class="line">         }</div><div class="line">         i++;</div><div class="line">     }</div><div class="line">     <span class="keyword">return</span> sb.toString();</div><div class="line"> }</div></pre></td></tr></table></figure>

<hr>
<h2 id="ZigZag_Conversion">ZigZag Conversion</h2>
<blockquote>
<p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">P   A   H   <span class="keyword">N</span></div><div class="line">A P L S <span class="keyword">I</span> <span class="keyword">I</span> G</div><div class="line">Y   <span class="keyword">I</span>   R</div></pre></td></tr></table></figure>

<p>And then read line by line: “PAHNAPLSIIGYIR”<br>Write the code that will take a string and make this conversion given a number of rows:<br>string convert(string text, int nRows);<br>convert(“PAYPALISHIRING”, 3) should return “PAHNAPLSIIGYIR”.</p>
<h3 id="Solution-2">Solution</h3>
<p>Each group of words are 2*nRows-2, we add the String row by row. Be careful about first and last row:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String <span class="title">convert</span>(String s, <span class="keyword">int</span> nRows) {</div><div class="line">        <span class="keyword">int</span> nCol=<span class="number">0</span>,size=<span class="number">2</span>*nRows-<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span> || nRows==<span class="number">1</span>) <span class="keyword">return</span> s; </div><div class="line">        StringBuilder res=<span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="comment">//add char to stringbuilder row by row</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nRows;i++){</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;s.length();j+=size){</div><div class="line">                res.append(s.charAt(j));</div><div class="line">                <span class="keyword">if</span>(i!=<span class="number">0</span> && i!=nRows-<span class="number">1</span> && j+size-<span class="number">2</span>*i&lt;s.length())</div><div class="line">                res.append(s.charAt(j+size-<span class="number">2</span>*i));</div><div class="line">            }    </div><div class="line">        }</div><div class="line">         <span class="keyword">return</span> res.toString();</div><div class="line">    }</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fbrightlights333%2Fhow-you-love-me-feat-bright&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>


]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Roman_to_Integer">Roman to Integer</h2>
<blockquote>
<p>Given a roman numeral, convert it to an integer.<br>Input is guaranteed to b]]>
    </summary>
    
      <category term="String" scheme="sunbingjie.tk/tags/String/"/>
    
      <category term="Math" scheme="sunbingjie.tk/tags/Math/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Majority Element, Gray Code]]></title>
    <link href="sunbingjie.tk/2015/02/25/2.3/"/>
    <id>sunbingjie.tk/2015/02/25/2.3/</id>
    <published>2015-02-26T03:40:49.000Z</published>
    <updated>2015-02-26T03:40:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Majority_Element">Majority Element</h2>
<blockquote>
<p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.<br>You may assume that the array is non-empty and the majority element always exist in the array.</p>
</blockquote>
<h3 id="Two_pass_solution">Two pass solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span>(<span class="keyword">int</span>[] num) {</div><div class="line">    <span class="keyword">int</span> n=num.length;</div><div class="line">    HashMap&lt;Integer, Integer&gt; map=<span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++){</div><div class="line">        <span class="keyword">if</span>(!map.containsKey(num[i])) map.put(num[i], <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> map.put(num[i], map.get(num[i])+<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(map.get(num[i])&gt;=(n/<span class="number">2</span>)+<span class="number">1</span>) <span class="keyword">return</span> num[i];</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Moore_voting_algorithm">Moore voting algorithm</h3>
<p>Basic idea of the algorithm is if we cancel out each occurrence of an element e with all the other elements that are different from e then e will exist till end if it is a majority element. This takes O(n) time.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span>(<span class="keyword">int</span>[] num) {</div><div class="line">    <span class="keyword">int</span> n=num.length, count=<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> tmp=num[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++){</div><div class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>) {tmp=num[i];count++;}</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num[i]==tmp) count++;</div><div class="line">        <span class="keyword">else</span> count--;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> tmp;     </div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Gray_Code">Gray Code</h2>
<blockquote>
<p>The gray code is a binary numeral system where two successive values differ in only one bit.<br>Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.<br>For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">00 - 0</div><div class="line">01 - 1</div><div class="line">11 - 3</div><div class="line">10 - 2</div></pre></td></tr></table></figure>

<p>Note:<br>For a given n, a gray code sequence is not uniquely defined.<br>For example, [0,2,3,1] is also a valid gray code sequence according to the above definition.<br>For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.</p>
<h3 id="Recursive_solution">Recursive solution</h3>
<p>For 3 bit case: [0,1,3,2,6,7,5,4], we found that the first four numbers in case n=3 are the same as the the numbers in case n=2. Besides, [6,7,5,4] = [2+4,3+4,1+4,0+4].</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">grayCode</span>(<span class="keyword">int</span> n) {</div><div class="line">    List&lt;Integer&gt; ret = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) {</div><div class="line">        ret.add(<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    }</div><div class="line">    </div><div class="line">    ret = grayCode(n - <span class="number">1</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ret.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</div><div class="line">        <span class="keyword">int</span> num = ret.get(i);</div><div class="line">        num += <span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>);</div><div class="line">        ret.add(num);</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Iterative_Solution">Iterative Solution</h3>
<p>Use the above mentioned mirror image property:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">grayCode</span>(<span class="keyword">int</span> n) {</div><div class="line">  ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) {</div><div class="line">    result.add(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  }</div><div class="line">  ;</div><div class="line">  result.add(<span class="number">0</span>);</div><div class="line">  result.add(<span class="number">1</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) {</div><div class="line">    ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(result);</div><div class="line">    Integer a = <span class="number">1</span> &lt;&lt; i;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = result.size() - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) {</div><div class="line">      tmp.add(result.get(k) + a);</div><div class="line">    }</div><div class="line">    result = tmp;</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">}</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fprotocolrecordings%2Ftritonal-paris-blohm-ft&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>



]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Majority_Element">Majority Element</h2>
<blockquote>
<p>Given an array of size n, find the majority element. The majority element is]]>
    </summary>
    
      <category term="Bit Manipulation" scheme="sunbingjie.tk/tags/Bit-Manipulation/"/>
    
      <category term="Array" scheme="sunbingjie.tk/tags/Array/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reverse Integer, Reverse Linked List I, Reverse Linked List II, Reverse Nodes in k-Group, Rotate List]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.9/"/>
    <id>sunbingjie.tk/2015/02/25/1.9/</id>
    <published>2015-02-26T03:40:34.000Z</published>
    <updated>2015-02-26T03:40:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Reverse_Integer">Reverse Integer</h2>
<blockquote>
<p>Reverse digits of an integer.<br>Example1: x = 123, return 321<br>Example2: x = -123, return -321<br>Have you thought about this?<br>Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!<br>If the integer’s last digit is 0, what should the output be? ie, cases such as 10, 100.<br>Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?<br>For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.<br>Update (2014-11-10):<br>Test cases had been added to test the overflow behavior.</p>
</blockquote>
<h3 id="First_Solution:">First Solution:</h3>
<p>First I thought of converting int to string then use two pointer to reverse the number, but we need to pay attention to the two sepcial cases mentioned above. I will update that solution after I solved ‘reverse string’ problem.<br>The following solution uses only one parameter x, we get each digit by computing x%10 and add it to result, then we multiply result with 10 each round. This method deal with first special case of last digit 0 itself, but didn’t pass OJ because of overflows.  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span>(<span class="keyword">int</span> x) {</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>){</div><div class="line">            res=x%<span class="number">10</span>+res*<span class="number">10</span>;</div><div class="line">            x=x/<span class="number">10</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    }</div></pre></td></tr></table></figure>

<h3 id="Correct_Solution:">Correct Solution:</h3>
<p>After running a few tests, I figured the overflow probelm occurs when we try to add to Integer.MAX_VALUE(2^32-1), or subtract from Integer.MIN_VALUE(-2^32), this would cause number jump from minus to positive and therefore wrong output.<br>So first we record the sign of the number, and use ABS(x) to compute the ABS of reversed int, during which we check if the new res&gt;Integer.MAX_VALUE,moving res to one side is a really clever trick. At last, output the right sign of result. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span>(<span class="keyword">int</span> x) {</div><div class="line">       <span class="keyword">int</span> res=<span class="number">0</span>,num=Math.abs(x);</div><div class="line">       <span class="keyword">boolean</span> sign=x&gt;<span class="number">0</span>? <span class="keyword">true</span>:<span class="keyword">false</span>;</div><div class="line">       <span class="keyword">while</span>(num!=<span class="number">0</span>){</div><div class="line">       <span class="comment">//check if res&gt;Integer.MAX_VALUE</span></div><div class="line">        <span class="keyword">if</span>(res&gt;(Integer.MAX_VALUE-num%<span class="number">10</span>)/<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">           res=num%<span class="number">10</span>+res*<span class="number">10</span>;</div><div class="line">           num=num/<span class="number">10</span>;</div><div class="line">       } </div><div class="line">       <span class="keyword">return</span> sign? res:-res;</div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Reverse_Linked_List_II">Reverse Linked List II</h2>
<blockquote>
<p>Reverse a linked list from position m to n. Do it in-place and in one-pass.<br>For example:<br>Given 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2 and n = 4,<br>return 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL.<br>Note:<br>Given m, n satisfy the following condition:<br>1 ≤ m ≤ n ≤ length of list.</p>
</blockquote>
<h3 id="Reverse_a_Singly_LinkedList">Reverse a Singly LinkedList</h3>
<p>First I thought of solving this problem: reverse 1-&gt;2-&gt;3 to 3-&gt;2-&gt;1.</p>
<p>Naive solution is to use a stack and reconstruct the list:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverse</span>(ListNode head) {</div><div class="line">  Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;ListNode&gt;();</div><div class="line">  <span class="keyword">while</span> (head != <span class="keyword">null</span>) {</div><div class="line">    stack.add(head);</div><div class="line">    head = head.next;</div><div class="line">  }</div><div class="line">  ListNode current = stack.pop();</div><div class="line">  head = current;</div><div class="line">  <span class="keyword">while</span> (!stack.empty()) {</div><div class="line">    ListNode next = stack.pop();</div><div class="line">    current.next=next;</div><div class="line">    current = next;</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> head;  </div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Better_solution:">Better solution:</h3>
<li>We need to update each node.next</li>

<li>Before that, we need to record the original node.next to continue</li>

<li>Use two pointers, pre to the previous element, and post to the next element</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">reverse</span>(ListNode head){</div><div class="line">  ListNode pre=<span class="keyword">null</span>,post=<span class="keyword">null</span>,cur=head;</div><div class="line">  <span class="keyword">while</span>(cur!=<span class="keyword">null</span>){</div><div class="line">    post=cur.next;</div><div class="line">    cur.next=pre;</div><div class="line">    pre=cur;</div><div class="line">    cur=post;</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> pre;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><a href="http://blog.csdn.net/beiyetengqing/article/details/7596554" target="_blank" rel="external">Iterative Method</a> are even more efficent, but harder to understand…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">reverse</span>(ListNode head){</div><div class="line">  ListNode cur=head;</div><div class="line">  <span class="keyword">if</span>(cur==<span class="keyword">null</span>||cur.next==<span class="keyword">null</span>)</div><div class="line">    <span class="keyword">return</span> cur;</div><div class="line">  ListNode post=cur.next;</div><div class="line">  cur.next=<span class="keyword">null</span>;</div><div class="line">  <span class="comment">//rest is the last element, the new head</span></div><div class="line">  ListNode rest=reverse(post);</div><div class="line">  <span class="comment">//update node.next</span></div><div class="line">  post.next=cur;</div><div class="line">  <span class="keyword">return</span> rest;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Correct_Solution:-1">Correct Solution:</h3>
<p>Different from reverse a Singly LinkedList, we now only need to reverse a part of it (m to n). We use the following pointers:</p>
<li>preM: the last node before m</li>

<li>pre: the last node among the part already reversed. Dont’t need to be udpated, as it always points to the same node</li>

<li>cur: the node we want to add after PreM, in other words, the first node among the part already reversed. Need to be set to pre.next</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  <span class="keyword">public</span> ListNode <span class="title">reverseBetween</span>(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n){</div><div class="line">  ListNode pre=<span class="keyword">null</span>,post=<span class="keyword">null</span>;</div><div class="line">  ListNode dummy=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">  dummy.next=head;</div><div class="line">  ListNode preM=dummy,cur=<span class="keyword">null</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;=n;i++){</div><div class="line">    <span class="keyword">if</span>(i&lt;m)</div><div class="line">      preM=preM.next;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i==m){</div><div class="line">      pre=preM.next;</div><div class="line">      cur=pre.next;</div><div class="line">    }</div><div class="line">    <span class="keyword">else</span>{</div><div class="line">      pre.next=cur.next;</div><div class="line">      <span class="comment">//made a mistake here by cur.next=pre; </span></div><div class="line">      cur.next=preM.next;</div><div class="line">      preM.next=cur;</div><div class="line">      cur=pre.next;</div><div class="line">    }</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> dummy.next;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Reverse_Nodes_in_k-Group">Reverse Nodes in k-Group</h2>
<blockquote>
<p>Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.<br>If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.<br>You may not alter the values in the nodes, only nodes itself may be changed.<br>Only constant memory is allowed.<br>For example,<br>Given this linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5<br>For k = 2, you should return: 2-&gt;1-&gt;4-&gt;3-&gt;5<br>For k = 3, you should return: 3-&gt;2-&gt;1-&gt;4-&gt;5</p>
</blockquote>
<h3 id="Iterative_Solution:">Iterative Solution:</h3>
<p>We use the sub-process of reverse(ListNode start,ListNode end), while we scan through the list, keep three pointers:</p>
<li>pref: breakpoint for different groups.</li>

<li>start: first node of current group. Initialized as node 1</li>

<li>end: last node of current group</li>

<p>Each round we:</p>
<li>move pref to position, set start and end pointer</li>

<li>reverse current group, link last node to the rest</li>

<li>link pref to the returned head, and repeat</li>

<p>This is One Pass O(n) solution.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span>(ListNode head, <span class="keyword">int</span> k) {</div><div class="line">  ListNode dummy=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">  dummy.next=head;</div><div class="line">  ListNode pref=dummy, start, end;</div><div class="line">  <span class="keyword">while</span>(pref!=<span class="keyword">null</span>){</div><div class="line">    start=pref.next;</div><div class="line">    end=pref;</div><div class="line">    <span class="comment">//move end pointer K times, pointing to kth node</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++){</div><div class="line">      end=end.next;</div><div class="line">      <span class="comment">//last nodes not enough for a group</span></div><div class="line">      <span class="keyword">if</span>(end==<span class="keyword">null</span>) <span class="keyword">return</span> dummy.next;</div><div class="line">    }</div><div class="line">    <span class="comment">//link pref with head of reversed group</span></div><div class="line">    pref.next=reverse(start,end);</div><div class="line">    <span class="comment">//move pref pointer K times, pointing to the node before next group</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++){pref=pref.next;}</div><div class="line">  } <span class="keyword">return</span> dummy.next;</div><div class="line">}</div><div class="line"><span class="keyword">public</span> ListNode <span class="title">reverse</span>(ListNode start,ListNode end){</div><div class="line">  ListNode post=end.next,tmp;</div><div class="line">  ListNode pre=start,cur=start.next;</div><div class="line">  <span class="comment">//inside this group</span></div><div class="line">  <span class="keyword">while</span>(cur!=post){</div><div class="line">     tmp=cur.next;</div><div class="line">     cur.next=pre;</div><div class="line">     pre=cur;</div><div class="line">     cur=tmp;</div><div class="line">  }</div><div class="line">  <span class="comment">//don't forget to link end of reversed group with the rest nodes</span></div><div class="line">  start.next=post;</div><div class="line">  <span class="keyword">return</span> pre;</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="Two_Pass_Solution:">Two Pass Solution:</h2>
<p>I first thought of this solution, but wasn’t careful enough with the details…</p>
<li>First scan through the list and get the number of groups</li>

<li>For each group i smaller than num, use an inner loop to do the following:</li>

<li>reverse each group, keep curhead and curtail as inner group pointers, move cur to first node outside of group</li>

<li>if is the first group, we update head and let tail=curtail, in other rounds we just attach curhead to tail.</li>

<li>At last, don’t forget to attach the leftover nodes curtail.next=cur</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span>(ListNode head,<span class="keyword">int</span> k){</div><div class="line">  <span class="keyword">if</span>(k==<span class="number">0</span>||k==<span class="number">1</span>) <span class="keyword">return</span> head;</div><div class="line">  ListNode count=head;</div><div class="line">  <span class="keyword">int</span> n=<span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(count!=<span class="keyword">null</span>){count=count.next;n++;}</div><div class="line">  <span class="keyword">int</span> num=n/k;</div><div class="line">  <span class="keyword">if</span>(num==<span class="number">0</span>) <span class="keyword">return</span> head;</div><div class="line">  ListNode curtail=<span class="keyword">null</span>, curhead=<span class="keyword">null</span>, tail=<span class="keyword">null</span>, pre=<span class="keyword">null</span>, cur,tmp=<span class="keyword">null</span>;</div><div class="line">  cur=head;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++){</div><div class="line">    pre=<span class="keyword">null</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++){</div><div class="line">      <span class="keyword">if</span>(cur!=<span class="keyword">null</span>){</div><div class="line">        tmp=cur.next;</div><div class="line">        cur.next=pre;</div><div class="line">        pre=cur;</div><div class="line">      }</div><div class="line">      <span class="keyword">if</span>(j==<span class="number">0</span>) curtail=cur;</div><div class="line">      <span class="keyword">if</span>(j==(k-<span class="number">1</span>)) curhead=cur;</div><div class="line">      cur=tmp;</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(tail==<span class="keyword">null</span>) head=curhead;</div><div class="line">    <span class="keyword">else</span> tail.next=curhead;</div><div class="line">    tail=curtail;</div><div class="line">  }</div><div class="line">  curtail.next=cur;</div><div class="line">  <span class="keyword">return</span> head;</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="Rotate_List">Rotate List</h2>
<blockquote>
<p>Given a list, rotate the list to the right by k places, where k is non-negative.<br>For example:<br>Given 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL and k = 2,<br>return 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL.</p>
</blockquote>
<h3 id="Naive_Solution">Naive Solution</h3>
<p>First count the length of list, link the last node with head to form a loop. Now cur is pointing to the last node, we use a for loop to move it to (n-k)th node, and break the loop there. At last, return (n-k).next as new head.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> ListNode <span class="title">rotateRight</span>(ListNode head, <span class="keyword">int</span> n) {</div><div class="line">     <span class="keyword">int</span> k=<span class="number">1</span>;</div><div class="line">     ListNode cur=head;</div><div class="line">     <span class="keyword">if</span>(cur==<span class="keyword">null</span>||cur.next==<span class="keyword">null</span>||n==<span class="number">0</span>) <span class="keyword">return</span> head;</div><div class="line">     <span class="keyword">while</span>(cur.next!=<span class="keyword">null</span>){cur=cur.next;k++;}</div><div class="line">     cur.next=head;</div><div class="line">     <span class="comment">//set n to the position of new head in the original list</span></div><div class="line">     n=n%k;</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k-n;i++){</div><div class="line">         cur=cur.next;</div><div class="line">     }</div><div class="line">     head=cur.next;</div><div class="line">     cur.next=<span class="keyword">null</span>;</div><div class="line">     <span class="keyword">return</span> head;</div><div class="line"> }</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fprinzegeorge%2Fvictor-1&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>


]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Reverse_Integer">Reverse Integer</h2>
<blockquote>
<p>Reverse digits of an integer.<br>Example1: x = 123, return 321<br>Example2: x ]]>
    </summary>
    
      <category term="LinkedList" scheme="sunbingjie.tk/tags/LinkedList/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2Sum, 3Sum, 3Sum Closest]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.7/"/>
    <id>sunbingjie.tk/2015/02/25/1.7/</id>
    <published>2015-02-26T03:40:31.000Z</published>
    <updated>2015-02-26T03:40:31.000Z</updated>
    <content type="html"><![CDATA[<h2 id="2Sum">2Sum</h2>
<blockquote>
<p>Given an array of integers, find two numbers such that they add up to a specific target number.<br>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.<br>You may assume that each input would have exactly one solution.<br>Input: numbers={2, 7, 11, 15}, target=9<br>Output: index1=1, index2=2</p>
</blockquote>
<h3 id="Solution">Solution</h3>
<p>Two Pointer Solution:<br>First copy numbers[] into old[] and sort old[]. Then we use two pointers to scan for the target sum. At last, we recover the indexes of these two elements in the unsorted array. This takes O(nlogn) time.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">twoSum</span>(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) {</div><div class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">int</span>[] old = <span class="keyword">new</span> <span class="keyword">int</span>[numbers.length];</div><div class="line">        System.arraycopy(numbers, <span class="number">0</span>, old, <span class="number">0</span>, numbers.length);  </div><div class="line">        Arrays.sort(old);  </div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> j=numbers.length-<span class="number">1</span>;</div><div class="line">        <span class="comment">//use i, j to scan the whole array</span></div><div class="line">        <span class="keyword">while</span>(i&lt;j)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(old[i]+old[j]&gt;target)</div><div class="line">                {j--;</div><div class="line">            <span class="keyword">continue</span>;}</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(old[i]+old[j]&lt;target)</div><div class="line">                {</div><div class="line">                i++;    </div><div class="line">            <span class="keyword">continue</span>;}</div><div class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> n1=old[i];</div><div class="line">        <span class="keyword">int</span> n2=old[j];</div><div class="line">        <span class="keyword">int</span> a = -<span class="number">1</span>,b=-<span class="number">1</span>;</div><div class="line">        <span class="comment">//recover indexes of the original array</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ii=<span class="number">0</span>; ii&lt;numbers.length;ii++){</div><div class="line">            <span class="keyword">if</span>(numbers[ii]==n1 || numbers[ii]==n2){</div><div class="line">                <span class="keyword">if</span>(a==-<span class="number">1</span>){a=ii+<span class="number">1</span>;}</div><div class="line">                <span class="keyword">else</span> b=ii+<span class="number">1</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        result[<span class="number">0</span>]=a;</div><div class="line">        result[<span class="number">1</span>]=b;</div><div class="line">        Arrays.sort(result);</div><div class="line">        <span class="keyword">return</span> result;    </div><div class="line">    }</div></pre></td></tr></table></figure>

<h3 id="HashTable_Solution:">HashTable Solution:</h3>
<p>During one pass, we put element and index (as key, value) into the map, meanwhile we search for target-num[i] in our map. If found, get the two indexes. This takes O(n) time.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">twoSum</span>(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) {  </div><div class="line">    </div><div class="line">       HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;(); </div><div class="line">       </div><div class="line">       <span class="keyword">int</span> n = numbers.length;  </div><div class="line">       <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];  </div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++)  </div><div class="line">       {  </div><div class="line">           <span class="keyword">if</span> (map.containsKey(target - numbers[i]))  </div><div class="line">           {  </div><div class="line">               result[<span class="number">0</span>] = map.get(target-numbers[i]) + <span class="number">1</span>;  </div><div class="line">               result[<span class="number">1</span>] = i + <span class="number">1</span>;  </div><div class="line">               <span class="keyword">break</span>;  </div><div class="line">           }  </div><div class="line">           <span class="keyword">else</span>  </div><div class="line">           {  </div><div class="line">               map.put(numbers[i], i);  </div><div class="line">           }  </div><div class="line">       }  </div><div class="line">       <span class="keyword">return</span> result;  </div><div class="line">         </div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="3Sum">3Sum</h2>
<blockquote>
<p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.<br>Note:<br>Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)<br>The solution set must not contain duplicate triplets.<br>For example, given array S = {-1 0 1 2 -1 -4},<br>A solution set is:<br>(-1, 0, 1)<br>(-1, -1, 2)</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<p>Brute force method.<br>Use three loops, for each i,j,k indexes check if 3 sum equals to 0. In order to avoid duplicate sets, we make the following obeservations:</p>
<li>The first element must be non-positive</li>

<li>Given the first element, the first two element must sum to non-positive</li>

<p>Note: the Solution doesn’t handle duplicates, and O(N^3) exceeded limited time.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title">threeSum</span>(<span class="keyword">int</span>[] num) {</div><div class="line">Arrays.sort(num);</div><div class="line">ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res= <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">ArrayList&lt;Integer&gt; each=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.length;i++){</div><div class="line">   <span class="keyword">if</span>(num[i]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;num.length;j++){</div><div class="line">       <span class="keyword">if</span>(num[i]+num[j]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;num.length;k++){</div><div class="line">           <span class="keyword">if</span>(num[i]+num[j]+num[k]==<span class="number">0</span>){</div><div class="line">               each.add(num[i]);</div><div class="line">               each.add(num[j]);</div><div class="line">               each.add(num[k]);</div><div class="line">               res.add(each);</div><div class="line">               each.clear();                </div><div class="line">           }</div><div class="line">       }</div><div class="line">   }</div><div class="line">}</div><div class="line">   <span class="keyword">return</span> res;</div><div class="line">   </div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Better_Solution:">Better Solution:</h3>
<p>Similar to how we used 2 pointers in 2Sum, we now use three pointers to solve 3Sum. For removing duplicate sets, we first sort input.</p>
<li>For the first element, we only run checking process for the first of duplicate elements.</li>

<li>We use two pointers to check for cases such that num[i]+num[l]+num[r]==0. If found, move both pointers closer (don’t forget to skip duplicates), if not found, move only one pointer.</li>

<p>Overall runtime is O(N^2) and we can guarantee no duplicate sets.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title">threeSum</span>(<span class="keyword">int</span>[] num) {</div><div class="line">    Arrays.sort(num);</div><div class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res= <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.length-<span class="number">2</span>;i++){</div><div class="line">       <span class="keyword">if</span>(num[i]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">       <span class="comment">//skip the duplicated first element</span></div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">0</span> && num[i]==num[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</div><div class="line">       l=i+<span class="number">1</span>;</div><div class="line">       r=num.length-<span class="number">1</span>;</div><div class="line">       <span class="comment">//use left and right pointer to scan the rest </span></div><div class="line">       <span class="keyword">while</span>(l&lt;r){</div><div class="line">           <span class="keyword">if</span>(num[i]+num[l]+num[r]==<span class="number">0</span>){</div><div class="line">               ArrayList&lt;Integer&gt; tmp=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">                    tmp.add(num[i]);</div><div class="line">                    tmp.add(num[l]);</div><div class="line">                    tmp.add(num[r]);</div><div class="line">                    res.add(tmp);</div><div class="line">                    l++;</div><div class="line">                    r--;</div><div class="line">                    <span class="comment">//skip duplicates</span></div><div class="line">                    <span class="keyword">while</span>(l&lt;r && num[l]==num[l-<span class="number">1</span>]) l++;</div><div class="line">                    <span class="keyword">while</span>(l&lt;r && num[r]==num[r+<span class="number">1</span>]) r--;</div><div class="line">           }</div><div class="line">           <span class="comment">//scan the rest starting with num[i]</span></div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(num[i]+num[l]+num[r]&lt;<span class="number">0</span>) l++;</div><div class="line">           <span class="keyword">else</span> r--;</div><div class="line">           </div><div class="line">       }</div><div class="line"> </div><div class="line">       </div><div class="line">        </div><div class="line">    }</div><div class="line">     <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="3Sum_Closest">3Sum Closest</h2>
<blockquote>
<p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.<br>For example, given array S = {-1 2 1 -4}, and target = 1.<br>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p>
</blockquote>
<p>Similar to 3Sum, first sort the array and then we use three pointers to scan for the closest sum:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span>(<span class="keyword">int</span>[] num, <span class="keyword">int</span> target) {</div><div class="line">     <span class="keyword">int</span> cls=Integer.MAX_VALUE,res=Integer.MAX_VALUE;</div><div class="line">     <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</div><div class="line">     <span class="keyword">int</span>[] newnum = <span class="keyword">new</span> <span class="keyword">int</span>[num.length];</div><div class="line">     System.arraycopy(num, <span class="number">0</span>, newnum, <span class="number">0</span>, num.length);  </div><div class="line">     Arrays.sort(newnum); </div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.length;i++){</div><div class="line">         l=i+<span class="number">1</span>; r=num.length-<span class="number">1</span>;</div><div class="line">         <span class="keyword">while</span>(l&lt;r){</div><div class="line">             <span class="keyword">int</span> sum=newnum[i]+newnum[l]+newnum[r];</div><div class="line">             <span class="keyword">int</span> diff=Math.abs(target-sum);</div><div class="line">             <span class="comment">//if match found, immediately return sum</span></div><div class="line">             <span class="keyword">if</span>(diff==<span class="number">0</span>) <span class="keyword">return</span> sum;</div><div class="line">             <span class="comment">//check if current cls is min, update sum</span></div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (diff&lt;cls){</div><div class="line">                 cls=diff;             </div><div class="line">                 res=sum;</div><div class="line">                 }</div><div class="line">             <span class="comment">//move pointers accordingly</span></div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span>(sum-target&lt;=<span class="number">0</span>) l++;</div><div class="line">             </div><div class="line">             <span class="keyword">else</span> {r--;}</div><div class="line">         }</div><div class="line">     }</div><div class="line">     </div><div class="line">     <span class="keyword">return</span> res;</div><div class="line">     </div><div class="line"> }</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fzydii%2Flilly-wood-the-prick-and-robin-schulz-prayer-in-c-robin-schulz-remix-official&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="2Sum">2Sum</h2>
<blockquote>
<p>Given an array of integers, find two numbers such that they add up to a specific target number.<br>T]]>
    </summary>
    
      <category term="HashMap" scheme="sunbingjie.tk/tags/HashMap/"/>
    
      <category term="Array" scheme="sunbingjie.tk/tags/Array/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Substring with Concatenation of All Words, Longest Substring Without Repeating Characters, Minimum Window Substring, Longest Palindromic Substring]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.6/"/>
    <id>sunbingjie.tk/2015/02/25/1.6/</id>
    <published>2015-02-26T03:40:27.000Z</published>
    <updated>2015-02-26T03:40:27.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Substring_with_Concatenation_of_All_Words">Substring with Concatenation of All Words</h2>
<blockquote>
<p>You are given a string, S, and a list of words, L, that are all of the same length. Find all starting indices of substring(s) in S that is a concatenation of each word in L exactly once and without any intervening characters.<br>For example, given:<br>S: “barfoothefoobarman”<br>L: [“foo”, “bar”]<br>You should return the indices: [0,9].<br>(order does not matter).</p>
</blockquote>
<h3 id="Brute_Force_Solution">Brute Force Solution</h3>
<p>Two Hashmaps</p>
<li>rest: store all words in L, including times of appreance</li>

<li>found: renew at each round, store matched words, including times of appreance</li>

<p>Two pointers</p>
<li>i: starting index of current substring</li>

<li>j: numebers of words matched to current substring</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">findSubstring</span>(String S, String[] L) {</div><div class="line">     ArrayList&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">     HashMap&lt;String, Integer&gt; rest=<span class="keyword">new</span>  HashMap&lt;String, Integer&gt;();</div><div class="line">     HashMap&lt;String, Integer&gt; found=<span class="keyword">new</span>  HashMap&lt;String, Integer&gt;();</div><div class="line">     <span class="keyword">if</span>(S==<span class="keyword">null</span>||L.length==<span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">     <span class="keyword">int</span> wordlen=L[<span class="number">0</span>].length(), Llen=L.length, Slen=S.length();</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;L.length;i++){</div><div class="line">         <span class="keyword">int</span> num=<span class="number">1</span>;</div><div class="line">         <span class="keyword">if</span>(rest.get(L[i])!=<span class="keyword">null</span>) </div><div class="line">             num+=rest.get(L[i]);</div><div class="line">         rest.put(L[i], num);</div><div class="line">     }</div><div class="line">    </div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Slen-Llen*wordlen+<span class="number">1</span>;i++){</div><div class="line">         <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">         found.clear();</div><div class="line">         <span class="keyword">for</span>(;j&lt;Llen;j++){</div><div class="line">             <span class="keyword">int</span> start=i+j*wordlen;</div><div class="line">             <span class="keyword">int</span> end=start+wordlen;</div><div class="line">             <span class="keyword">int</span> num=<span class="number">1</span>;</div><div class="line">             String tmp=S.substring(start, end);</div><div class="line">             <span class="keyword">if</span>(!rest.containsKey(tmp)) <span class="keyword">break</span>;</div><div class="line">             <span class="keyword">if</span>(found.get(tmp)!=<span class="keyword">null</span>) num+=found.get(tmp);</div><div class="line">             <span class="keyword">if</span>(num&gt;rest.get(tmp)) <span class="keyword">break</span>;</div><div class="line">             found.put(tmp, num);</div><div class="line">         }</div><div class="line">         <span class="keyword">if</span>(j==Llen) res.add(i);</div><div class="line">     }</div><div class="line">     <span class="keyword">return</span> res;   </div><div class="line"> }</div></pre></td></tr></table></figure>

<p><a href="http://www.cnblogs.com/springfor/p/3872516.html" target="_blank" rel="external">Minimun Window Solution</a></p>
<li>outer loop: i increment wordlen times, each time scan through S</li>

<li>inner loop: j increment wordlen per time, until first letter of last word</li>

<li>each outerloop: reset count=0, reset index=i</li>

<li>each innerloop: curdict to store current window</li>

<p>If tmp str not found in dict, increment index, reset count and curdict<br>If found, add to curdict, count++<br>before count++: compare num, if exceeded, increment index ,then decrement count and curdict<br>If count equals listlen add index into result, increment index, update curdict</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">findSubstring</span>(String S, String[] L) { </div><div class="line">  ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">  <span class="keyword">if</span>(S==<span class="keyword">null</span>||L==<span class="keyword">null</span>||S.length()==<span class="number">0</span>||L.length==<span class="number">0</span>)</div><div class="line">     <span class="keyword">return</span> res;</div><div class="line">  <span class="keyword">int</span> wordLen = L[<span class="number">0</span>].length();<span class="comment">//same length for each word in dictionary</span></div><div class="line">  </div><div class="line">  <span class="comment">//put given dictionary into hashmap with each word's count</span></div><div class="line">  HashMap&lt;String, Integer&gt; dict = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line">  <span class="keyword">for</span>(String word: L){</div><div class="line">      <span class="keyword">if</span>(!dict.containsKey(word))</div><div class="line">         dict.put(word, <span class="number">1</span>);</div><div class="line">      <span class="keyword">else</span></div><div class="line">         dict.put(word, dict.get(word) + <span class="number">1</span>);</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordLen; i++){</div><div class="line">      <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">      <span class="keyword">int</span> index = i;<span class="comment">//index of each startpoint</span></div><div class="line">      HashMap&lt;String, Integer&gt; curdict = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line">      <span class="comment">//till the first letter of last word </span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= S.length() - wordLen; j += wordLen){</div><div class="line">          String curWord = S.substring(j, j + wordLen);</div><div class="line">          <span class="comment">//check each word to tell if it existes in give dictionary</span></div><div class="line">          <span class="keyword">if</span>(!dict.containsKey(curWord)){</div><div class="line">              curdict.clear();</div><div class="line">              count = <span class="number">0</span>;</div><div class="line">              index = j + wordLen;</div><div class="line">          }<span class="keyword">else</span>{</div><div class="line">              <span class="comment">//form current dictionary</span></div><div class="line">              <span class="keyword">if</span>(!curdict.containsKey(curWord))</div><div class="line">                 curdict.put(curWord, <span class="number">1</span>);</div><div class="line">              <span class="keyword">else</span></div><div class="line">                 curdict.put(curWord, curdict.get(curWord) + <span class="number">1</span>);</div><div class="line">              </div><div class="line">              <span class="comment">//count for current found word and check if it exceed given word count</span></div><div class="line">              <span class="keyword">if</span>(curdict.get(curWord) &lt;= dict.get(curWord)){</div><div class="line">                  count++;</div><div class="line">              }<span class="keyword">else</span>{</div><div class="line">                <span class="keyword">while</span>(curdict.get(curWord) &gt; dict.get(curWord)){</div><div class="line">                     String temp = S.substring(index, index + wordLen);</div><div class="line">                     curdict.put(temp, curdict.get(temp)-<span class="number">1</span>);</div><div class="line">                     index = index + wordLen;<span class="comment">//make index move next</span></div><div class="line">                     <span class="keyword">if</span>(curdict.get(temp)&lt;dict.get(temp))</div><div class="line">                     count--;</div><div class="line">                 }</div><div class="line">              }</div><div class="line">              </div><div class="line">              <span class="comment">//put into res and move index point to nextword </span></div><div class="line">              <span class="comment">//and update current dictionary as well as count num</span></div><div class="line">              <span class="keyword">if</span>(count == L.length){</div><div class="line">                  res.add(index);</div><div class="line">                  String temp = S.substring(index, index + wordLen);</div><div class="line">                  curdict.put(temp, curdict.get(temp)-<span class="number">1</span>);</div><div class="line">                  index = index + wordLen;</div><div class="line">                  count--;</div><div class="line">              }</div><div class="line">          }</div><div class="line">      }<span class="comment">//end for j</span></div><div class="line">  }<span class="comment">//end for i</span></div><div class="line">   <span class="keyword">return</span> res;</div><div class="line"> }</div></pre></td></tr></table></figure>

<h2 id="Longest_Substring_Without_Repeating_Characters">Longest Substring Without Repeating Characters</h2>
<blockquote>
<p>Given a string, find the length of the longest substring without repeating characters. For example, the longest substring without repeating letters for “abcabcbb” is “abc”, which the length is 3. For “bbbbb” the longest substring is “b”, with the length of 1.</p>
</blockquote>
<h3 id="Brute_force_method">Brute force method</h3>
<p>Find all substrings and check if each of it contains only unique characters. As for the maxlength, we use Greedy Algorithm to only keep the longest substring seen so far. There are one inner loop and each check takes linear time, O(N^2) time won’t pass the OJ.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span>(String s) {</div><div class="line"><span class="keyword">if</span>(s==<span class="keyword">null</span>||s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> maxlen=<span class="number">1</span>;</div><div class="line">Hashtable &lt;Character, Boolean&gt; map=<span class="keyword">new</span> Hashtable&lt;Character, Boolean&gt;();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; s.length();i++){</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;s.length();j++){</div><div class="line">        <span class="keyword">if</span>(map.containsKey(s.charAt(j))){map.clear(); <span class="keyword">break</span>;}</div><div class="line">        <span class="keyword">else</span>{map.put(s.charAt(j), <span class="keyword">false</span>);}</div><div class="line">        <span class="keyword">int</span> len=map.size();</div><div class="line">        <span class="keyword">if</span>(len&gt;maxlen){maxlen=len;}</div><div class="line">    }</div><div class="line">}</div><div class="line">    <span class="keyword">return</span> maxlen;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><a href="http://www.geeksforgeeks.org/length-of-the-longest-substring-without-repeating-characters/" target="_blank" rel="external">Better Solution</a><br>Use a Hashmap/Hashset recording current substring and two pointers to record current positions.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span>(String s) {</div><div class="line">    <span class="keyword">if</span>(s==<span class="keyword">null</span>||s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> maxlen=<span class="number">1</span>,l=<span class="number">0</span>,r=<span class="number">0</span>;</div><div class="line">        Hashtable &lt;Character, Boolean&gt; map=<span class="keyword">new</span> Hashtable&lt;Character, Boolean&gt;();</div><div class="line">        <span class="keyword">while</span>(r&lt;s.length()){</div><div class="line">            <span class="keyword">char</span> tmp=s.charAt(r);</div><div class="line">            <span class="keyword">if</span>(!map.containsKey(tmp)||map.get(tmp)==<span class="keyword">false</span>){</div><div class="line">                map.put(tmp, <span class="keyword">true</span>);</div><div class="line">                maxlen=Math.max((r-l+<span class="number">1</span>), maxlen);</div><div class="line">            }</div><div class="line">            <span class="keyword">else</span>{</div><div class="line">                <span class="keyword">while</span>(s.charAt(l)!=s.charAt(r)){map.put(s.charAt(l), <span class="keyword">false</span>);l++;}</div><div class="line">                l++;</div><div class="line">            }</div><div class="line">            r++;</div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> maxlen;</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="Minimum_Window_Substring">Minimum Window Substring</h2>
<blockquote>
<p>Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).<br>For example,<br>S = “ADOBECODEBANC”<br>T = “ABC”<br>Minimum window is “BANC”.<br>Note:<br>If there is no such window in S that covers all characters in T, return the emtpy string “”.<br>If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.</p>
</blockquote>
<h3 id="Min_Sliding_Window_Solution"><a href="http://blog.csdn.net/linhuanmars/article/details/20343903" target="_blank" rel="external">Min Sliding Window Solution</a></h3>
<li>Use a Hashmap to record each character, numbers in T</li>

<li>Two pointers:</li><br>left: increment when current substring contains all chars in T, pass unrelevant chars and exceeded chars<br>right: increment each loop, if found a match in T decrement its Hashmap value<br><br><li>Minlen: when we found a new substring update minlength</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String <span class="title">minWindow</span>(String S, String T) {</div><div class="line">    HashMap&lt;Character,Integer&gt; dict=<span class="keyword">new</span> HashMap&lt;Character,Integer&gt;();</div><div class="line">    <span class="keyword">int</span> tlen=T.length(), slen=S.length(),minlen=slen+<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tlen;i++){</div><div class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(dict.containsKey(T.charAt(i))) num+=dict.get(T.charAt(i));</div><div class="line">        dict.put(T.charAt(i),num);</div><div class="line">    }</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>,left=<span class="number">0</span>,start=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;slen;i++){</div><div class="line">        <span class="keyword">if</span>(dict.containsKey(S.charAt(i))){</div><div class="line">            dict.put(S.charAt(i),dict.get(S.charAt(i))-<span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(dict.get(S.charAt(i))&gt;=<span class="number">0</span>) count++;</div><div class="line">            <span class="keyword">if</span>(count==tlen){</div><div class="line">                <span class="keyword">while</span>(count==tlen){</div><div class="line">                    <span class="keyword">if</span>(i-left+<span class="number">1</span>&lt;minlen){minlen=i-left+<span class="number">1</span>; start=left; }</div><div class="line">                    <span class="keyword">if</span>(dict.containsKey(S.charAt(left))) {</div><div class="line">                         dict.put(S.charAt(left),dict.get(S.charAt(left))+<span class="number">1</span>);</div><div class="line">                         <span class="keyword">if</span>(dict.get(S.charAt(left))&gt;<span class="number">0</span>) count--;</div><div class="line">                    }</div><div class="line">                    left++;</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    </div><div class="line">     <span class="keyword">return</span> minlen&gt;slen? <span class="string">""</span>:S.substring(start,start+minlen);</div><div class="line">    </div><div class="line">}</div></pre></td></tr></table></figure>

<p>Another version using <a href="http://www.lifeincode.net/programming/leetcode-minimum-window-substring-java/" target="_blank" rel="external">two hashmaps</a>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String <span class="title">minWindow</span>(String S, String T) {</div><div class="line">    HashMap&lt;Character, Integer&gt; dict = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T.length(); i++) {</div><div class="line">        <span class="keyword">char</span> c = T.charAt(i);</div><div class="line">        <span class="keyword">if</span> (!dict.containsKey(c))</div><div class="line">            dict.put(c, <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            dict.put(c, dict.get(c) + <span class="number">1</span>);</div><div class="line">    }</div><div class="line">    HashMap&lt;Character, Integer&gt; found = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">int</span> foundCounter = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> end = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> min = Integer.MAX_VALUE;</div><div class="line">    String minWindow = <span class="string">""</span>;</div><div class="line">    <span class="keyword">while</span> (end &lt; S.length()) {</div><div class="line">        <span class="keyword">char</span> c = S.charAt(end);</div><div class="line">        <span class="keyword">if</span> (dict.containsKey(c)) {</div><div class="line">            <span class="keyword">if</span> (found.containsKey(c)) {</div><div class="line">                <span class="keyword">if</span> (found.get(c) &lt; dict.get(c))</div><div class="line">                    foundCounter++;</div><div class="line">                found.put(c, found.get(c) + <span class="number">1</span>);</div><div class="line">            } <span class="keyword">else</span> {</div><div class="line">                found.put(c, <span class="number">1</span>);</div><div class="line">                foundCounter++;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span> (foundCounter == T.length()) {</div><div class="line">            <span class="comment">//When foundCounter equals to T.length(), in other words, found all characters.</span></div><div class="line">            <span class="keyword">char</span> sc = S.charAt(start);</div><div class="line">            <span class="keyword">while</span> (!found.containsKey(sc) || found.get(sc) &gt; dict.get(sc)) {</div><div class="line">                <span class="keyword">if</span> (found.containsKey(sc) && found.get(sc) &gt; dict.get(sc))</div><div class="line">                    found.put(sc, found.get(sc) - <span class="number">1</span>);</div><div class="line">                start++;</div><div class="line">                sc = S.charAt(start);</div><div class="line">            }</div><div class="line">            <span class="keyword">if</span> (end - start + <span class="number">1</span> &lt; min) {</div><div class="line">                minWindow = S.substring(start, end + <span class="number">1</span>);</div><div class="line">                min = end - start + <span class="number">1</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        end++;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> minWindow;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Array_Solution">Array Solution</h3>
<p>To count occurrence of characters, instead of using a hash map, can use an int array of 256<br>Two pointer method with one point to end and one point to start.<br>Pointer advance condition: move end forward till finds one window, then move start forward till the window no longer valid</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> String <span class="title">minWindow</span>(String S, String T) {</div><div class="line">        <span class="keyword">int</span>[] map=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>],found=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">int</span> start=<span class="number">0</span>, count=<span class="number">0</span>,end=<span class="number">0</span>,minlen=S.length()+<span class="number">1</span>,tlen=T.length(),slen=S.length();</div><div class="line">        String min=<span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tlen; i++){</div><div class="line">            map[T.charAt(i)]++;</div><div class="line">        }</div><div class="line">        <span class="keyword">for</span>(;end&lt;slen;end++){</div><div class="line">            <span class="keyword">if</span>(map[S.charAt(end)]&gt;found[S.charAt(end)]) {count++;}</div><div class="line">            found[S.charAt(end)]++;</div><div class="line">            <span class="keyword">if</span>(count==T.length()){</div><div class="line">                <span class="keyword">while</span>(found[S.charAt(start)]&gt;map[S.charAt(start)])</div><div class="line">                {   found[S.charAt(start)]--;</div><div class="line">                    start++;</div><div class="line">                }</div><div class="line">                <span class="keyword">if</span>(end-start+<span class="number">1</span>&lt;minlen) {minlen=end-start+<span class="number">1</span>; min = S.substring(start, end+<span class="number">1</span>);</div><div class="line">}</div><div class="line">                found[S.charAt(start)]--;</div><div class="line">                start++;</div><div class="line">                count--;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> min;</div><div class="line">    }</div></pre></td></tr></table></figure>

<h2 id="Longest_Palindromic_Substring">Longest Palindromic Substring</h2>
<blockquote>
<p>Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.</p>
</blockquote>
<h3 id="Brute_Force_Solution-1">Brute Force Solution</h3>
<p>Find all possible substrings and check if each is palindrome. O(N^3) too LTE…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String <span class="title">longestPalindrome</span>(String s) {</div><div class="line">       <span class="keyword">int</span> maxlen=<span class="number">0</span>; </div><div class="line">       String maxstr=<span class="keyword">null</span>;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++){</div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;s.length();j++){</div><div class="line">               String tmp=s.substring(i,j+<span class="number">1</span>);</div><div class="line">               <span class="keyword">if</span>(IsPalindrome(tmp)&&tmp.length()&gt;maxlen)</div><div class="line">                   {</div><div class="line">                   maxlen=tmp.length();</div><div class="line">                   maxstr=tmp;}</div><div class="line">           }</div><div class="line">       }<span class="keyword">return</span> maxstr;</div><div class="line">   }</div><div class="line"> </div><div class="line"> <span class="keyword">public</span> Boolean <span class="title">IsPalindrome</span>(String s) {</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++){</div><div class="line">       <span class="keyword">if</span>(s.charAt(i)!=s.charAt(s.length()-<span class="number">1</span>-i)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       } <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   }</div></pre></td></tr></table></figure>

<h3 id="DP_Solution">DP Solution</h3>
<p>Time O(n^2) Space O(n^2) but didn’t pass OJ. Why?<br>Three rounds of loops:</p>
<li>set diagonal to 1: t[i][i]=0</li><br><li>set top-right second diagonal: t[i][i+1]=1 if two consecutive character</li><br><li>set whole table [diagonaly]</li><br><li>a. start from substring length 3 to full length</li><br><li>b. inner loop: from 0 to length-len, check substring(i, i+len), set t[i][i+len-1] according to changing rule:</li><br><li>c. If s.charAt(i) == s.charAt(j) then t[i][j] = t[i + 1][j - 1]</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String <span class="title">longestPalindrome2</span>(String s) {</div><div class="line">          <span class="keyword">int</span> maxlen=<span class="number">0</span>; </div><div class="line">          String maxstr=<span class="keyword">null</span>;</div><div class="line">          <span class="keyword">int</span>[][] t=<span class="keyword">new</span> <span class="keyword">int</span>[s.length()][s.length()];</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++){t[i][i]=<span class="number">1</span>;}</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length()-<span class="number">1</span>;i++){</div><div class="line">              <span class="keyword">if</span>(s.charAt(i)==s.charAt(i+<span class="number">1</span>))</div><div class="line">                  {t[i][i+<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">                  maxlen=<span class="number">2</span>;maxstr=s.substring(i,i+<span class="number">2</span>);}</div><div class="line">              <span class="keyword">else</span> t[i][i+<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">              }</div><div class="line">          </div><div class="line">          printTable(t);</div><div class="line">          </div><div class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">3</span>; len &lt;= s.length(); len++) {</div><div class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= s.length()-len; i++) {</div><div class="line">                  <span class="keyword">int</span> j = i + len - <span class="number">1</span>;</div><div class="line">                  <span class="keyword">if</span> (s.charAt(i) == s.charAt(j)) {</div><div class="line">                      t[i][j] = t[i + <span class="number">1</span>][j - <span class="number">1</span>];</div><div class="line">                      <span class="keyword">if</span> (t[i][j] == <span class="number">1</span> && len &gt; maxlen)</div><div class="line">                          maxstr = s.substring(i, j + <span class="number">1</span>);</div><div class="line">                  } </div><div class="line">                  <span class="keyword">else</span> {t[i][j]=<span class="number">0</span>;}</div><div class="line">                  printTable(t);</div><div class="line">              }</div><div class="line">          }</div><div class="line">          </div><div class="line">          <span class="keyword">return</span> maxstr;</div><div class="line">          </div><div class="line">    }</div><div class="line">      </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTable</span>(<span class="keyword">int</span>[][] x){</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> [] y : x){</div><div class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> z: y){</div><div class="line">                  System.out.print(z + <span class="string">" "</span>);</div><div class="line">              }</div><div class="line">              System.out.println();</div><div class="line">          }</div><div class="line">          System.out.println(<span class="string">"------"</span>);</div><div class="line">      }</div></pre></td></tr></table></figure>

<p><a href="http://www.programcreek.com/2013/12/leetcode-solution-of-longest-palindromic-substring-java/" target="_blank" rel="external">Another Algorithm</a></p>
<p>i from 0 to length-1, get palindrom substring with center of i or i, i+1, keep updating the longest substring: Time O(n^2), space O(1)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String <span class="title">longestPalindrome</span>(String s) {       </div><div class="line">          String maxstr = <span class="string">""</span>;</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) {</div><div class="line">              <span class="comment">// get longest palindrome with center of i eg: BAB</span></div><div class="line">              String tmp = helper(s, i, i);</div><div class="line">              <span class="keyword">if</span> (tmp.length() &gt; maxstr.length()) {</div><div class="line">                  maxstr = tmp;</div><div class="line">              }</div><div class="line">       </div><div class="line">              <span class="comment">// get longest palindrome with center of i, i+1 eg: ABBA</span></div><div class="line">              tmp = helper(s, i, i + <span class="number">1</span>);</div><div class="line">              <span class="keyword">if</span> (tmp.length() &gt; maxstr.length()) {</div><div class="line">                  maxstr = tmp;</div><div class="line">              }</div><div class="line">          }</div><div class="line">       </div><div class="line">          <span class="keyword">return</span> maxstr;</div><div class="line">      }</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">helper</span>(String s, <span class="keyword">int</span> begin, <span class="keyword">int</span> end) {</div><div class="line">          <span class="keyword">while</span> (begin &gt;= <span class="number">0</span> && end &lt;= s.length() - <span class="number">1</span> && s.charAt(begin) == s.charAt(end)) {</div><div class="line">              begin--;</div><div class="line">              end++;</div><div class="line">          }</div><div class="line">          <span class="keyword">return</span> s.substring(begin + <span class="number">1</span>, end);</div><div class="line">          }</div></pre></td></tr></table></figure>

<p><a href="http://algs4.cs.princeton.edu/53substring/Manacher.java.html" target="_blank" rel="external">Manacher’s algorithm</a><br>Computes the longest palindromic substring in linear time.</p>
<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Flidogotsongs%2Fbastille-bad-blood-lido-remix-1&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Substring_with_Concatenation_of_All_Words">Substring with Concatenation of All Words</h2>
<blockquote>
<p>You are given a string, S,]]>
    </summary>
    
      <category term="String" scheme="sunbingjie.tk/tags/String/"/>
    
      <category term="DP" scheme="sunbingjie.tk/tags/DP/"/>
    
      <category term="Recursion" scheme="sunbingjie.tk/tags/Recursion/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Remove Duplicates from Sorted List I & II, Remove Duplicates from Sorted Array I & II]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.5/"/>
    <id>sunbingjie.tk/2015/02/25/1.5/</id>
    <published>2015-02-26T03:40:19.000Z</published>
    <updated>2015-02-26T03:40:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Remove_Duplicates_from_Sorted_List_I">Remove Duplicates from Sorted List I</h2>
<blockquote>
<p>Given a sorted linked list, delete all duplicates such that each element appear only once.<br>For example,<br>Given 1-&gt;1-&gt;2, return 1-&gt;2.<br>Given 1-&gt;1-&gt;2-&gt;3-&gt;3, return 1-&gt;2-&gt;3.</p>
</blockquote>
<h3 id="Solution">Solution</h3>
<p>Two loops One pointer solution, only move cursor to next when we confirmed cur.next.val!==cur.val.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span>(ListNode head) {</div><div class="line">    ListNode h = head;</div><div class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;</div><div class="line">    ListNode cur= head;</div><div class="line">    <span class="keyword">while</span>(cur!=<span class="keyword">null</span>){</div><div class="line">        <span class="keyword">while</span>(cur.next!=<span class="keyword">null</span>&&cur.next.val==cur.val)</div><div class="line">        cur.next=cur.next.next;</div><div class="line">        cur=cur.next;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> h;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Or we can use only one loop:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span>(ListNode head) {</div><div class="line">      ListNode h = head;</div><div class="line">      <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;</div><div class="line">      ListNode cur= head;</div><div class="line">      <span class="keyword">while</span>(cur!=<span class="keyword">null</span>){</div><div class="line">          ListNode tmp=cur.next;</div><div class="line">          <span class="keyword">if</span>(tmp!=<span class="keyword">null</span>&&tmp.val==cur.val){</div><div class="line">              cur.next=tmp.next;}</div><div class="line">          <span class="keyword">else</span> cur=cur.next;</div><div class="line">      }</div><div class="line">      <span class="keyword">return</span> h;</div><div class="line">  }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Remove_Duplicates_from_Sorted_List_II">Remove Duplicates from Sorted List II</h2>
<blockquote>
<p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.<br>For example,<br>Given 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5, return 1-&gt;2-&gt;5.<br>Given 1-&gt;1-&gt;1-&gt;2-&gt;3, return 2-&gt;3.</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<p>Similar to how we deleted duplicates in I, now we add a pre pointer to record the last non-duplicate element, and a dummy head to deal with cases where head needs to be removed. Note: we can only move pre to next when we confirmed now cur is pointing to a unique element.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span>(ListNode head) {</div><div class="line">       ListNode dummy=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">       dummy.next=head;</div><div class="line">       ListNode cur=head, pre=dummy;</div><div class="line">       <span class="keyword">while</span>(cur!=<span class="keyword">null</span>&& cur.next!=<span class="keyword">null</span>){</div><div class="line">           <span class="comment">//if dup found, keep cur at last dup element</span></div><div class="line">           <span class="keyword">if</span>(cur.val==cur.next.val){</div><div class="line">           <span class="keyword">while</span>(cur.next!=<span class="keyword">null</span>&&cur.val==cur.next.val){cur=cur.next;}</div><div class="line">           <span class="comment">//remove the dups, remember to move the cur for detecting more dups</span></div><div class="line">           pre.next=cur.next;</div><div class="line">           cur=cur.next;}</div><div class="line">           <span class="comment">//move the two pointers next when no dup found</span></div><div class="line">           <span class="keyword">else</span> {pre=pre.next; cur=cur.next;}     </div><div class="line">       }       </div><div class="line">       <span class="keyword">return</span> dummy.next;</div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Remove_Duplicates_from_Sorted_Array">Remove Duplicates from Sorted Array</h2>
<blockquote>
<p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.<br>Do not allocate extra space for another array, you must do this in place with constant memory.<br>For example,<br>Given input array A = [1,1,2],<br>Your function should return length = 2, and A is now [1,2].</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<p>Just replace current element with the first non-duplicate, in other words, non-equal-to-current element.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span>(<span class="keyword">int</span>[] A) {</div><div class="line">          <span class="keyword">int</span> n=A.length;</div><div class="line">          <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">          <span class="keyword">if</span>(A.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++){</div><div class="line">              <span class="comment">//count points to the last element of our new array, i pointer finds the next non-dup element</span></div><div class="line">              <span class="keyword">if</span>(A[i]!=A[count]){A[++count]=A[i];}</div><div class="line">          }<span class="keyword">return</span> count+<span class="number">1</span>;</div><div class="line">      }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Remove_Duplicates_from_Sorted_Array_II">Remove Duplicates from Sorted Array II</h2>
<blockquote>
<p>Follow up for “Remove Duplicates”:<br>What if duplicates are allowed at most twice?<br>For example,<br>Given sorted array A = [1,1,1,2,2,3],<br>Your function should return length = 5, and A is now [1,1,2,2,3].</p>
</blockquote>
<h3 id="Solution-3">Solution</h3>
<p>The solution is a bit tricky. We use two pointers, pre to keep the second duplicate element, and cur to keep the first element different from current duplicate element. Then we replcace the next element of pre, to whatever next element cur is pointing at.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span>(<span class="keyword">int</span>[] A) {</div><div class="line">       <span class="keyword">int</span> n = A.length;</div><div class="line">       <span class="keyword">int</span> pre=<span class="number">1</span>,cur=<span class="number">2</span>;</div><div class="line">       <span class="keyword">if</span>(n==<span class="number">0</span>||n==<span class="number">1</span>||n==<span class="number">2</span>) <span class="keyword">return</span> n;</div><div class="line">       <span class="keyword">while</span>(cur&lt;n){</div><div class="line">           <span class="comment">//confirm no three dups in new array  </span></div><div class="line">           <span class="keyword">if</span>(A[cur]==A[pre-<span class="number">1</span>]){</div><div class="line">               <span class="comment">//cur points to the first element different from current dups</span></div><div class="line">               cur++;</div><div class="line">           }</div><div class="line">           <span class="keyword">else</span> {</div><div class="line">               <span class="comment">//move pre to the third dup element</span></div><div class="line">               pre++;</div><div class="line">               <span class="comment">//replace the third dup with the next element </span></div><div class="line">               A[pre]=A[cur];</div><div class="line">               cur++;</div><div class="line">           }</div><div class="line">       }</div><div class="line">       <span class="keyword">return</span> pre+<span class="number">1</span>;</div><div class="line">       </div><div class="line">   }</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Flidogotsongs%2Fbastille-bad-blood-lido-remix-1&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Remove_Duplicates_from_Sorted_List_I">Remove Duplicates from Sorted List I</h2>
<blockquote>
<p>Given a sorted linked list, delete a]]>
    </summary>
    
      <category term="LinkedList" scheme="sunbingjie.tk/tags/LinkedList/"/>
    
      <category term="Array" scheme="sunbingjie.tk/tags/Array/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Regular Expression Matching, Edit Distance, Rotate Image, Spiral Matrix]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.27/"/>
    <id>sunbingjie.tk/2015/02/25/1.27/</id>
    <published>2015-02-26T03:39:40.000Z</published>
    <updated>2015-02-26T03:39:40.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Regular_Expression_Matching">Regular Expression Matching</h2>
<blockquote>
<p>Implement regular expression matching with support for ‘.’ and ‘‘.<br>‘.’ Matches any single character.<br>‘‘ Matches zero or more of the preceding element.<br>The matching should cover the entire input string (not partial).<br>The function prototype should be:<br>bool isMatch(const char s, const char p)<br>Some examples:<br>isMatch(“aa”,”a”) → false<br>isMatch(“aa”,”aa”) → true<br>isMatch(“aaa”,”aa”) → false<br>isMatch(“aa”, “a“) → true<br>isMatch(“aa”, “.“) → true<br>isMatch(“ab”, “.“) → true<br>isMatch(“aab”, “ca*b”) → true</p>
</blockquote>
<h3 id="Recursive_solution">Recursive solution</h3>
<p>So hard to think of all the cases….</p>
<p>Base case: p was cut to zero<br>Special Case: p=1, when to return false? (now p!=’‘, this case will be process next<br>Case 1: p.charAt(1) is not ‘‘,<br>Case 2: p.charAt(1) is ‘*’,</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span>(String s, String p){</div><div class="line">  <span class="comment">//base case</span></div><div class="line">  <span class="keyword">if</span>(p.length()==<span class="number">0</span>) <span class="keyword">return</span> s.length()==<span class="number">0</span>;</div><div class="line">  <span class="comment">//p=1 special case</span></div><div class="line">  <span class="keyword">if</span>(p.length()==<span class="number">1</span> || p.charAt(<span class="number">1</span>)!=<span class="string">'*'</span>){</div><div class="line">    <span class="comment">//false case: s len=0; </span></div><div class="line">        <span class="comment">/*if the first char of s and the first char of p is not the same, </span></div><div class="line">        and the char of p is not '.', return false; </div><div class="line">    if(s.length()&lt;1 || p.charAt(0)!=s.charAt(0) && p.charAt(0)!='.')</div><div class="line">      return false;</div><div class="line">    //otherwise, compare the rest of the string of s and p.</div><div class="line">    else return isMatch(s.substring(1),p.substring(1));</div><div class="line">  }</div><div class="line">  //p!=1 and  when the second char of p is '*'</div><div class="line">  else{</div><div class="line">    int i=-1;</div><div class="line">    while(i&lt;s.length() && (i&lt; 0 || p.charAt(0)=='.' || p.charAt(0)==s.charAt(i))){</div><div class="line">      //start from isMatch(s itself, p.substring(2)) stands for 0 preceding element</div><div class="line">      //when the '*' stands for 1 or more preceding element,try every possible number</div><div class="line">      if(isMatch(s.substring(i+1), p.substring(2)))</div><div class="line">        return true;</div><div class="line">      i++;}</div><div class="line">  }</div><div class="line">  return false;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Edit_Distance">Edit Distance</h2>
<blockquote>
<p>Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)<br>You have the following 3 operations permitted on a word:<br>a) Insert a character<br>b) Delete a character<br>c) Replace a character</p>
</blockquote>
<h3 id="Recursive_Solution">Recursive Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span>(String word1, String word2) {</div><div class="line">        <span class="keyword">if</span>(word1.equals(word2)) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(word1==<span class="keyword">null</span> || word1.length()&lt;=<span class="number">0</span>) <span class="keyword">return</span> word2.length();</div><div class="line">        <span class="keyword">if</span>(word2==<span class="keyword">null</span> || word2.length()&lt;=<span class="number">0</span>) <span class="keyword">return</span> word1.length();</div><div class="line">         </div><div class="line">        <span class="keyword">int</span> delete_dis=minDistance(word1.substring(<span class="number">1</span>),word2)+<span class="number">1</span>;  </div><div class="line">        <span class="keyword">int</span> add_dis=minDistance(word1,word2.substring(<span class="number">1</span>))+<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> change_dis=minDistance(word1.substring(<span class="number">1</span>),word2.substring(<span class="number">1</span>)) + word1.charAt(<span class="number">0</span>)==word2.charAt(<span class="number">0</span>) ?  <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> Math.min(Math.min(delete_dis, add_dis), change_dis);</div><div class="line">    </div><div class="line">    }</div></pre></td></tr></table></figure>



<h3 id="DP_Solution">DP Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span>(String word1, String word2) {</div><div class="line">    <span class="keyword">if</span>(word2.length()==<span class="number">0</span>) <span class="keyword">return</span> word1.length();</div><div class="line">    <span class="keyword">if</span>(word1.length()==<span class="number">0</span>) <span class="keyword">return</span> word2.length();</div><div class="line">    <span class="keyword">int</span> m=word1.length()+<span class="number">1</span>, n=word2.length()+<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>[][] Dis=<span class="keyword">new</span> <span class="keyword">int</span>[m][n];</div><div class="line">    <span class="comment">//initiate null cases</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++){Dis[i][<span class="number">0</span>]=i;}</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++){Dis[<span class="number">0</span>][j]=j;}</div><div class="line">    <span class="comment">//fill up whole table</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;m;i++){</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++){</div><div class="line">            <span class="keyword">int</span> del_dis=Dis[i-<span class="number">1</span>][j]+<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> add_dis=Dis[i][j-<span class="number">1</span>]+<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> change_dis=Dis[i-<span class="number">1</span>][j-<span class="number">1</span>]+ (word1.charAt(i-<span class="number">1</span>)==word2.charAt(j-<span class="number">1</span>)? <span class="number">0</span> :<span class="number">1</span>);</div><div class="line">            Dis[i][j]=Math.min(Math.min(del_dis,add_dis),change_dis);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> Dis[m-<span class="number">1</span>][n-<span class="number">1</span>];</div><div class="line">    </div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Rotate_Image">Rotate Image</h2>
<blockquote>
<p>You are given an n x n 2D matrix representing an image.<br>Rotate the image by 90 degrees (clockwise).<br>Follow up:<br>Could you do this in-place?</p>
</blockquote>
<h3 id="Solution">Solution</h3>
<p>swap four directions layer by layer:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span>(<span class="keyword">int</span>[][] matrix) {</div><div class="line">  </div><div class="line">    <span class="keyword">int</span> len = matrix[<span class="number">0</span>].length;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> layer = <span class="number">0</span>; layer &lt; len / <span class="number">2</span>; layer++) {</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = layer; i &lt; len - <span class="number">1</span> - layer; i++) {</div><div class="line">        <span class="comment">// save upper</span></div><div class="line">        <span class="keyword">int</span> temp = matrix[layer][i];</div><div class="line">     </div><div class="line">        <span class="comment">// upper = left</span></div><div class="line">        matrix[layer][i] = matrix[len - <span class="number">1</span> - i][layer];</div><div class="line">        <span class="comment">// left = bottom</span></div><div class="line">   </div><div class="line">        matrix[len - <span class="number">1</span> - i][layer] = matrix[len - <span class="number">1</span> - layer][len - <span class="number">1</span> - i];</div><div class="line">      </div><div class="line">        <span class="comment">// bottom = right</span></div><div class="line">        matrix[len - <span class="number">1</span> - layer][len - <span class="number">1</span> - i] = matrix[i][len - <span class="number">1</span> - layer];</div><div class="line">        <span class="comment">// right = up</span></div><div class="line">        matrix[i][len - <span class="number">1</span> - layer] = temp;</div><div class="line">        </div><div class="line">      }</div><div class="line">    }</div><div class="line">  }</div></pre></td></tr></table></figure>



<hr>
<h2 id="Spiral_Matrix">Spiral Matrix</h2>
<blockquote>
<p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.<br>For example,<br>Given the following matrix:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"> [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ],</div><div class="line"> [ <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ],</div><div class="line"> [ <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ]</div><div class="line">]</div></pre></td></tr></table></figure>

<p>You should return [1,2,3,6,9,8,7,4,5].</p>
<h3 id="Solution-1">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">spiralOrder</span>(<span class="keyword">int</span>[][] matrix) {</div><div class="line">    ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>) <span class="keyword">return</span> result;</div><div class="line">    <span class="keyword">int</span> m = matrix.length;</div><div class="line">    <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>; </div><div class="line">    <span class="keyword">int</span> y=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(m&gt;<span class="number">0</span> && n&gt;<span class="number">0</span>){</div><div class="line">        <span class="comment">//if one row/column left, no circle can be formed</span></div><div class="line">        <span class="keyword">if</span>(m==<span class="number">1</span>){</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++){</div><div class="line">                result.add(matrix[x][y++]);</div><div class="line">            }</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>){</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++){</div><div class="line">                result.add(matrix[x++][y]);</div><div class="line">            }</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line">        <span class="comment">//below, process a circle</span></div><div class="line">        <span class="comment">//top - move right</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++){</div><div class="line">            result.add(matrix[x][y++]);</div><div class="line">        }</div><div class="line">        <span class="comment">//right - move down</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m-<span class="number">1</span>;i++){</div><div class="line">            result.add(matrix[x++][y]);</div><div class="line">        }</div><div class="line">        <span class="comment">//bottom - move left</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++){</div><div class="line">            result.add(matrix[x][y--]);</div><div class="line">        }</div><div class="line">        <span class="comment">//left - move up</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m-<span class="number">1</span>;i++){</div><div class="line">            result.add(matrix[x--][y]);</div><div class="line">        }</div><div class="line">        x++;</div><div class="line">        y++;</div><div class="line">        m=m-<span class="number">2</span>;</div><div class="line">        n=n-<span class="number">2</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">}</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Falextambo%2Flinkin-park-session&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>







]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Regular_Expression_Matching">Regular Expression Matching</h2>
<blockquote>
<p>Implement regular expression matching with support for]]>
    </summary>
    
      <category term="Recursion" scheme="sunbingjie.tk/tags/Recursion/"/>
    
      <category term="String" scheme="sunbingjie.tk/tags/String/"/>
    
      <category term="Array" scheme="sunbingjie.tk/tags/Array/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Plus One, Largest Number, Pow(x, n), Sqrt(x) , Min Stack, Valid Parentheses, Valid Sudoku, Word Ladder, Word Ladder II]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.24/"/>
    <id>sunbingjie.tk/2015/02/25/1.24/</id>
    <published>2015-02-26T03:37:44.000Z</published>
    <updated>2015-02-26T03:37:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Plus_One">Plus One</h2>
<blockquote>
<p>Given a non-negative number represented as an array of digits, plus one to the number.<br>The digits are stored such that the most significant digit is at the head of the list.</p>
</blockquote>
<h3 id="Solution">Solution</h3>
<p>Just find the last 9…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">plusOne</span>(<span class="keyword">int</span>[] digits) {</div><div class="line">          <span class="keyword">int</span> i=digits.length-<span class="number">1</span>;</div><div class="line">          <span class="keyword">for</span>(;i&gt;=<span class="number">0</span>;i--){</div><div class="line">              <span class="keyword">if</span>(digits[i]!=<span class="number">9</span>) <span class="keyword">break</span>;</div><div class="line">          }</div><div class="line">            </div><div class="line">          <span class="keyword">if</span>(i==-<span class="number">1</span>){</div><div class="line">              <span class="keyword">int</span>[] res=<span class="keyword">new</span> <span class="keyword">int</span>[digits.length+<span class="number">1</span>];</div><div class="line">                      res[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">                      <span class="keyword">return</span> res;</div><div class="line">          }   </div><div class="line">           </div><div class="line">          <span class="keyword">else</span>{</div><div class="line">             <span class="keyword">int</span>[] res=<span class="keyword">new</span> <span class="keyword">int</span>[digits.length];</div><div class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++){</div><div class="line">                 res[j]=digits[j];</div><div class="line">             }</div><div class="line">             res[i]+=<span class="number">1</span>;</div><div class="line">             <span class="keyword">return</span> res;</div><div class="line">          } </div><div class="line"> </div><div class="line">      }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Largest_Number">Largest Number</h2>
<blockquote>
<p>Given a list of non negative integers, arrange them such that they form the largest number.<br>For example, given [3, 30, 34, 5, 9], the largest formed number is 9534330.<br>Note: The result may be very large, so you need to return a string instead of an integer.</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<p>Rewirte comparator (to desc), sort and add.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">StringComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>{</div><div class="line">       <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span>(String x, String y) {</div><div class="line">           <span class="keyword">if</span> (x.equals(y)) <span class="keyword">return</span> <span class="number">0</span>;            </div><div class="line">           <span class="keyword">return</span> -(x+y).compareTo(y+x);</div><div class="line">       }</div><div class="line">   }</div><div class="line"><span class="keyword">public</span> String <span class="title">largestNumber</span>(<span class="keyword">int</span>[] num){</div><div class="line">  String[] nums = <span class="keyword">new</span> String[num.length];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;num.length;i++){</div><div class="line">    nums[i]=String.valueOf(num[i]);</div><div class="line">  }</div><div class="line">  Comparator&lt;String&gt; comparator = <span class="keyword">new</span> StringComparator();</div><div class="line">  Arrays.sort(nums,comparator);</div><div class="line">  StringBuilder str = <span class="keyword">new</span> StringBuilder();</div><div class="line">  <span class="keyword">for</span>(String n:nums){</div><div class="line">    str.append(n);</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> str.charAt(<span class="number">0</span>)==<span class="string">'0'</span>?<span class="string">"0"</span>:str.toString();</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Pow(x,_n)">Pow(x, n)</h2>
<blockquote>
<p>Implement pow(x, n).</p>
</blockquote>
<h3 id="Recursive_Solution">Recursive Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pow</span>(<span class="keyword">double</span> x, <span class="keyword">int</span> n) {</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>)</div><div class="line">    {</div><div class="line">        n=-n;</div><div class="line">        x=<span class="number">1</span>/x;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> n%<span class="number">2</span>==<span class="number">0</span> ? pow(x*x,n/<span class="number">2</span>) : x*pow(x*x,n/<span class="number">2</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Sqrt(x)">Sqrt(x)</h2>
<blockquote>
<p>Implement int sqrt(int x).<br>Compute and return the square root of x.</p>
</blockquote>
<h3 id="Solution-2"><a href="http://www.cnblogs.com/pkuoliver/archive/2010/10/06/1844725.html" target="_blank" rel="external">Solution</a></h3>
<p>Beware of overflow problems…<br>mid*mid could overflow, instead of using long, compare mid with x/mid<br>but now we have to treat 0 and 1 as special cases…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sqrt</span>(<span class="keyword">int</span> x) {     </div><div class="line">       <span class="keyword">int</span> l=<span class="number">0</span>,r=x;</div><div class="line">       <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">       <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">       <span class="keyword">while</span>(l&lt;=r){</div><div class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(x/mid==mid) <span class="keyword">return</span> mid;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid&gt;x/mid){r=mid-<span class="number">1</span>;}</div><div class="line">        <span class="keyword">else</span> {l=mid+<span class="number">1</span>;}</div><div class="line">       }</div><div class="line">       <span class="keyword">return</span> r;      </div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Min_Stack">Min Stack</h2>
<blockquote>
<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.<br>push(x) — Push element x onto stack.<br>pop() — Removes the element on top of the stack.<br>top() — Get the top element.<br>getMin() — Retrieve the minimum element in the stack.</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<p>Just use an extra stack to keep track of the min values…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Stack&lt;Integer&gt; stk=<span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">   Stack&lt;Integer&gt; minstk=<span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">   </div><div class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span>(<span class="keyword">int</span> x) {</div><div class="line">       stk.push(x);</div><div class="line">       <span class="keyword">if</span>(minstk.isEmpty() || x&lt;=minstk.peek()){minstk.push(x);}</div><div class="line">   }</div><div class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span>() {</div><div class="line">    <span class="keyword">if</span>(stk.isEmpty()) <span class="keyword">return</span>;     </div><div class="line">       <span class="keyword">int</span> tmp=stk.pop();</div><div class="line">       <span class="keyword">if</span>(!minstk.isEmpty() && tmp==minstk.peek()){minstk.pop();}</div><div class="line">   }</div><div class="line">   <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span>() {</div><div class="line">    <span class="keyword">if</span>(stk.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> stk.peek();</div><div class="line">   }</div><div class="line">   <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span>() {</div><div class="line">       <span class="keyword">if</span>(!minstk.isEmpty()) <span class="keyword">return</span> minstk.peek();</div><div class="line">       <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Valid_Parentheses">Valid Parentheses</h2>
<blockquote>
<p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.<br>The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.</p>
</blockquote>
<h3 id="Solution-3">Solution</h3>
<p>Just use a stack, push when empty, or left parenthese found; pop when found a match.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span>(String s) {</div><div class="line">    Stack&lt;Character&gt; stk=<span class="keyword">new</span> Stack&lt;Character&gt;();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++){</div><div class="line">        Character tmp=s.charAt(i);</div><div class="line">        <span class="keyword">if</span>(stk.isEmpty() && (tmp==<span class="string">')'</span> || tmp==<span class="string">']'</span> || tmp==<span class="string">'}'</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>(!stk.isEmpty() && isMatch(stk.peek(), tmp)) </div><div class="line">            stk.pop();</div><div class="line">        <span class="keyword">else</span> stk.push(tmp);</div><div class="line">    } <span class="keyword">return</span> stk.isEmpty();</div><div class="line">}</div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMatch</span>(Character a, Character b){</div><div class="line">    <span class="keyword">if</span>(a==<span class="string">'('</span> && b==<span class="string">')'</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span>(a==<span class="string">'['</span> && b==<span class="string">']'</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span>(a==<span class="string">'{'</span> && b==<span class="string">'}'</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Valid_Sudoku">Valid Sudoku</h2>
<blockquote>
<p>Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.<br>The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="pic"><br>A partially filled sudoku which is valid.<br>Note:<br>A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.</p>
</blockquote>
<h3 id="Solution-4">Solution</h3>
<p>Three HashSets, return false when add failure.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span>(<span class="keyword">char</span>[][] board) {</div><div class="line">    <span class="keyword">int</span> len=board[<span class="number">0</span>].length;</div><div class="line">    <span class="comment">//column</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len;i++){</div><div class="line">        HashSet&lt;Character&gt; col=<span class="keyword">new</span> HashSet&lt;Character&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ;j&lt;len;j++){</div><div class="line">        <span class="keyword">if</span>(board[j][i]!=<span class="string">'.'</span> && !col.add(board[j][i])) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    }</div><div class="line">    <span class="comment">//row</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len;i++){</div><div class="line">        HashSet&lt;Character&gt; row=<span class="keyword">new</span> HashSet&lt;Character&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ;j&lt;len;j++){</div><div class="line">        <span class="keyword">if</span>(board[i][j]!=<span class="string">'.'</span> && !row.add(board[i][j])) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    }</div><div class="line">    <span class="comment">//tuple</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++){</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++){</div><div class="line">            HashSet&lt;Character&gt; tup=<span class="keyword">new</span> HashSet&lt;Character&gt;();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=i*<span class="number">3</span>;m&lt;<span class="number">3</span>+i*<span class="number">3</span>;m++){</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> n=j*<span class="number">3</span>;n&lt;<span class="number">3</span>+j*<span class="number">3</span>;n++){</div><div class="line">                    <span class="keyword">if</span>(board[m][n]!=<span class="string">'.'</span> && !tup.add(board[m][n])) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Word_Ladder">Word Ladder</h2>
<blockquote>
<p>Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:<br>Only one letter can be changed at a time<br>Each intermediate word must exist in the dictionary<br>For example,<br>Given:<br>start = “hit”<br>end = “cog”<br>dict = [“hot”,”dot”,”dog”,”lot”,”log”]<br>As one shortest transformation is “hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; “cog”,<br>return its length 5.<br>Note:<br>Return 0 if there is no such transformation sequence.<br>All words have the same length.<br>All words contain only lowercase alphabetic characters.</p>
</blockquote>
<h3 id="BFS_Search_Solution">BFS Search Solution</h3>
<p>Naive approach might not give the shortest length, this problem is equavlent to finding the shortes path between start and end characters, in a graph where chars in dict are vertexes and vertexes with one char difference are connected.</p>
<p>Few more details to attend to:</p>
<p>length should start at 1, and return length+1<br>queue.size() and q.poll() is changing within each loop, so keep track of them</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span>(String start, String end, HashSet&lt;String&gt; dict) {</div><div class="line">    LinkedList&lt;String&gt; q=<span class="keyword">new</span> LinkedList&lt;String&gt;();</div><div class="line">    <span class="keyword">if</span>(start==<span class="keyword">null</span> || end==<span class="keyword">null</span> || dict==<span class="keyword">null</span> || dict.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> length=<span class="number">1</span>;</div><div class="line">    q.offer(start);</div><div class="line">    dict.remove(start);</div><div class="line">    <span class="keyword">while</span>(!q.isEmpty()){</div><div class="line">        <span class="keyword">int</span> count_level=q.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count_level;i++){</div><div class="line">            String cur=q.poll();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur.length();j++){</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">'a'</span>; c&lt;=<span class="string">'z'</span>;c++){</div><div class="line">                    String tmp=reorg(cur, j, c);</div><div class="line">                    <span class="keyword">if</span>(tmp.equals(end)) <span class="keyword">return</span> length+<span class="number">1</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(dict.contains(tmp)){dict.remove(tmp); q.offer(tmp);}</div><div class="line">                } </div><div class="line">            }</div><div class="line">        } length++;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div><div class="line"><span class="keyword">private</span> String <span class="title">reorg</span>(String s, <span class="keyword">int</span> i, <span class="keyword">char</span> c)</div><div class="line">{</div><div class="line">    <span class="keyword">char</span>[] tmparr=s.toCharArray();</div><div class="line">    tmparr[i]=c;</div><div class="line">    String res=<span class="keyword">new</span> String(tmparr);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Word_Ladder_II">Word Ladder II</h2>
<blockquote>
<p>Given two words (start and end), and a dictionary, find all shortest transformation sequence(s) from start to end, such that:<br>Only one letter can be changed at a time<br>Each intermediate word must exist in the dictionary<br>For example,<br>Given:<br>start = “hit”<br>end = “cog”<br>dict = [“hot”,”dot”,”dog”,”lot”,”log”]<br>Return</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="string">"hit"</span>,<span class="string">"hot"</span>,<span class="string">"dot"</span>,<span class="string">"dog"</span>,<span class="string">"cog"</span>],</div><div class="line">  [<span class="string">"hit"</span>,<span class="string">"hot"</span>,<span class="string">"lot"</span>,<span class="string">"log"</span>,<span class="string">"cog"</span>]</div><div class="line">]</div></pre></td></tr></table></figure>

<p>Note:<br>All words have the same length.<br>All words contain only lowercase alphabetic characters.</p>
<p>人家的解法都看晕了…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</div><div class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;String&gt;&gt; <span class="title">findLadders</span>(String start, String end, HashSet&lt;String&gt; dict) {</div><div class="line">        </div><div class="line">        <span class="comment">// Start typing your Java solution below</span></div><div class="line">        <span class="comment">// DO NOT write main() function              </span></div><div class="line">        </div><div class="line">        HashMap&lt;String, HashSet&lt;String&gt;&gt; neighbours = <span class="keyword">new</span> HashMap&lt;String, HashSet&lt;String&gt;&gt;();</div><div class="line">        </div><div class="line">        dict.add(start);</div><div class="line">        dict.add(end);</div><div class="line">        </div><div class="line">        <span class="comment">// init adjacent graph        </span></div><div class="line">        <span class="keyword">for</span>(String str : dict){</div><div class="line">            calcNeighbours(neighbours, str, dict);</div><div class="line">        }</div><div class="line">        </div><div class="line">        ArrayList&lt;ArrayList&lt;String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;String&gt;&gt;();</div><div class="line">        </div><div class="line">        <span class="comment">// BFS search queue</span></div><div class="line">        LinkedList&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</div><div class="line">        queue.add(<span class="keyword">new</span> Node(<span class="keyword">null</span>, start, <span class="number">1</span>));</div><div class="line">        </div><div class="line">        <span class="comment">// BFS level</span></div><div class="line">        <span class="keyword">int</span> previousLevel = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="comment">// mark which nodes have been visited, to break infinite loop</span></div><div class="line">        HashMap&lt;String, Integer&gt; visited = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;(); </div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty()){</div><div class="line">            Node n = queue.pollFirst();            </div><div class="line">            <span class="keyword">if</span>(end.equals(n.str)){ </div><div class="line">                <span class="comment">// fine one path, check its length, if longer than previous path it's valid</span></div><div class="line">                <span class="comment">// otherwise all possible short path have been found, should stop</span></div><div class="line">                <span class="keyword">if</span>(previousLevel == <span class="number">0</span> || n.level == previousLevel){</div><div class="line">                    previousLevel = n.level;</div><div class="line">                    findPath(n, result);                    </div><div class="line">                }<span class="keyword">else</span> {</div><div class="line">                    <span class="comment">// all path with length *previousLevel* have been found</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                }                </div><div class="line">            }<span class="keyword">else</span> {</div><div class="line">                HashSet&lt;String&gt; set = neighbours.get(n.str);                 </div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(set == <span class="keyword">null</span> || set.isEmpty()) <span class="keyword">continue</span>;</div><div class="line">                <span class="comment">// note: I'm not using simple for(String s: set) here. This is to avoid hashset's</span></div><div class="line">                <span class="comment">// current modification exception.</span></div><div class="line">                ArrayList&lt;String&gt; toRemove = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">                <span class="keyword">for</span> (String s : set) {</div><div class="line">                    </div><div class="line">                    <span class="comment">// if s has been visited before at a smaller level, there is already a shorter </span></div><div class="line">                    <span class="comment">// path from start to s thus we should ignore s so as to break infinite loop; if </span></div><div class="line">                    <span class="comment">// on the same level, we still need to put it into queue.</span></div><div class="line">                    <span class="keyword">if</span>(visited.containsKey(s)){</div><div class="line">                        Integer occurLevel = visited.get(s);</div><div class="line">                        <span class="keyword">if</span>(n.level+<span class="number">1</span> &gt; occurLevel){</div><div class="line">                            neighbours.get(s).remove(n.str);</div><div class="line">                            toRemove.add(s);</div><div class="line">                            <span class="keyword">continue</span>;</div><div class="line">                        }</div><div class="line">                    }</div><div class="line">                    visited.put(s,  n.level+<span class="number">1</span>);</div><div class="line">                    queue.add(<span class="keyword">new</span> Node(n, s, n.level + <span class="number">1</span>));</div><div class="line">                    <span class="keyword">if</span>(neighbours.containsKey(s))</div><div class="line">                        neighbours.get(s).remove(n.str);</div><div class="line">                }</div><div class="line">                <span class="keyword">for</span>(String s: toRemove){</div><div class="line">                    set.remove(s);</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPath</span>(Node n, ArrayList&lt;ArrayList&lt;String&gt;&gt; result){</div><div class="line">        ArrayList&lt;String&gt; path = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        Node p = n;</div><div class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span>){</div><div class="line">            path.add(<span class="number">0</span>, p.str);</div><div class="line">            p = p.parent; </div><div class="line">        }</div><div class="line">        result.add(path);</div><div class="line">    }</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * complexity: O(26*str.length*dict.size)=O(L*N)</div><div class="line">     */</div><div class="line">    <span class="keyword">void</span> calcNeighbours(HashMap&lt;String, HashSet&lt;String&gt;&gt; neighbours, String str, HashSet&lt;String&gt; dict) {</div><div class="line">        <span class="keyword">int</span> length = str.length();</div><div class="line">        <span class="keyword">char</span> [] chars = str.toCharArray();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) {</div><div class="line">            </div><div class="line">            <span class="keyword">char</span> old = chars[i]; </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; c++) {</div><div class="line">                <span class="keyword">if</span> (c == old)  <span class="keyword">continue</span>;</div><div class="line">                chars[i] = c;</div><div class="line">                String newstr = <span class="keyword">new</span> String(chars);                </div><div class="line">                </div><div class="line">                <span class="keyword">if</span> (dict.contains(newstr)) {</div><div class="line">                    HashSet&lt;String&gt; set = neighbours.get(str);</div><div class="line">                    <span class="keyword">if</span> (set != <span class="keyword">null</span>) {</div><div class="line">                        set.add(newstr);</div><div class="line">                    } <span class="keyword">else</span> {</div><div class="line">                        HashSet&lt;String&gt; newset = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">                        newset.add(newstr);</div><div class="line">                        neighbours.put(str, newset);</div><div class="line">                    }</div><div class="line">                }                </div><div class="line">            }</div><div class="line">            chars[i] = old;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</div><div class="line">        <span class="keyword">public</span> Node parent;</div><div class="line">        <span class="keyword">public</span> String str;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> level;</div><div class="line">        <span class="keyword">public</span> <span class="title">Node</span>(Node p, String s, <span class="keyword">int</span> l){</div><div class="line">            parent = p;</div><div class="line">            str = s;</div><div class="line">            level = l;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>





<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fsnow-man-4%2Fthe-xx-intro-themmmixx-long&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>




]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Plus_One">Plus One</h2>
<blockquote>
<p>Given a non-negative number represented as an array of digits, plus one to the number.<br>Th]]>
    </summary>
    
      <category term="Math" scheme="sunbingjie.tk/tags/Math/"/>
    
      <category term="Array" scheme="sunbingjie.tk/tags/Array/"/>
    
      <category term="String" scheme="sunbingjie.tk/tags/String/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Same Tree, Symmetric Tree, Balanced Binary Tree, Binary Tree Level Order Traversal, Binary Tree Level Order Traversal II, Maximum Depth of Binary Tree, Minimum Depth of Binary Tree]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.23/"/>
    <id>sunbingjie.tk/2015/02/25/1.23/</id>
    <published>2015-02-26T03:30:44.000Z</published>
    <updated>2015-02-26T03:30:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Same_Tree">Same Tree</h2>
<blockquote>
<p>Given two binary trees, write a function to check if they are equal or not.<br>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
</blockquote>
<h3 id="Recursive_Solution">Recursive Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span>(TreeNode p, TreeNode q) {</div><div class="line">      <span class="keyword">if</span>(p==<span class="keyword">null</span> && q==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      <span class="keyword">if</span>(p!=<span class="keyword">null</span> && q!=<span class="keyword">null</span> && p.val==q.val){</div><div class="line">          <span class="keyword">return</span> isSameTree(p.left,q.left) && isSameTree(p.right,q.right);</div><div class="line">      }</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Symmetric_Tree">Symmetric Tree</h2>
<blockquote>
<p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).<br>For example, this binary tree is symmetric:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    1</div><div class="line">   / <span class="command">\</span></div><div class="line">  2   2</div><div class="line"> / <span class="command">\ </span>/ <span class="command">\</span></div><div class="line">3  4 4  3</div></pre></td></tr></table></figure>

<p>But the following is not:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  1</div><div class="line"> / <span class="command">\</span></div><div class="line">2   2</div><div class="line"> <span class="command">\ </span>  <span class="command">\</span></div><div class="line"> 3    3</div></pre></td></tr></table></figure>

<p>Note:<br>Bonus points if you could solve it both recursively and iteratively.</p>
<h3 id="Recursive_Solution-1">Recursive Solution</h3>
<p>Just traverse both on left and right branches of the root symmetricaly and check if the values are equal.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span>(TreeNode root) {</div><div class="line">     <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">     <span class="keyword">return</span> rec(root.left ,root.right);</div><div class="line"> }</div><div class="line"> </div><div class="line"> <span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">rec</span>(TreeNode l, TreeNode r){</div><div class="line">     <span class="keyword">if</span>(l==<span class="keyword">null</span> && r==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span>(l!=<span class="keyword">null</span> && r!=<span class="keyword">null</span> && l.val==r.val) </div><div class="line">     <span class="keyword">return</span> rec(l.left,r.right) && rec(l.right, r.left);</div><div class="line">     <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"> }</div></pre></td></tr></table></figure>

<h3 id="Iterative_Solution">Iterative Solution</h3>
<p>Two Stacks to store the two partitions of nodes that are supposed to be equal.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span>(TreeNode root) {</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        Stack&lt;TreeNode&gt; l=<span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">        Stack&lt;TreeNode&gt; r=<span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">        l.push(root.left);</div><div class="line">        r.push(root.right);</div><div class="line">        <span class="keyword">while</span>(!l.isEmpty() && ! r.isEmpty()){</div><div class="line">            TreeNode left=l.pop();</div><div class="line">            TreeNode right=r.pop();</div><div class="line">            <span class="keyword">if</span>(left==<span class="keyword">null</span> && right==<span class="keyword">null</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(left!=<span class="keyword">null</span> && right!=<span class="keyword">null</span> && right.val==left.val){</div><div class="line">                l.push(left.left); l.push(left.right);</div><div class="line">                r.push(right.right); r.push(right.left); </div><div class="line">            } </div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Balanced_Binary_Tree">Balanced Binary Tree</h2>
<blockquote>
<p>Given a binary tree, determine if it is height-balanced.<br>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>
</blockquote>
<h3 id="Recursive_Solution-1">Recursive Solution</h3>
<p>Two Nested Recursive:</p>
<p>getheight returns the highest depths of current node</p>
<p>break and return false if two children’s height differ by more than 1</p>
<p>else continue checking for both children, until reached null node.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span>(TreeNode root) {</div><div class="line">      <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      <span class="keyword">if</span>(Math.abs(getheight(root.left) - getheight(root.right)) &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      <span class="keyword">return</span> isBalanced(root.left) && isBalanced(root.right);</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getheight</span>(TreeNode cur){</div><div class="line">      <span class="keyword">if</span>(cur==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">      <span class="keyword">return</span> <span class="number">1</span>+Math.max(getheight(cur.left), getheight(cur.right));</div><div class="line">  }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Binary_Tree_Level_Order_Traversal">Binary Tree Level Order Traversal</h2>
<blockquote>
<p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).<br>For example:<br>Given binary tree {3,9,20,#,#,15,7},</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  3</div><div class="line"> / <span class="command">\</span></div><div class="line">9  20</div><div class="line">  /  <span class="command">\</span></div><div class="line"> 15   7</div></pre></td></tr></table></figure>

<p>return its level order traversal as:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">3</span>],</div><div class="line">  [<span class="number">9</span>,<span class="number">20</span>],</div><div class="line">  [<span class="number">15</span>,<span class="number">7</span>]</div><div class="line">]</div></pre></td></tr></table></figure>

<h3 id="BFS_Solution">BFS Solution</h3>
<p>use two queues to store all nodes on the current level and their children level, when current level queue is empty, go to the next level</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title">levelOrder</span>(TreeNode root) {</div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">        Queue&lt;TreeNode&gt; curlevel=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">        Queue&lt;TreeNode&gt; nextlevel=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">        curlevel.add(root);</div><div class="line">        ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">while</span>(!curlevel.isEmpty())</div><div class="line">        {</div><div class="line">            TreeNode cur=curlevel.poll();</div><div class="line">            tmp.add(cur.val);</div><div class="line">            <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>)</div><div class="line">            nextlevel.add(cur.left);</div><div class="line">            <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>)</div><div class="line">            nextlevel.add(cur.right);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(curlevel.isEmpty()){</div><div class="line">              curlevel=nextlevel;</div><div class="line">              nextlevel=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">              res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp));</div><div class="line">              tmp.clear();</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    }</div></pre></td></tr></table></figure>



<h3 id="DFS_Solution">DFS Solution</h3>
<p>recursively add new levels to the list, keep a variable height to track when to create new list:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> height=<span class="number">0</span>;</div><div class="line">   <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title">levelOrder</span>(TreeNode root){</div><div class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">    dfs(res, root,<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line"> }</div><div class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>( ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res, TreeNode root, <span class="keyword">int</span> height){</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(height&gt;=res.size()){</div><div class="line">      res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">    }</div><div class="line">    res.get(height).add(root.val);</div><div class="line">    dfs(res, root.left, height+<span class="number">1</span>);</div><div class="line">    dfs(res, root.right, height+<span class="number">1</span>);</div><div class="line"> }</div></pre></td></tr></table></figure>



<hr>
<h2 id="Binary_Tree_Level_Order_Traversal_II">Binary Tree Level Order Traversal II</h2>
<blockquote>
<p>Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).<br>For example:<br>Given binary tree {3,9,20,#,#,15,7},</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  3</div><div class="line"> / <span class="command">\</span></div><div class="line">9  20</div><div class="line">  /  <span class="command">\</span></div><div class="line"> 15   7</div></pre></td></tr></table></figure>

<p>return its bottom-up level order traversal as:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">15</span>,<span class="number">7</span>],</div><div class="line">  [<span class="number">9</span>,<span class="number">20</span>],</div><div class="line">  [<span class="number">3</span>]</div><div class="line">]</div></pre></td></tr></table></figure>

<h3 id="BFS_Solution-1">BFS Solution</h3>
<p>Just reverse the result list at the end…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title">levelOrderBottom</span>(TreeNode root) {</div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">        Queue&lt;TreeNode&gt; curlevel=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">        Queue&lt;TreeNode&gt; nextlevel=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">        curlevel.add(root);</div><div class="line">        ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">while</span>(!curlevel.isEmpty())</div><div class="line">        {</div><div class="line">            TreeNode cur=curlevel.poll();</div><div class="line">            tmp.add(cur.val);</div><div class="line">            <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>)</div><div class="line">            nextlevel.add(cur.left);</div><div class="line">            <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>)</div><div class="line">            nextlevel.add(cur.right);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(curlevel.isEmpty()){</div><div class="line">              curlevel=nextlevel;</div><div class="line">              nextlevel=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">              res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp));</div><div class="line">              tmp.clear();</div><div class="line">            }</div><div class="line">        }</div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; resnew=<span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=res.size()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--){</div><div class="line">            resnew.add(res.get(i));</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> resnew;</div><div class="line">    }</div></pre></td></tr></table></figure>

<p>Or More concise</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) {</div><div class="line">      ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">      Queue&lt;TreeNode&gt; curlevel=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">      <span class="keyword">if</span>(root==<span class="literal">null</span>) return res;</div><div class="line">      curlevel.add(root);</div><div class="line">      <span class="keyword">while</span>(!curlevel.<span class="built_in">isEmpty</span>())</div><div class="line">      {</div><div class="line">         <span class="built_in">int</span> levelnum=curlevel.size();</div><div class="line">         ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">         <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;levelnum;i++){</div><div class="line">             <span class="keyword">if</span>(curlevel.peek().<span class="built_in">left</span>!=<span class="literal">null</span>) curlevel.offer(curlevel.peek().<span class="built_in">left</span>);</div><div class="line">             <span class="keyword">if</span>(curlevel.peek().<span class="built_in">right</span>!=<span class="literal">null</span>) curlevel.offer(curlevel.peek().<span class="built_in">right</span>);</div><div class="line">             tmp.add(curlevel.poll().val);</div><div class="line">         }</div><div class="line">         res.add(<span class="number">0</span>,tmp);</div><div class="line">      }</div><div class="line">      </div><div class="line">      return res;</div><div class="line">  }</div></pre></td></tr></table></figure>

<h3 id="DFS_Solution-1">DFS Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> height=<span class="number">0</span>;</div><div class="line">   <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title">levelOrderBottom</span>(TreeNode root){</div><div class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">    dfs(res, root,<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line"> }</div><div class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>( ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res, TreeNode root, <span class="keyword">int</span> height){</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(height&gt;=res.size()){</div><div class="line">      res.add(<span class="number">0</span>,<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">    }</div><div class="line">    res.get(res.size()-height-<span class="number">1</span>).add(root.val);</div><div class="line">    dfs(res, root.left, height+<span class="number">1</span>);</div><div class="line">    dfs(res, root.right, height+<span class="number">1</span>);</div><div class="line"> }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Maximum_Depth_of_Binary_Tree">Maximum Depth of Binary Tree</h2>
<blockquote>
<p>Given a binary tree, find its maximum depth.<br>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
</blockquote>
<h3 id="DFS_Solution-1">DFS Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span>(TreeNode root) {</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>+Math.max(maxDepth(root.left),maxDepth(root.right));</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Iterative_Solution-1">Iterative Solution</h3>
<p>Use a List to store BFS nodes, and an extra node to keep track of the last node on current level:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span>(TreeNode root) {</div><div class="line">      <span class="keyword">int</span> depth=<span class="number">0</span>;</div><div class="line">      <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> depth;</div><div class="line">      LinkedList&lt;TreeNode&gt; q=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">      q.offer(root);</div><div class="line">      TreeNode levelend=root, tmp;</div><div class="line">      <span class="keyword">while</span>(!q.isEmpty()){</div><div class="line">          tmp=q.poll();</div><div class="line">          <span class="keyword">if</span>(tmp.left!=<span class="keyword">null</span>) q.offer(tmp.left);</div><div class="line">          <span class="keyword">if</span>(tmp.right!=<span class="keyword">null</span>) q.offer(tmp.right);</div><div class="line">          <span class="keyword">if</span>(tmp==levelend){</div><div class="line">              depth++;</div><div class="line">              levelend=q.peekLast();</div><div class="line">          }</div><div class="line">      } <span class="keyword">return</span> depth;</div><div class="line">  }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Minimum_Depth_of_Binary_Tree">Minimum Depth of Binary Tree</h2>
<blockquote>
<p>Given a binary tree, find its minimum depth.<br>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>
</blockquote>
<h3 id="DFS_Solution-1">DFS Solution</h3>
<p>A little different from max path: when one child is null, return the other half, when both is null return 1</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span>(TreeNode root) {</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(root.left==<span class="keyword">null</span> && root.right==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(root.left==<span class="keyword">null</span>) <span class="keyword">return</span> minDepth(root.right)+<span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(root.right==<span class="keyword">null</span>) <span class="keyword">return</span> minDepth(root.left)+<span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Math.min(minDepth(root.left), minDepth(root.right))+<span class="number">1</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="BFS_Solution-1">BFS Solution</h3>
<p>One List to store BFS nodes, one list to store depth, min path found when reached any leaf:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span>(TreeNode root) {</div><div class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    LinkedList&lt;TreeNode&gt; l=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">    LinkedList&lt;Integer&gt; count=<span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">    l.offer(root); count.offer(<span class="number">1</span>);</div><div class="line">    <span class="keyword">while</span>(!l.isEmpty()){</div><div class="line">        TreeNode tmp=l.poll();</div><div class="line">        res=count.poll();</div><div class="line">        <span class="keyword">if</span>(tmp.left!=<span class="keyword">null</span>){</div><div class="line">            l.offer(tmp.left);</div><div class="line">            count.offer(res+<span class="number">1</span>);</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(tmp.right!=<span class="keyword">null</span>){</div><div class="line">            l.offer(tmp.right);</div><div class="line">            count.offer(res+<span class="number">1</span>);</div><div class="line">            }</div><div class="line">        <span class="keyword">if</span>(tmp.left==<span class="keyword">null</span> && tmp.right==<span class="keyword">null</span>) <span class="keyword">return</span> res;    </div><div class="line">    } <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fcashmerecat%2Fdo-you-cashmere-cat-remix&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>














]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Same_Tree">Same Tree</h2>
<blockquote>
<p>Given two binary trees, write a function to check if they are equal or not.<br>Two binary ]]>
    </summary>
    
      <category term="BFS" scheme="sunbingjie.tk/tags/BFS/"/>
    
      <category term="DFS" scheme="sunbingjie.tk/tags/DFS/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Construct Binary Tree from Preorder and Inorder Traversal, Construct Binary Tree from Inorder and Postorder Traversal, Binary Tree Inorder Traversal, Convert Sorted Array to Binary Search Tree, Convert Sorted List to Binary Search Tree, Flatten Binary Tree to Linked List]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.22/"/>
    <id>sunbingjie.tk/2015/02/25/1.22/</id>
    <published>2015-02-26T03:25:53.000Z</published>
    <updated>2015-02-26T03:25:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal">Construct Binary Tree from Preorder and Inorder Traversal</h2>
<blockquote>
<p>Given preorder and inorder traversal of a tree, construct the binary tree.<br>Note:<br>You may assume that duplicates do not exist in the tree. </p>
</blockquote>
<h3 id="Solution">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> pre=<span class="number">0</span>;</div><div class="line"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span>(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder) {</div><div class="line">    <span class="comment">//if(preorder.length==0||inorder.length==0){return null;}</span></div><div class="line">    <span class="keyword">int</span> l=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> r=preorder.length-<span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> build(preorder,inorder,l, r);</div><div class="line">}</div><div class="line"><span class="keyword">public</span> TreeNode <span class="title">build</span>(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder,<span class="keyword">int</span> l, <span class="keyword">int</span> r){</div><div class="line">    <span class="keyword">if</span>(l&gt;r){<span class="keyword">return</span> <span class="keyword">null</span>;}</div><div class="line">    <span class="keyword">int</span> cur=preorder[pre];</div><div class="line">    TreeNode node=<span class="keyword">new</span> TreeNode(cur);</div><div class="line">    pre++;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (i=l; i&lt;=r; i++){</div><div class="line">        <span class="keyword">if</span>(inorder[i]==cur)</div><div class="line">        {<span class="keyword">break</span>;}</div><div class="line">    }</div><div class="line">     </div><div class="line">    node.left=build(preorder,inorder,l, i-<span class="number">1</span>);</div><div class="line">    node.right=build(preorder,inorder,i+<span class="number">1</span>, r);</div><div class="line">    </div><div class="line">   <span class="keyword">return</span> node;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal">Construct Binary Tree from Inorder and Postorder Traversal</h2>
<blockquote>
<p>Given inorder and postorder traversal of a tree, construct the binary tree.<br>Note:<br>You may assume that duplicates do not exist in the tree.</p>
</blockquote>
<p>Almost the same with previous one, only this time we scan postorder from backwards and recursively add to the right subtree first.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> pos=<span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> TreeNode <span class="title">buildTree</span>(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder) {</div><div class="line">        pos=inorder.length-<span class="number">1</span>;</div><div class="line">       <span class="keyword">return</span> helper(inorder, postorder, <span class="number">0</span>, inorder.length-<span class="number">1</span>);</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> TreeNode <span class="title">helper</span>(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder, <span class="keyword">int</span> l, <span class="keyword">int</span> r){</div><div class="line">            <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">int</span> cur=postorder[pos];</div><div class="line">            TreeNode tmp=<span class="keyword">new</span> TreeNode(cur);</div><div class="line">            pos--;</div><div class="line">            <span class="keyword">int</span> i=l;</div><div class="line">            <span class="keyword">for</span>(;i&lt;=r;i++){</div><div class="line">                <span class="keyword">if</span>(inorder[i]==cur) <span class="keyword">break</span>;</div><div class="line">            }</div><div class="line">            </div><div class="line">            tmp.right=helper(inorder,postorder, i+<span class="number">1</span>, r);</div><div class="line">            tmp.left=helper(inorder, postorder, l, i-<span class="number">1</span>);</div><div class="line">            <span class="keyword">return</span> tmp;</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Binary_Tree_Inorder_Traversal">Binary Tree Inorder Traversal</h2>
<blockquote>
<p>Given a binary tree, return the inorder traversal of its nodes’ values.<br>For example:<br>Given binary tree {1,#,2,3},</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"> <span class="command">\</span></div><div class="line">  2</div><div class="line"> /</div><div class="line">3</div></pre></td></tr></table></figure>

<p>return [1,3,2].<br>Note: Recursive solution is trivial, could you do it iteratively?<br>confused what “{1,#,2,3}” means? &gt; read more on how binary tree is serialized on OJ.</p>
<h3 id="Recursive_Method(Trivial)">Recursive Method(Trivial)</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">inorderTraversal</span>(TreeNode root) {</div><div class="line">    ArrayList&lt;Integer&gt; res= <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">      <span class="comment">//第一次没过..少了这句</span></div><div class="line">      <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">    <span class="keyword">return</span> helper(root,res);</div><div class="line">}</div><div class="line"><span class="keyword">private</span>  ArrayList&lt;Integer&gt; <span class="title">helper</span>(TreeNode cur,ArrayList&lt;Integer&gt; res){</div><div class="line">    <span class="keyword">if</span>(cur==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    helper(cur.left, res);</div><div class="line">    res.add(cur.val);</div><div class="line">    helper(cur.right, res);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Iterative_Method">Iterative Method</h3>
<li>Inorder: left child -&gt; parent -&gt; right child</li><br><li>Use a stack to track nodes</li><br><li>Exit while loop when stack is empty and current node is null</li>

<p>push nodes in the stack when current node is not null, then move to left subtree<br>pop node when current node is null, move to right subtree</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">inorderTraversal</span>(TreeNode root) {</div><div class="line">        ArrayList&lt;Integer&gt; res= <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        Stack&lt;TreeNode&gt; nodestack=<span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">while</span>(!nodestack.isEmpty() || root!=<span class="keyword">null</span>){</div><div class="line">            <span class="keyword">if</span>(root!=<span class="keyword">null</span>){</div><div class="line">                nodestack.push(root);</div><div class="line">                root=root.left;</div><div class="line">            }</div><div class="line">            <span class="keyword">else</span>{</div><div class="line">                TreeNode tmp=nodestack.pop();</div><div class="line">                res.add(tmp.val);</div><div class="line">                root=tmp.right;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Convert_Sorted_Array_to_Binary_Search_Tree">Convert Sorted Array to Binary Search Tree</h2>
<blockquote>
<p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<p>Use recursion, find median element each time, move to left/right subtree.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span>(<span class="keyword">int</span>[] num) {</div><div class="line">       <span class="keyword">return</span> helper(num, <span class="number">0</span>, num.length-<span class="number">1</span>);</div><div class="line">   }</div><div class="line">   </div><div class="line">   <span class="keyword">private</span> TreeNode <span class="title">helper</span>(<span class="keyword">int</span>[] num,<span class="keyword">int</span> l, <span class="keyword">int</span> r){</div><div class="line">       <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</div><div class="line">       TreeNode newnode=<span class="keyword">new</span> TreeNode(num[mid]);</div><div class="line">       newnode.left=helper(num, l, mid-<span class="number">1</span>);</div><div class="line">       newnode.right=helper(num, mid+<span class="number">1</span>, r);</div><div class="line">       <span class="keyword">return</span> newnode;</div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Convert_Sorted_List_to_Binary_Search_Tree">Convert Sorted List to Binary Search Tree</h2>
<blockquote>
<p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p>
</blockquote>
<h3 id="Naive_Solution">Naive Solution</h3>
<p>Just convert LinkedList to Array first…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> TreeNode <span class="title">sortedListToBST</span>(ListNode head) {</div><div class="line">       ListNode cur = head;</div><div class="line">       List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">       <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</div><div class="line">           res.add(cur.val);</div><div class="line">           cur = cur.next;</div><div class="line">       }</div><div class="line">       <span class="keyword">return</span> helper(res, <span class="number">0</span>, res.size() - <span class="number">1</span>);</div><div class="line">   }</div><div class="line">    <span class="keyword">private</span> TreeNode <span class="title">helper</span>(List&lt;Integer&gt; res,<span class="keyword">int</span> l, <span class="keyword">int</span> r){</div><div class="line">       <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</div><div class="line">       TreeNode newnode=<span class="keyword">new</span> TreeNode(res.get(mid));</div><div class="line">       newnode.left=helper(res, l, mid-<span class="number">1</span>);</div><div class="line">       newnode.right=helper(res, mid+<span class="number">1</span>, r);</div><div class="line">       <span class="keyword">return</span> newnode;</div><div class="line">   }</div></pre></td></tr></table></figure>

<h3 id="Recursive_Solution">Recursive Solution</h3>
<p>The trick here is to use two pointers, one slow and one twice the speed, to find the median element.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">sortedListToBST</span>(ListNode head) {  </div><div class="line">        <span class="keyword">return</span> rec(head, <span class="keyword">null</span>);  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    <span class="comment">// 在区间[start, end)里递归，后面的end是包括在内的，这样可以避免要多用一个指针来记录mid前的节点  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">rec</span>(ListNode start, ListNode end){  </div><div class="line">        <span class="keyword">if</span>(start == end){  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">        }  </div><div class="line">          </div><div class="line">        <span class="comment">// 一次遍历找到中点的方法：快慢指针  </span></div><div class="line">        ListNode mid = start;           <span class="comment">// 该指针最终会指向中点  </span></div><div class="line">        ListNode probe = start;         <span class="comment">// 探针最终会到达end  </span></div><div class="line">        <span class="keyword">while</span>(probe!=end && probe.next!=end){       <span class="comment">// 探针完成搜索，注意停止条件是和end比较而不是和null比！  </span></div><div class="line">            mid = mid.next;  </div><div class="line">            probe = probe.next.next;  </div><div class="line">        }  </div><div class="line">          </div><div class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(mid.val);  </div><div class="line">        root.left = rec(start, mid);  </div><div class="line">        root.right = rec(mid.next, end);  </div><div class="line">        <span class="keyword">return</span> root;  </div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Flatten_Binary_Tree_to_Linked_List">Flatten Binary Tree to Linked List</h2>
<blockquote>
<p>Given a binary tree, flatten it to a linked list in-place.<br>For example,<br>Given</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    1</div><div class="line">   / <span class="command">\</span></div><div class="line">  2   5</div><div class="line"> / <span class="command">\ </span>  <span class="command">\</span></div><div class="line">3   4   6</div></pre></td></tr></table></figure>

<p>The flattened tree should look like:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"> <span class="command">\</span></div><div class="line">  2</div><div class="line">   <span class="command">\</span></div><div class="line">    3</div><div class="line">     <span class="command">\</span></div><div class="line">      4</div><div class="line">       <span class="command">\</span></div><div class="line">        5</div><div class="line">         <span class="command">\</span></div><div class="line">          6</div></pre></td></tr></table></figure>

<h3 id="Iterative_Solution">Iterative Solution</h3>
<p>Using a stack to solve this problem is easy: start from root, push right, left into stack. If stack is not empty, set cur.right to stack.peek(). Continue to process the next node from top of stack.<br>But to do it inplace requires to keep track of the origin right node. Overall process is to squeeze the left node into between its parents and right child.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatten</span>(TreeNode root) {</div><div class="line">        TreeNode head=<span class="keyword">new</span> TreeNode(<span class="number">0</span>);</div><div class="line">        head.right=root;</div><div class="line">        TreeNode cur=head;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(cur.right!=<span class="keyword">null</span>){</div><div class="line">            cur=cur.right;</div><div class="line">            <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>){</div><div class="line">                TreeNode end=cur.left;</div><div class="line">                <span class="keyword">while</span>(end.right!=<span class="keyword">null</span>)</div><div class="line">                end=end.right;</div><div class="line">                TreeNode tmp=tmp=cur.right;</div><div class="line">                cur.right=cur.left;</div><div class="line">                end.right=tmp;</div><div class="line">                cur.left=<span class="keyword">null</span>;</div><div class="line">            }</div><div class="line">        } head.right=<span class="keyword">null</span>;</div><div class="line">        </div><div class="line">    }</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fanthony-cavazzoli%2Fdeorro-five-hours-original-mix&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>







]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal">Construct Binary Tree from Preorder and Inorder Traversal</h2>
<blockquot]]>
    </summary>
    
      <category term="BFS" scheme="sunbingjie.tk/tags/BFS/"/>
    
      <category term="DFS" scheme="sunbingjie.tk/tags/DFS/"/>
    
      <category term="LinkedList" scheme="sunbingjie.tk/tags/LinkedList/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Subsets, Subsets II, Missing Ranges]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.20/"/>
    <id>sunbingjie.tk/2015/02/25/1.20/</id>
    <published>2015-02-26T03:21:43.000Z</published>
    <updated>2015-02-26T03:21:43.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Subsets">Subsets</h2>
<blockquote>
<p>Given a set of distinct integers, S, return all possible subsets.<br>Note:<br>Elements in a subset must be in non-descending order.<br>The solution set must not contain duplicate subsets.<br>For example,<br>If S = [1,2,3], a solution is:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">3</span>],</div><div class="line">  [<span class="number">1</span>],</div><div class="line">  [<span class="number">2</span>],</div><div class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</div><div class="line">  [<span class="number">1</span>,<span class="number">3</span>],</div><div class="line">  [<span class="number">2</span>,<span class="number">3</span>],</div><div class="line">  [<span class="number">1</span>,<span class="number">2</span>],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure>

<h3 id="Non-recursive_Solution"><a href="https://leetcodenotes.wordpress.com/2013/10/08/leetcode-subsets-2-%E7%BB%99%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%EF%BC%8C%E8%BE%93%E5%87%BA%E6%89%80%E6%9C%89%E5%8D%87%E5%BA%8F%E7%9A%84%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84subsets/" target="_blank" rel="external">Non-recursive Solution</a></h3>
<p>Just keep adding current number to the result collection..<br>Pay attention to the use of add and addAll</p>
<p>i=0 | [[], [1]]<br>i=1 | [[2], [1,2]]<br>i=2 | [[3], [1,3], [2,3], [1,2,3]]</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title">subsets</span>(<span class="keyword">int</span>[] S) {</div><div class="line">        Arrays.sort(S);</div><div class="line">        ArrayList&lt;Integer&gt; subset=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; subsets=<span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; ();</div><div class="line">        <span class="comment">//add empty set</span></div><div class="line">        subsets.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">        <span class="comment">//add set from layers </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S.length;i++){</div><div class="line">             ArrayList&lt;ArrayList&lt;Integer&gt;&gt; subsetsfori=<span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">            <span class="keyword">for</span>(ArrayList&lt;Integer&gt; prev: subsets){</div><div class="line">                ArrayList&lt;Integer&gt; tmp= <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">                tmp.addAll(prev);</div><div class="line">                tmp.add(S[i]);</div><div class="line">                subsetsfori.add(tmp);</div><div class="line">        }</div><div class="line">        subsets.addAll(subsetsfori);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> subsets;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Recursive_Solution"><a href="http://blog.csdn.net/u011095253/article/details/9158397" target="_blank" rel="external">Recursive Solution</a></h3>
<p>Similar to DFS, i refers to start position of a subset</p>
<p>i=0 | [[], [1], [1,2], [1,2,3]]<br>i=1 | [[2], [2,3]]<br>i=2 | [[3]]</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title">subsets</span>(<span class="keyword">int</span>[] S) {</div><div class="line">        Arrays.sort(S);</div><div class="line">        ArrayList&lt;Integer&gt; subset=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; subsets=<span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; ();</div><div class="line">        subsets.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">        subset_helper(subsets, subset, <span class="number">0</span>, S);</div><div class="line">    <span class="keyword">return</span> subsets;</div><div class="line">}</div><div class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">subset_helper</span>(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; subsets, ArrayList&lt;Integer&gt; subset, <span class="keyword">int</span> start, <span class="keyword">int</span>[] s){</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;s.length;i++){</div><div class="line">            subset.add(s[i]);</div><div class="line">            <span class="comment">//add new arraylist subset here</span></div><div class="line">            subsets.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(subset));</div><div class="line">            subset_helper(subsets, subset, i+<span class="number">1</span>, s);</div><div class="line">            subset.remove(subset.size()-<span class="number">1</span>);</div><div class="line">        }</div><div class="line">    }</div></pre></td></tr></table></figure>

<h2 id="Subsets_II">Subsets II</h2>
<blockquote>
<p>Given a collection of integers that might contain duplicates, S, return all possible subsets.<br>Note:<br>Elements in a subset must be in non-descending order.<br>The solution set must not contain duplicate subsets.<br>For example,<br>If S = [1,2,2], a solution is:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">2</span>],</div><div class="line">  [<span class="number">1</span>],</div><div class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],</div><div class="line">  [<span class="number">2</span>,<span class="number">2</span>],</div><div class="line">  [<span class="number">1</span>,<span class="number">2</span>],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure>

<p>Only difference is the added while loop.<br>If completed current layer, and found the next element is the same then skip.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title">subsetsWithDup</span>(<span class="keyword">int</span>[] num) {</div><div class="line">          Arrays.sort(num);</div><div class="line">        ArrayList&lt;Integer&gt; subset=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; subsets=<span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; ();</div><div class="line">        subsets.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</div><div class="line">        subset_helper(subsets, subset, <span class="number">0</span>, num);</div><div class="line">    <span class="keyword">return</span> subsets;</div><div class="line">    }</div><div class="line">    </div><div class="line">  <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">subset_helper</span>(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; subsets, ArrayList&lt;Integer&gt; subset, <span class="keyword">int</span> start, <span class="keyword">int</span>[] s){</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;s.length;i++){</div><div class="line">      subset.add(s[i]);</div><div class="line">      <span class="comment">//add new arraylist subset here</span></div><div class="line">      subsets.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(subset));</div><div class="line">      subset_helper(subsets, subset, i+<span class="number">1</span>, s);</div><div class="line">      subset.remove(subset.size()-<span class="number">1</span>);</div><div class="line">      <span class="keyword">while</span>(i &lt; s.length-<span class="number">1</span> && s[i]==s[i+<span class="number">1</span>]) </div><div class="line">      {i++;}</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="Missing_Ranges">Missing Ranges</h2>
<blockquote>
<p>Given a sorted integer array where the range of elements are [lower, upper] inclusive, return its missing ranges.<br>For example, given [0, 1, 3, 50, 75], lower = 0 and upper = 99, return [“2”, “4-&gt;49”, “51-&gt;74”, “76-&gt;99”].</p>
</blockquote>
<p>Main idea: output accrodingly when two elements differ&gt;=2, pay attention to edge cases.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">findmissingRanges</span>(<span class="keyword">int</span>[] num, <span class="keyword">int</span> lower, <span class="keyword">int</span> upper){</div><div class="line">    ArrayList&lt;String&gt; res=<span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">   </div><div class="line">      <span class="keyword">if</span>(num.length==<span class="number">0</span>){</div><div class="line">        <span class="keyword">if</span>(lower!=upper) res.add(lower+<span class="string">"-&gt;"</span>+upper);</div><div class="line">        <span class="keyword">else</span> res.add(lower+<span class="string">""</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">      }</div><div class="line">      <span class="keyword">if</span>(lower&lt;num[<span class="number">0</span>]){</div><div class="line">        <span class="keyword">if</span>(num[<span class="number">0</span>]-lower&gt;<span class="number">1</span>) res.add(lower+<span class="string">"-&gt;"</span>+(num[<span class="number">0</span>]-<span class="number">1</span>));</div><div class="line">        <span class="keyword">else</span> res.add(lower+<span class="string">""</span>);</div><div class="line">      }</div><div class="line">      </div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;num.length-<span class="number">1</span>;i++){</div><div class="line">        <span class="keyword">if</span>(num[i+<span class="number">1</span>]-num[i]&gt;<span class="number">2</span>) res.add((num[i]+<span class="number">1</span>)+<span class="string">"-&gt;"</span>+(num[i+<span class="number">1</span>]-<span class="number">1</span>)+<span class="string">""</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num[i+<span class="number">1</span>]-num[i]==<span class="number">2</span>) res.add(num[i]+<span class="number">1</span>+<span class="string">""</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">continue</span>;</div><div class="line">      }</div><div class="line">      </div><div class="line">      <span class="keyword">if</span>(num[num.length-<span class="number">1</span>]&lt;upper){</div><div class="line">        <span class="keyword">if</span>(upper-num[num.length-<span class="number">1</span>]&gt;<span class="number">1</span>) res.add(num[num.length-<span class="number">1</span>]+<span class="number">1</span>+<span class="string">"-&gt;"</span>+upper);</div><div class="line">        <span class="keyword">else</span> res.add(<span class="string">""</span>+upper);</div><div class="line">      }</div><div class="line">      <span class="keyword">return</span> res;</div><div class="line">  }</div></pre></td></tr></table></figure>

<p>More Concise:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findMissingRanges</span>(<span class="keyword">int</span>[] vals, <span class="keyword">int</span> start, <span class="keyword">int</span> end) {</div><div class="line">       List&lt;String&gt; ranges = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">       <span class="keyword">int</span> prev = start - <span class="number">1</span>;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=vals.length; i++) {</div><div class="line">           <span class="keyword">int</span> curr = (i==vals.length) ? end + <span class="number">1</span> : vals[i];</div><div class="line">           <span class="keyword">if</span> ( curr-prev&gt;=<span class="number">2</span> ) {</div><div class="line">               ranges.add(getRange(prev+<span class="number">1</span>, curr-<span class="number">1</span>));</div><div class="line">           }</div><div class="line">           prev = curr;</div><div class="line">       }</div><div class="line">       <span class="keyword">return</span> ranges;</div><div class="line">   }</div><div class="line">   <span class="keyword">private</span> String <span class="title">getRange</span>(<span class="keyword">int</span> from, <span class="keyword">int</span> to) {</div><div class="line">       <span class="keyword">return</span> (from==to) ? String.valueOf(from) : from + <span class="string">"-&gt;"</span> +to;</div><div class="line">   }</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fahainen%2Ftwo-door-cinema-club-golden-1&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>


]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Subsets">Subsets</h2>
<blockquote>
<p>Given a set of distinct integers, S, return all possible subsets.<br>Note:<br>Elements in a su]]>
    </summary>
    
      <category term="Recursion" scheme="sunbingjie.tk/tags/Recursion/"/>
    
      <category term="Array" scheme="sunbingjie.tk/tags/Array/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Remove Nth Node From End of List, Merge Two Sorted Lists, Merge K Sorted Lists]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.2/"/>
    <id>sunbingjie.tk/2015/02/25/1.2/</id>
    <published>2015-02-26T03:20:36.000Z</published>
    <updated>2015-02-26T03:20:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Remove_Nth_Node_From_End_of_List">Remove Nth Node From End of List</h2>
<blockquote>
<p>Given a linked list, remove the nth node from the end of list and return its head.<br>For example,<br>Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.<br>After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</p>
</blockquote>
<h3 id="Solution">Solution</h3>
<p>Honestly I don’t know how my first solution got accepted, basically I just count the size of list and then remove that element in the second pass.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span>(ListNode head, <span class="keyword">int</span> n) {</div><div class="line">           ListNode cur=head;</div><div class="line">           <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">           <span class="keyword">while</span>(cur!=<span class="keyword">null</span>){cur=cur.next;i++;}</div><div class="line">           System.out.println(i);</div><div class="line">           ListNode cur2=head;</div><div class="line">            </div><div class="line">           <span class="keyword">if</span>(n==i){head=head.next;}</div><div class="line">            </div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i-n-<span class="number">1</span>;j++){</div><div class="line">               </div><div class="line">               System.out.println(j);</div><div class="line">               cur2=cur2.next;</div><div class="line">           }</div><div class="line">           <span class="keyword">if</span> (cur2.next == <span class="keyword">null</span>) {</div><div class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">           }</div><div class="line">           <span class="keyword">else</span> cur2.next=cur2.next.next;</div><div class="line">           </div><div class="line">           <span class="keyword">return</span> head;      </div><div class="line">       }</div></pre></td></tr></table></figure>

<p>One pass solution using two pointers: one fake pointer to move n steps from the beginning, then move both pointers until list ends.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span>(ListNode head, <span class="keyword">int</span> n) {</div><div class="line">     </div><div class="line">         ListNode cur=head;</div><div class="line">         ListNode p=head;</div><div class="line">         </div><div class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++){cur=cur.next;}</div><div class="line">         <span class="comment">//deal with removing head cases</span></div><div class="line">         <span class="keyword">if</span>(cur==<span class="keyword">null</span>) head=head.next;</div><div class="line">         <span class="comment">//made a mistake here, forgot to move cur with p...</span></div><div class="line">         <span class="keyword">else</span> {<span class="keyword">while</span>(cur.next!=<span class="keyword">null</span>){p=p.next;cur=cur.next;}</div><div class="line">         p.next=p.next.next;}</div><div class="line">         <span class="keyword">return</span> head;</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Merge_Two_Sorted_Lists">Merge Two Sorted Lists</h2>
<blockquote>
<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<p>Note: Algorithm is trivial, however I always forget to copy head to last therefore lost the final head during the iteration…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span>(ListNode l1, ListNode l2) {</div><div class="line">        ListNode h=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode l=h;</div><div class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span>&&l2!=<span class="keyword">null</span>){</div><div class="line">            <span class="keyword">if</span>(l1.val&lt;l2.val){</div><div class="line">                l.next=l1;</div><div class="line">                l1=l1.next;     </div><div class="line">            }</div><div class="line">            <span class="keyword">else</span>{</div><div class="line">                l.next=l2;</div><div class="line">                l2=l2.next;</div><div class="line">            }</div><div class="line">            l=l.next;</div><div class="line">        }</div><div class="line">        <span class="comment">//attach the rest of one list</span></div><div class="line">        <span class="keyword">if</span> (l1==<span class="keyword">null</span>) l.next=l2;</div><div class="line">        <span class="keyword">else</span> l.next=l1;</div><div class="line">        <span class="keyword">return</span> h.next;</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Merge_K_Sorted_Lists">Merge K Sorted Lists</h2>
<blockquote>
<p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<p>First Solution is Divide and Conquer, by calling the above method and reconstruct. The recursion is T(k) = 2T(k/2)+O(n*k)=O(nklogk).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span>(List&lt;ListNode&gt; lists) {</div><div class="line">         </div><div class="line">         <span class="keyword">int</span> n=lists.size();</div><div class="line">         <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">         <span class="comment">//main function call</span></div><div class="line">         <span class="keyword">else</span> <span class="keyword">return</span> mergeKlist(lists,<span class="number">0</span>,n-<span class="number">1</span>);</div><div class="line">         </div><div class="line">     }</div><div class="line">     </div><div class="line">     <span class="keyword">public</span> ListNode <span class="title">mergeKlist</span>(List&lt;ListNode&gt; lists, <span class="keyword">int</span> l, <span class="keyword">int</span> r){</div><div class="line">         </div><div class="line">         <span class="keyword">if</span>(l&lt;r){</div><div class="line">             <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</div><div class="line">             <span class="comment">//divide the lists by 2 until its size reaches 1, then merge them from bottom to top</span></div><div class="line">             <span class="keyword">return</span> mergeTwoLists(mergeKlist(lists,l,m),mergeKlist(lists,m+<span class="number">1</span>,r));</div><div class="line">         }</div><div class="line">         </div><div class="line">         <span class="keyword">return</span> lists.get(l);</div><div class="line">       }</div></pre></td></tr></table></figure>

<p>Or, instead of dividing into two parts, we can use ArrayDeque Class. (Similar to brute force solution, merges two list each time, whose complexity is n(2+3+…k)=O(nk^2))</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span>(List&lt;ListNode&gt; lists) {</div><div class="line">    </div><div class="line">      <span class="keyword">if</span>(lists == <span class="keyword">null</span> || lists.isEmpty()) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">      ArrayDeque&lt;ListNode&gt; q = <span class="keyword">new</span> ArrayDeque&lt;ListNode&gt;();</div><div class="line">      <span class="keyword">for</span>(ListNode n : lists) {</div><div class="line">          <span class="keyword">if</span> (n != <span class="keyword">null</span>) q.offer(n);</div><div class="line">      }</div><div class="line">      <span class="keyword">while</span>(q.size() &gt; <span class="number">1</span>) {</div><div class="line">          ListNode a = q.poll();</div><div class="line">          ListNode b = q.poll();</div><div class="line">          q.offer(mergeTwoLists(a, b));</div><div class="line">      }</div><div class="line">      </div><div class="line">      <span class="keyword">return</span> q.poll();</div><div class="line"> }</div></pre></td></tr></table></figure>

<p>Second Solution is PQ. We can add the heads of all lists into the queue. And we can poll out the smallest one. If the next node of this smallest node is not null, we can add the next node to the queue. Until we empty the PQ, we get the sorted lists. The complexity is also O(nklogk).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span>(List&lt;ListNode&gt; lists) {</div><div class="line">         <span class="keyword">if</span>(lists == <span class="keyword">null</span> || lists.isEmpty()) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">         PriorityQueue&lt;ListNode&gt; heap=<span class="keyword">new</span> PriorityQueue&lt;&gt;(lists.size(), <span class="keyword">new</span> Comparator&lt;ListNode&gt;(){</div><div class="line">            <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span>(ListNode a, ListNode b){</div><div class="line">                <span class="keyword">if</span>(a==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span>(b==<span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">                <span class="keyword">return</span> a.val - b.val;</div><div class="line">            }</div><div class="line">            });</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;lists.size(); i++){</div><div class="line">            <span class="keyword">if</span>(lists.get(i) != <span class="keyword">null</span>){</div><div class="line">                heap.add(lists.get(i));</div><div class="line">            }</div><div class="line">        }</div><div class="line">        ListNode h=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode l=h;</div><div class="line">        <span class="keyword">while</span>(!heap.isEmpty()){</div><div class="line">            ListNode head=heap.poll();</div><div class="line">            l.next=head;</div><div class="line">            l=head;</div><div class="line">            <span class="keyword">if</span>(head.next != <span class="keyword">null</span>){</div><div class="line">                heap.add(head.next);</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> h.next;</div><div class="line">}</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Ftheneighbourhood%2Fsweater-weather-little&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Remove_Nth_Node_From_End_of_List">Remove Nth Node From End of List</h2>
<blockquote>
<p>Given a linked list, remove the nth node fro]]>
    </summary>
    
      <category term="LinkedList" scheme="sunbingjie.tk/tags/LinkedList/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[First Missing Positive, Sort Colors]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.2%EF%BC%8D2/"/>
    <id>sunbingjie.tk/2015/02/25/1.2－2/</id>
    <published>2015-02-26T03:19:42.000Z</published>
    <updated>2015-02-26T03:19:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="First_Missing_Positive">First Missing Positive</h2>
<blockquote>
<p>Given an unsorted integer array, find the first missing positive integer.<br>For example,<br>Given [1,2,0] return 3,<br>and [3,4,-1,1] return 2.<br>Your algorithm should run in O(n) time and uses constant space.</p>
</blockquote>
<h3 id="Solution">Solution</h3>
<p>First solution I thought of is simply sort the array, then find the fist missing positive by comparing each positive element with index. However, even though this passed the OJ, it’s still O(logn) time.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span>(<span class="keyword">int</span> A[]) {</div><div class="line">    <span class="keyword">int</span> n= A.length;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    Arrays.sort(A);</div><div class="line">    <span class="keyword">while</span>(i&lt;n && A[i]&lt;=<span class="number">0</span>) i++;</div><div class="line">    <span class="keyword">for</span>(;i&lt;n;i++){</div><div class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>&&A[i]==A[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(A[i]-index!=<span class="number">1</span>) <span class="keyword">return</span> index+<span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> index=A[i];</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> index+<span class="number">1</span>;  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>Second solution sorts every number corresponding with index, index i holds number i+1, if i+1 is not in the array then we return the smallest mismatch. The runtime is O(n).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span>(<span class="keyword">int</span> A[]) {</div><div class="line">    <span class="keyword">int</span> n= A.length;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> tmp=<span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(i&lt;n){</div><div class="line">        <span class="keyword">if</span>(A[i]&gt;<span class="number">0</span> && A[i]&lt;n && A[i]!=A[A[i]-<span class="number">1</span>])</div><div class="line">        {</div><div class="line">            tmp=A[A[i]-<span class="number">1</span>];</div><div class="line">            A[A[i]-<span class="number">1</span>]=A[i];</div><div class="line">            A[i]=tmp;</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> i++;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++){</div><div class="line">        <span class="keyword">if</span>(A[i]!=i+<span class="number">1</span>) <span class="keyword">return</span> i+<span class="number">1</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> n+<span class="number">1</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Sort_Colors">Sort Colors</h2>
<blockquote>
<p>Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.<br>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.<br>Note:<br>You are not suppose to use the library’s sort function for this problem.</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<p>First solution is counting sort, two pass algorithm.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span>(<span class="keyword">int</span>[] A) {     </div><div class="line">      <span class="keyword">int</span> n=A.length;</div><div class="line">      <span class="keyword">int</span>[] B=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++){</div><div class="line">        B[A[i]]++;</div><div class="line">      }</div><div class="line">      <span class="keyword">int</span> p=<span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;B.length;j++){</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;B[j];k++)</div><div class="line">              A[p++]=j;</div><div class="line">      }          </div><div class="line">    }</div></pre></td></tr></table></figure>

<p>Second Solution is one pass three way partition, using three pointers: pr for the first not red, pb for first not blue and i for current.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span>(<span class="keyword">int</span>[] A) {</div><div class="line">       </div><div class="line">       <span class="keyword">int</span> n=A.length;</div><div class="line">       <span class="keyword">int</span> pr=<span class="number">0</span>,pb=n-<span class="number">1</span>,i=<span class="number">0</span>;</div><div class="line">       <span class="keyword">while</span>(pr&lt;n&&A[pr]==<span class="number">0</span>) pr++;</div><div class="line">       <span class="keyword">while</span>(pb&gt;<span class="number">0</span>&&A[pb]==<span class="number">2</span>) pb--;</div><div class="line">       i=pr;</div><div class="line">       <span class="keyword">while</span>(i&lt;=pb){</div><div class="line">           </div><div class="line">           <span class="keyword">if</span>(A[i]==<span class="number">0</span>) {swap(A,i,pr); pr++;}</div><div class="line">           <span class="keyword">if</span>(A[i]==<span class="number">2</span>) {swap(A,i,pb); pb--;}</div><div class="line">           <span class="keyword">else</span> i++;</div><div class="line">       }</div><div class="line">         </div><div class="line">     }</div><div class="line">   </div><div class="line">   <span class="keyword">void</span> swap(<span class="keyword">int</span>[] A,<span class="keyword">int</span> a, <span class="keyword">int</span> b){</div><div class="line">       <span class="keyword">int</span> tmp=A[a];</div><div class="line">       A[a]=A[b];</div><div class="line">       A[b]=tmp;</div><div class="line">   }</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Ffoundations%2F06-sleepyhead&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>



]]></content>
    <summary type="html">
    <![CDATA[<h2 id="First_Missing_Positive">First Missing Positive</h2>
<blockquote>
<p>Given an unsorted integer array, find the first missing positive]]>
    </summary>
    
      <category term="Sort" scheme="sunbingjie.tk/tags/Sort/"/>
    
      <category term="Array" scheme="sunbingjie.tk/tags/Array/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[XX]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.3/"/>
    <id>sunbingjie.tk/2015/02/25/1.3/</id>
    <published>2015-02-26T03:18:55.000Z</published>
    <updated>2015-02-26T03:18:55.000Z</updated>
    <content type="html"><![CDATA[<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fitsdimmi%2Fet-voila-dimmi&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>

]]></content>
    <summary type="html">
    <![CDATA[<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fi]]>
    </summary>
    
      <category term="LinkedList" scheme="sunbingjie.tk/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Merge Sorted Array, Merge Intervals, Insert Interval]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.18/"/>
    <id>sunbingjie.tk/2015/02/25/1.18/</id>
    <published>2015-02-26T03:15:21.000Z</published>
    <updated>2015-02-26T03:15:21.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Merge_Sorted_Array">Merge Sorted Array</h2>
<blockquote>
<p>Given two sorted integer arrays A and B, merge B into A as one sorted array.<br>Note:<br>You may assume that A has enough space (size that is greater or equal to m + n) to hold additional elements from B. The number of elements initialized in A and B are m and n respectively.</p>
</blockquote>
<h3 id="Two_Pointer_Solution:">Two Pointer Solution:</h3>
<p>Unlike merge sort, we need to merge these two arrays in place. So start from the end (A[m+n-1]), we compare each pointer. Until one of the pointers reached 0, copy the rest of B to A.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span>(<span class="keyword">int</span> A[], <span class="keyword">int</span> m, <span class="keyword">int</span> B[], <span class="keyword">int</span> n) {</div><div class="line">        <span class="keyword">int</span> cur=m+n;</div><div class="line">        <span class="keyword">while</span>(m&gt;<span class="number">0</span> && n&gt;<span class="number">0</span>){</div><div class="line">             <span class="keyword">if</span>(A[m-<span class="number">1</span>]&lt;B[n-<span class="number">1</span>]){A[--cur]=B[--n];}</div><div class="line">             <span class="keyword">else</span> {A[--cur]=A[--m];}</div><div class="line">        }</div><div class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>){A[--cur]=B[--n];}</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Merge_Intervals">Merge Intervals</h2>
<blockquote>
<p>Given a collection of intervals, merge all overlapping intervals.<br>For example,<br>Given [1,3],[2,6],[8,10],[15,18],<br>return [1,6],[8,10],[15,18].</p>
</blockquote>
<h3 id="Correct_Solution">Correct Solution</h3>
<p>At first sort the Intervals, then I thought of three basic cases:</p>
<li>cur.end &gt; next.end (&amp;&amp; cur.end &gt; next.start)</li>

<li>cur.end &lt; next.end &amp;&amp; cur.end &gt; next.start</li>

<li>cur.end &lt; next.end &amp;&amp; cur.end &lt; next.start</li>

<p>we can leave the third case alone, and only the first two cases need to be merged: if(cur.end &gt; next.start) we set cur.end to the max out of two ends.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> ArrayList&lt;Interval&gt; <span class="title">merge</span>(ArrayList&lt;Interval&gt; intervals) {</div><div class="line">  <span class="comment">//sort according to start using inline comparator</span></div><div class="line">  Collections.sort(intervals, <span class="keyword">new</span> Comparator&lt;Interval&gt;(){</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span>(Interval a, Interval b) {</div><div class="line">      <span class="keyword">return</span> a.start-b.start;</div><div class="line">    }</div><div class="line">  });</div><div class="line">  <span class="comment">//compare and add to result</span></div><div class="line">  ArrayList&lt;Interval&gt; res=<span class="keyword">new</span> ArrayList&lt;Interval&gt;();</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;intervals.size();i++){</div><div class="line">    Interval cur=intervals.get(i);</div><div class="line">    <span class="comment">//imagine cur to eat all overlapped intervals</span></div><div class="line">    <span class="keyword">while</span>(i&lt;intervals.size()-<span class="number">1</span> && cur.end&gt;=intervals.get(i+<span class="number">1</span>).start){</div><div class="line">      cur.end=Math.max(cur.end, intervals.get(i+<span class="number">1</span>).end);</div><div class="line">      i++;</div><div class="line">    }</div><div class="line">    res.add(cur);</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Insert_Interval">Insert Interval</h2>
<blockquote>
<p>Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).<br>You may assume that the intervals were initially sorted according to their start times.<br>Example 1:<br>Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].<br>Example 2:<br>Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].<br>This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].</p>
</blockquote>
<h3 id="Solution(while_loop)">Solution(while loop)</h3>
<p>Still three cases:<br><img src="http://www.programcreek.com/wp-content/uploads/2012/12/insert-interval--650x351.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;Interval&gt; <span class="title">insert</span>(ArrayList&lt;Interval&gt; intervals, Interval newInterval) {</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>; Interval cur=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(intervals.size()==<span class="number">0</span>) {intervals.add(newInterval); <span class="keyword">return</span> intervals;}</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(i&lt;intervals.size()){</div><div class="line">          cur=intervals.get(i);</div><div class="line">          <span class="comment">//nonoverlap, newInterval is behind current, continue</span></div><div class="line">          <span class="keyword">if</span>(cur.end&lt;newInterval.start) {i++;<span class="keyword">continue</span>;}</div><div class="line">          <span class="comment">//nonoverlap, newInterval is before current, jump out of loop</span></div><div class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(cur.start&gt;newInterval.end) <span class="keyword">break</span>;</div><div class="line">          <span class="comment">//overlap, update newInterval and remove current</span></div><div class="line">          <span class="keyword">else</span> {</div><div class="line">            newInterval.start=Math.min(newInterval.start, cur.start);</div><div class="line">            newInterval.end=Math.max(newInterval.end, cur.end);</div><div class="line">            intervals.remove(i);</div><div class="line">          }</div><div class="line">        }</div><div class="line">        intervals.add(i, newInterval);</div><div class="line">         <span class="keyword">return</span> intervals;</div><div class="line">        }</div></pre></td></tr></table></figure>

<h3 id="Solution(For_each_loop)">Solution(For each loop)</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;Interval&gt; <span class="title">insert</span>(ArrayList&lt;Interval&gt; intervals, Interval newInterval) {</div><div class="line">       ArrayList&lt;Interval&gt; res = <span class="keyword">new</span> ArrayList&lt;Interval&gt;();</div><div class="line"><span class="comment">//for each interval in list, add to res</span></div><div class="line">       <span class="keyword">for</span>(Interval interval: intervals){</div><div class="line">           <span class="keyword">if</span>(interval.end &lt; newInterval.start){</div><div class="line">               res.add(interval);</div><div class="line">           }</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(interval.start &gt; newInterval.end){</div><div class="line">               res.add(newInterval);</div><div class="line">               newInterval = interval;        </div><div class="line">           }</div><div class="line">           <span class="keyword">else</span> {</div><div class="line">               newInterval.start=Math.min(interval.start, newInterval.start);</div><div class="line">               newInterval.end=Math.max(newInterval.end, interval.end);</div><div class="line">           }</div><div class="line">       }</div><div class="line">       res.add(newInterval); </div><div class="line">       <span class="keyword">return</span> res;</div></pre></td></tr></table></figure>

<h3 id="Solution(ListIterator)">Solution(ListIterator)</h3>
<p>ListIterator:</p>
<li>hasNext(), next(), add(), hasPrevious(), previous(),remove(), set(), nextIndex(), previousIndex()</li>

<p>Iterator:</p>
<li>hasNext(), next(), remove()</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> ArrayList&lt;Interval&gt; <span class="title">insert</span>(ArrayList&lt;Interval&gt; intervals, Interval newInterval) {</div><div class="line">  Interval cur=<span class="keyword">null</span>;</div><div class="line">  <span class="keyword">if</span>(intervals.size()==<span class="number">0</span>) {intervals.add(newInterval); <span class="keyword">return</span> intervals;}</div><div class="line">  ListIterator&lt;Interval&gt; it=intervals.listIterator();</div><div class="line">  <span class="keyword">while</span>(it.hasNext()){</div><div class="line">    cur=it.next();</div><div class="line">    <span class="comment">//nonoverlap, newInterval is before current, jump out of loop</span></div><div class="line">    <span class="keyword">if</span>(newInterval.end&lt;cur.start) {it.previous();it.add(newInterval);<span class="keyword">return</span> intervals;}</div><div class="line">    <span class="comment">//nonoverlap, newInterval is after current, continue</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(newInterval.start&gt;cur.end) <span class="keyword">continue</span>;</div><div class="line">    <span class="comment">//overlap, update newInterval, remove current</span></div><div class="line">    <span class="keyword">else</span> {</div><div class="line">      newInterval.start=Math.min(newInterval.start, cur.start);</div><div class="line">      newInterval.end=Math.max(newInterval.end, cur.end);</div><div class="line">      it.remove();</div><div class="line">    }</div><div class="line">  }</div><div class="line">  <span class="comment">//if new eats the last, add new to intervals</span></div><div class="line">  intervals.add(newInterval);</div><div class="line">  <span class="keyword">return</span> intervals;</div><div class="line">}</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fjasonderulo%2Fjason-derulo-the-other-side-3&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>







]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Merge_Sorted_Array">Merge Sorted Array</h2>
<blockquote>
<p>Given two sorted integer arrays A and B, merge B into A as one sorted ar]]>
    </summary>
    
      <category term="Sort" scheme="sunbingjie.tk/tags/Sort/"/>
    
      <category term="Array" scheme="sunbingjie.tk/tags/Array/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Best Time to Buy and Sell Stock, Best Time to Buy and Sell Stock II, Best Time to Buy and Sell Stock III]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.17/"/>
    <id>sunbingjie.tk/2015/02/25/1.17/</id>
    <published>2015-02-26T03:11:20.000Z</published>
    <updated>2015-02-26T03:11:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Best_Time_to_Buy_and_Sell_Stock">Best Time to Buy and Sell Stock</h2>
<blockquote>
<p>Say you have an array for which the ith element is the price of a given stock on day i.<br>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
</blockquote>
<h3 id="Brute_Force_Solution">Brute Force Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span>(<span class="keyword">int</span>[] prices) {</div><div class="line">    <span class="keyword">int</span> maxp=<span class="number">0</span>, low=Integer.MAX_VALUE;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prices.length;i++){</div><div class="line">            <span class="keyword">if</span>(prices[i]&lt;low) low=prices[i];</div><div class="line">            <span class="keyword">if</span>(prices[i]-low&gt;maxp)</div><div class="line">            maxp=prices[i]-low;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> maxp;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="DP_Solution">DP Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span>(<span class="keyword">int</span>[] prices) {</div><div class="line">        <span class="keyword">int</span> maxp=<span class="number">0</span>, tmp=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length &lt;<span class="number">2</span>) { <span class="keyword">return</span> <span class="number">0</span>;}</div><div class="line">        <span class="keyword">int</span>[] t=<span class="keyword">new</span> <span class="keyword">int</span>[prices.length-<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prices.length-<span class="number">1</span>;i++){</div><div class="line">                t[i]=prices[i+<span class="number">1</span>]-prices[i];</div><div class="line">        }</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.length;i++){</div><div class="line">            tmp+=t[i];</div><div class="line">                <span class="keyword">if</span>(tmp&gt;maxp) maxp=tmp;</div><div class="line">                <span class="keyword">if</span>(tmp&lt;<span class="number">0</span>) tmp=<span class="number">0</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> maxp;</div><div class="line">    }</div></pre></td></tr></table></figure>

<h2 id="Best_Time_to_Buy_and_Sell_Stock_II">Best Time to Buy and Sell Stock II</h2>
<h3 id="Greedy_Solution:_trasaction_once_there_exist_profit-">Greedy Solution: trasaction once there exist profit.</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span>(<span class="keyword">int</span>[] prices) {</div><div class="line">      <span class="keyword">if</span>(prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;prices.length; i++){</div><div class="line">          <span class="keyword">if</span>(prices[i] &gt; prices[i-<span class="number">1</span>])</div><div class="line">            ans += prices[i]-prices[i-<span class="number">1</span>];</div><div class="line">      }</div><div class="line">      <span class="keyword">return</span> ans;</div><div class="line">    }</div></pre></td></tr></table></figure>

<h3 id="DP_Solution-1">DP Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span>(<span class="keyword">int</span>[] prices) {</div><div class="line">        <span class="keyword">int</span> maxp=<span class="number">0</span>, tmp=<span class="number">0</span>,curmax=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length &lt;<span class="number">2</span>) { <span class="keyword">return</span> <span class="number">0</span>;}</div><div class="line">        <span class="keyword">int</span>[] t=<span class="keyword">new</span> <span class="keyword">int</span>[prices.length-<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prices.length-<span class="number">1</span>;i++){</div><div class="line">                t[i]=prices[i+<span class="number">1</span>]-prices[i];</div><div class="line">        }</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.length;i++){</div><div class="line">          <span class="keyword">if</span>(t[i]&gt;<span class="number">0</span>) maxp+=t[i];</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> maxp;</div><div class="line">    }</div></pre></td></tr></table></figure>

<h2 id="Best_Time_to_Buy_and_Sell_Stock_III">Best Time to Buy and Sell Stock III</h2>
<blockquote>
<p>Say you have an array for which the ith element is the price of a given stock on day i.<br>Design an algorithm to find the maximum profit. You may complete at most two transactions.<br>Note:<br>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
</blockquote>
<h3 id="DP_Solution-1">DP Solution</h3>
<p>First thought: we can cut the array in half in n ways, and get the max profit from both sides using solution in the first question. This will be O(n^2), too LTE…<br>Using DP to store the max profit from both sides? just scan twice from both directions and update the max profit array for [0…i] and [i…n-1]. Return the max value when a[i]+b[i] is max.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span>(<span class="keyword">int</span>[] prices) {</div><div class="line">        <span class="keyword">if</span>(prices==<span class="keyword">null</span>||prices.length&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n=prices.length, maxsofar=<span class="number">0</span>, low=<span class="number">0</span>,high=<span class="number">0</span>;</div><div class="line">        <span class="comment">//curmax[i] shows max profit from [0..i]</span></div><div class="line">        <span class="keyword">int</span>[] curmax=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">        curmax[<span class="number">0</span>]=<span class="number">0</span>;low=prices[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++){</div><div class="line">            <span class="keyword">if</span>(prices[i]&lt;low) low=prices[i];</div><div class="line">            <span class="keyword">if</span>(prices[i]-low&gt;maxsofar) maxsofar=prices[i]-low;</div><div class="line">            curmax[i]=maxsofar;</div><div class="line">        }</div><div class="line">        <span class="comment">//backmax[i] shows max profits from [i...n-1]</span></div><div class="line">        <span class="keyword">int</span>[] backmax=<span class="keyword">new</span> <span class="keyword">int</span>[n];maxsofar=<span class="number">0</span>;</div><div class="line">        backmax[n-<span class="number">1</span>]=<span class="number">0</span>; high=prices[n-<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(i=n-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--){</div><div class="line">            <span class="keyword">if</span>(high&lt;prices[i]) high=prices[i];</div><div class="line">            <span class="keyword">if</span>(high-prices[i]&gt;maxsofar) maxsofar=high-prices[i];</div><div class="line">            backmax[i]=maxsofar;</div><div class="line">        }</div><div class="line">        maxsofar=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++){</div><div class="line">            <span class="keyword">if</span>(backmax[i]+curmax[i]&gt;maxsofar) maxsofar = backmax[i]+curmax[i];</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> maxsofar;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="General_DP_Solution"><a href="https://oj.leetcode.com/discuss/15153/a-clean-dp-solution-which-generalizes-to-k-transactions" target="_blank" rel="external">General DP Solution</a></h3>
<p>Two cases select max as f[k][i]</p>
<li>transact on i: p[i]-p[j]+f[k-1][j] or write as p[i]-max(f[k-1][j]-p[j]) j belongs to [0,i-1]</li><br><li>no transaction on i: t[k][i-1]</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span>(<span class="keyword">int</span>[] prices) {</div><div class="line">    <span class="keyword">if</span>(prices==<span class="keyword">null</span>||prices.length&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> n=prices.length, maxsofar=<span class="number">0</span>, K=<span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span>[][] f=<span class="keyword">new</span> <span class="keyword">int</span>[K+<span class="number">1</span>][n];</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> kk = <span class="number">1</span>; kk &lt;= K; kk++) {</div><div class="line">            <span class="keyword">int</span> tmpMax = f[kk-<span class="number">1</span>][<span class="number">0</span>] - prices[<span class="number">0</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">1</span>; ii &lt; n; ii++) {</div><div class="line">                f[kk][ii] = Math.max(f[kk][ii-<span class="number">1</span>], prices[ii] + tmpMax);</div><div class="line">                tmpMax = Math.max(tmpMax, f[kk-<span class="number">1</span>][ii] - prices[ii]);</div><div class="line">                maxsofar = Math.max(f[kk][ii], maxsofar);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> maxsofar;</div><div class="line">}</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fmilkychance%2Fstolen-dance-1&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>













]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Best_Time_to_Buy_and_Sell_Stock">Best Time to Buy and Sell Stock</h2>
<blockquote>
<p>Say you have an array for which the ith elemen]]>
    </summary>
    
      <category term="Sort" scheme="sunbingjie.tk/tags/Sort/"/>
    
      <category term="Array" scheme="sunbingjie.tk/tags/Array/"/>
    
      <category term="DP" scheme="sunbingjie.tk/tags/DP/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Container With Most Water, Trapping Rain Water]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.14/"/>
    <id>sunbingjie.tk/2015/02/25/1.14/</id>
    <published>2015-02-26T03:09:54.000Z</published>
    <updated>2015-02-26T03:09:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Container_With_Most_Water">Container With Most Water</h2>
<blockquote>
<p>Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.<br>Note: You may not slant the container.</p>
</blockquote>
<h3 id="Solution">Solution</h3>
<p>Two Pointers l and r:</p>
<li>start from two ends, keep updating maxsofar area</li>

<li>changing rule: if left’&lt;’right then we know moving right makes no change(width decreases and min board is still left), so we need to move left pointer, vise versa</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span>(<span class="keyword">int</span>[] height) {</div><div class="line">     <span class="keyword">if</span>(height==<span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">     <span class="keyword">int</span> curmax=-<span class="number">1</span>, maxsofar=-<span class="number">1</span>, l=<span class="number">0</span>,r=height.length-<span class="number">1</span>;</div><div class="line">     <span class="keyword">while</span>(l&lt;r){</div><div class="line">      curmax=(r-l)*Math.min(height[l],height[r]);</div><div class="line">      <span class="keyword">if</span>(curmax&gt;maxsofar){</div><div class="line">        maxsofar=curmax;</div><div class="line">      }</div><div class="line">      <span class="keyword">if</span>(height[l]&lt;height[r]){</div><div class="line">        <span class="comment">//move r-- would never increase area with same l</span></div><div class="line">        <span class="keyword">int</span> tmp=height[l];</div><div class="line">        <span class="keyword">while</span>(l&lt;r && height[l]&lt;=tmp)</div><div class="line">        l++;</div><div class="line">      }</div><div class="line">      <span class="keyword">else</span>{</div><div class="line">        <span class="keyword">int</span> tmp=height[r];</div><div class="line">        <span class="keyword">while</span>(l&lt;r && height[r]&lt;=tmp)</div><div class="line">        r--;</div><div class="line">      }</div><div class="line">     }</div><div class="line">     </div><div class="line">     <span class="keyword">return</span> maxsofar;</div><div class="line">     </div><div class="line"> }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Trapping_Rain_Water">Trapping Rain Water</h2>
<blockquote>
<p>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.<br>For example,<br>Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.<br><img src="http://www.leetcode.com/wp-content/uploads/2012/08/rainwatertrap.png" alt="eg"></p>
</blockquote>
<h3 id="Crazy_Smart_Solution">Crazy Smart Solution</h3>
<p>left[i] to store the largest to the left of i; right[i] to store the largest to the right of i. The min of these two, subtracted by A[i], determines how much water A[i] can hold<br>remember to add up volume from 1 to n-2, since two sides cannot hold water.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span>(<span class="keyword">int</span>[] A) {</div><div class="line">      <span class="keyword">if</span> (A == <span class="keyword">null</span> || A.length == <span class="number">0</span>) {  </div><div class="line">          <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">      }  </div><div class="line">      <span class="keyword">int</span> i, n=A.length,vol=<span class="number">0</span>,max=<span class="number">0</span>,left[]=<span class="keyword">new</span> <span class="keyword">int</span>[n],right[]=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">      <span class="comment">//left to right</span></div><div class="line">      <span class="keyword">for</span>(i=<span class="number">1</span>, max=A[<span class="number">0</span>], left[<span class="number">0</span>]=A[<span class="number">0</span>]; i&lt;n;i++ ){</div><div class="line">          <span class="keyword">if</span>(A[i]&gt;max) {max=A[i]; left[i]=A[i];}</div><div class="line">          <span class="keyword">else</span> left[i]=max;</div><div class="line">      }</div><div class="line">      <span class="comment">//right to left</span></div><div class="line">      <span class="keyword">for</span>(i = n-<span class="number">2</span>, max=A[n-<span class="number">1</span>],right[n-<span class="number">1</span>]=A[n-<span class="number">1</span>];i&gt;=<span class="number">0</span>;i--){</div><div class="line">          <span class="keyword">if</span>(A[i]&gt;max){max=A[i]; right[i]=max;}</div><div class="line">          <span class="keyword">else</span> right[i]=max;</div><div class="line">      }</div><div class="line">      <span class="keyword">for</span>(i =<span class="number">1</span>;i&lt;n-<span class="number">1</span>;i++){</div><div class="line">          <span class="keyword">int</span> tmp= <span class="number">1</span> * (Math.min(left[i],right[i])-A[i]);</div><div class="line">          <span class="keyword">if</span>(tmp!=<span class="number">0</span>) vol+=tmp;</div><div class="line">      }</div><div class="line">      <span class="keyword">return</span> vol;</div><div class="line">  }</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fnettwerkmusicgroup%2Fthe-paper-kites-bloom-bonus&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Container_With_Most_Water">Container With Most Water</h2>
<blockquote>
<p>Given n non-negative integers a1, a2, …, an, where each re]]>
    </summary>
    
      <category term="Sort" scheme="sunbingjie.tk/tags/Sort/"/>
    
      <category term="Array" scheme="sunbingjie.tk/tags/Array/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Valid Palindrome, Palindrome Number, Scramble String, Reverse Binary, Interleaving String]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.14-2/"/>
    <id>sunbingjie.tk/2015/02/25/1.14-2/</id>
    <published>2015-02-26T03:09:14.000Z</published>
    <updated>2015-02-26T03:09:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Valid_Palindrome">Valid Palindrome</h2>
<blockquote>
<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.<br>For example,<br>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.<br>Note:<br>Have you consider that the string might be empty? This is a good question to ask during an interview.<br>For the purpose of this problem, we define empty string as valid palindrome.</p>
</blockquote>
<li>Only count numeric and alphabetical, ignore cases</li>

<li>Empty String count as palindrome</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span>(String s) {</div><div class="line">           <span class="keyword">if</span>(s==<span class="keyword">null</span>||s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">           s=s.toUpperCase();</div><div class="line">           <span class="keyword">int</span> l=<span class="number">0</span>, r=s.length()-<span class="number">1</span>;</div><div class="line">           <span class="keyword">while</span>(l&lt;r){</div><div class="line">               Character tmpl=s.charAt(l), tmpr=s.charAt(r);</div><div class="line">               <span class="keyword">if</span>(!(tmpl&gt;=<span class="string">'0'</span>&& tmpl&lt;=<span class="string">'9'</span>||tmpl&gt;=<span class="string">'A'</span>&&tmpl&lt;=<span class="string">'Z'</span>)) {l++; <span class="keyword">continue</span>;}</div><div class="line">               <span class="keyword">else</span> <span class="keyword">if</span>(!(tmpr&gt;=<span class="string">'0'</span>&& tmpr&lt;=<span class="string">'9'</span>||tmpr&gt;=<span class="string">'A'</span>&&tmpr&lt;=<span class="string">'Z'</span>)) {r--;<span class="keyword">continue</span>;}</div><div class="line">               </div><div class="line">               <span class="keyword">else</span>{</div><div class="line">                   <span class="keyword">if</span>(tmpl.equals(tmpr)){l++;r--;}</div><div class="line">                   <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">               }          </div><div class="line">           }</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       }</div></pre></td></tr></table></figure>

<h2 id="Palindrome_Number">Palindrome Number</h2>
<blockquote>
<p>Determine whether an integer is a palindrome. Do this without extra space.<br>Could negative integers be palindromes? (ie, -1)<br>If you are thinking of converting the integer to string, note the restriction of using extra space.<br>You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow. How would you handle such case?<br>There is a more generic way of solving this problem.</p>
</blockquote>
<h3 id="Solution">Solution</h3>
<p>refer my solution to reverse integer.</p>
<li>reverse the number. If the number is the same as its reversed, then it must be a palindrome.</li>

<li>negative integers as non-palindromes.</li>

<p>Even thought this passed OJ, didn’t deal with overflow issues.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span>(<span class="keyword">int</span> x) {</div><div class="line">     <span class="keyword">int</span> res=<span class="number">0</span>,orig=x;</div><div class="line">     <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     <span class="keyword">while</span>(x!=<span class="number">0</span>){</div><div class="line">         res=res*<span class="number">10</span>+x%<span class="number">10</span>;</div><div class="line">         x=x/<span class="number">10</span>;</div><div class="line">     } </div><div class="line">     <span class="keyword">return</span> res==orig ? <span class="keyword">true</span>:<span class="keyword">false</span>;</div><div class="line">     </div><div class="line"> }</div></pre></td></tr></table></figure>

<h3 id="Another_Solution"><a href="http://leetcode.com/2012/01/palindrome-number.html" target="_blank" rel="external">Another Solution</a></h3>
<p>First, compare the first and last digit. If they are not the same, it must not be a palindrome. If they are the same, chop off one digit from both ends and continue until you have no digits left, which you conclude that it must be a palindrome.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome2</span>(<span class="keyword">int</span> x) {</div><div class="line">          <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">          <span class="keyword">int</span> div = <span class="number">1</span>;</div><div class="line">          <span class="keyword">while</span> (x / div &gt;= <span class="number">10</span>) {</div><div class="line">            div *= <span class="number">10</span>;</div><div class="line">          }        </div><div class="line">          <span class="keyword">while</span> (x != <span class="number">0</span>) {</div><div class="line">            <span class="keyword">int</span> l = x / div;</div><div class="line">            <span class="keyword">int</span> r = x % <span class="number">10</span>;</div><div class="line">            <span class="keyword">if</span> (l != r) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            x = (x % div) / <span class="number">10</span>;</div><div class="line">            div /= <span class="number">100</span>;</div><div class="line">          }</div><div class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div></pre></td></tr></table></figure>

<h2 id="Scramble_String">Scramble String</h2>
<blockquote>
<p>Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.<br>Below is one possible representation of s1 = “great”:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    great</div><div class="line">   /    <span class="command">\</span></div><div class="line">  gr    eat</div><div class="line"> / <span class="command">\ </span>   /  <span class="command">\</span></div><div class="line">g   r  e   at</div><div class="line">           / <span class="command">\</span></div><div class="line">          a   t</div></pre></td></tr></table></figure>


<p>To scramble the string, we may choose any non-leaf node and swap its two children.<br>For example, if we choose the node “gr” and swap its two children, it produces a scrambled string “rgeat”.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    rgeat</div><div class="line">   /    <span class="command">\</span></div><div class="line">  rg    eat</div><div class="line"> / <span class="command">\ </span>   /  <span class="command">\</span></div><div class="line">r   g  e   at</div><div class="line">           / <span class="command">\</span></div><div class="line">          a   t</div></pre></td></tr></table></figure>


<p>We say that “rgeat” is a scrambled string of “great”.<br>Similarly, if we continue to swap the children of nodes “eat” and “at”, it produces a scrambled string “rgtae”.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    rgtae</div><div class="line">   /    <span class="command">\</span></div><div class="line">  rg    tae</div><div class="line"> / <span class="command">\ </span>   /  <span class="command">\</span></div><div class="line">r   g  ta  e</div><div class="line">       / <span class="command">\</span></div><div class="line">      t   a</div></pre></td></tr></table></figure>


<p>We say that “rgtae” is a scrambled string of “great”.<br>Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.</p>
<h3 id="Iterative_Solution">Iterative Solution</h3>
<p>If string s1 and s2 are scramble strings, there must be a point(i) that breaks s1 to two parts s11, s12, and a point(l-i) that breaks s2 to two parts, s21, s22, and isScramble(s11, s21) &amp;&amp; isScramble(s12, s22) is true, or isScramble(s11, s22) &amp;&amp; isScramble(s12, s21) is true.</p>
<p>Cases to consider to avoid LTE:</p>
<li>If the lengths of two strings are different, they can’t be scramble.</li>

<li>If the characters in two strings are different, they can’t be scramble either.</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isScramble</span>(String s1, String s2) {</div><div class="line">       <span class="comment">//check length</span></div><div class="line">       <span class="keyword">if</span>(s1.length()!=s2.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       <span class="keyword">int</span> i=<span class="number">0</span>;<span class="keyword">int</span> L = s1.length();</div><div class="line">       <span class="keyword">if</span>(s1.equals(s2)) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   </div><div class="line">         <span class="comment">// check letters</span></div><div class="line">         <span class="keyword">int</span>[] count=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</div><div class="line">         <span class="keyword">for</span>(;i&lt;L;i++){</div><div class="line">           count[s1.charAt(i)-<span class="string">'a'</span>]++;</div><div class="line">           count[s2.charAt(i)-<span class="string">'a'</span>]--;</div><div class="line">         }</div><div class="line">         <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++){</div><div class="line">           <span class="keyword">if</span>(count[i]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">         }</div><div class="line">  </div><div class="line">       <span class="comment">//check scramble, starting from 1</span></div><div class="line">       <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;L;i++){</div><div class="line">         String s11=s1.substring(<span class="number">0</span>, i);</div><div class="line">         String s12=s1.substring(i);</div><div class="line">         String s21=s2.substring(<span class="number">0</span>,i);</div><div class="line">         String s22=s2.substring(i);</div><div class="line">         <span class="keyword">if</span>(isScramble(s11,s21)&&isScramble(s12,s22)) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">         <span class="keyword">else</span> {</div><div class="line">           s21=s2.substring(<span class="number">0</span>,L-i);</div><div class="line">           s22=s2.substring(L-i);</div><div class="line">           <span class="keyword">if</span>(isScramble(s11,s22)&&isScramble(s12,s21)) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">         }</div><div class="line">       }<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     }</div></pre></td></tr></table></figure>

<h3 id="DP_Solution"><a href="http://blog.csdn.net/linhuanmars/article/details/24506703" target="_blank" rel="external">DP Solution</a></h3>
<li>t[i][j][len]=1 means that two substrings of length k, one starts from i of string s1, another one starts from j of string s2, are scramble</li>

<li>we are looking for t[0][0][L]</li>

<li>given a len, we can cut the substring in len-1 ways, if one of them proves to be scramble then t[i][j][k]=true</li>

<li>Changing Rule: t[i][j][k] &amp;&amp; t[i+k][j+k][Len-k] || t[i][j+Len-k][k] &amp;&amp; t[i+k][j][Len-k]</li>

<li>Time is O(n^4), space is O(n^3).</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isScramble</span>(String s1, String s2) {</div><div class="line">     <span class="keyword">if</span>(s1.length()!=s2.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     <span class="keyword">if</span>(s1.equals(s2)) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">     <span class="keyword">int</span> L=s1.length();</div><div class="line">     <span class="keyword">boolean</span> [][][] t=<span class="keyword">new</span> <span class="keyword">boolean</span>[L][L][L+<span class="number">1</span>];</div><div class="line">     <span class="comment">//init base value</span></div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L;i++){</div><div class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;L;j++){</div><div class="line">             t[i][j][<span class="number">1</span>] = s1.charAt(i)==s2.charAt(j);</div><div class="line">         }</div><div class="line">     }</div><div class="line">     <span class="comment">//calculate the whole table</span></div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">2</span>;len&lt;=L;len++){</div><div class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L-len+<span class="number">1</span>;i++){</div><div class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;L-len+<span class="number">1</span>;j++){</div><div class="line">                 <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;len;k++){</div><div class="line">                   <span class="comment">//等号左右两边只要有一个是1就行了</span></div><div class="line">                    t[i][j][len] |= (t[i][j][k] &&  t[i+k][j+k][len-k] || t[i][j+len-k][k] && t[i+k][j][len-k]) ;</div><div class="line">                     </div><div class="line">                     }</div><div class="line">                 }</div><div class="line">             }</div><div class="line">         }</div><div class="line">    <span class="comment">//return the last value</span></div><div class="line">    <span class="keyword">return</span> t[<span class="number">0</span>][<span class="number">0</span>][L];</div><div class="line">    }</div></pre></td></tr></table></figure>

<h2 id="Reverse_Binary">Reverse Binary</h2>
<p>1) 1010-&gt;0101 1111-&gt;0000</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String <span class="title">ReverseBinary2</span>(<span class="keyword">int</span> d){</div><div class="line">    <span class="keyword">int</span> n=Integer.toBinaryString(d).length();</div><div class="line">    String res=<span class="string">""</span>;</div><div class="line">    System.out.println(<span class="string">" d "</span>+d);</div><div class="line">    <span class="keyword">while</span>(d!=<span class="number">0</span>){</div><div class="line">         <span class="keyword">int</span> tmp = <span class="number">1</span>-d & <span class="number">0x01</span>;</div><div class="line">         System.out.println(<span class="string">" d "</span>+Integer.toBinaryString(d) +<span class="string">" tmp "</span>+tmp);</div><div class="line">         res=tmp+res;</div><div class="line">         d &gt;&gt;= <span class="number">1</span>;</div><div class="line">         System.out.println(<span class="string">" d: "</span>+d+ <span class="string">" b "</span>+Integer.toBinaryString(d));</div><div class="line">    }</div><div class="line">    System.out.println(res);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">  }</div></pre></td></tr></table></figure>

<p>2) 1100-&gt;0011 1111-&gt;1111</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String <span class="title">ReverseBinary</span>(<span class="keyword">int</span> d){</div><div class="line">    <span class="keyword">int</span> n=Integer.toBinaryString(d).length();</div><div class="line">    StringBuffer sb=<span class="keyword">new</span> StringBuffer();</div><div class="line">    System.out.println(<span class="string">" d "</span>+d);</div><div class="line">    <span class="keyword">while</span>(d!=<span class="number">0</span>){</div><div class="line">         sb.append(d ^ <span class="number">0x01</span>);</div><div class="line">         System.out.println(<span class="string">" d "</span>+d+<span class="string">" sb "</span>+sb+ <span class="string">" "</span>+<span class="number">0x01</span>);</div><div class="line">         d &gt;&gt;= <span class="number">1</span>;</div><div class="line">         System.out.println(<span class="string">" d: "</span>+d+ <span class="string">" b "</span>+Integer.toBinaryString(d));</div><div class="line">    }</div><div class="line">    String s=sb.toString();</div><div class="line">    System.out.println(<span class="string">" s: "</span>+s);</div><div class="line">    String res=Integer.valueOf(s, <span class="number">2</span>).toString();</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">  }</div></pre></td></tr></table></figure>

<h2 id="Interleaving_String">Interleaving String</h2>
<blockquote>
<p>Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.<br>For example,<br>Given:<br>s1 = “aabcc”,<br>s2 = “dbbca”,<br>When s3 = “aadbbcbcac”, return true.<br>When s3 = “aadbbbaccc”, return false.</p>
</blockquote>
<h3 id="Recursive_Solution">Recursive Solution</h3>
<p>Three pointers, four cases:</p>
<li>char at p3 equals to both p2, p1. either result could be true</li>

<li>char at p3 only equals to p2, increment these two pointers. If one of p1, p2 reached its length, just compare the rest substring</li>

<li>vice versa</li>

<li>char at p3 equals to none, break and return false</li>

<p>This solution is LTE, as expected…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterleave</span>(String s1, String s2, String s3) {</div><div class="line">     <span class="keyword">if</span>(s1.length()+s2.length()!=s3.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     <span class="keyword">return</span> rec(s1,<span class="number">0</span>,s2,<span class="number">0</span>,s3,<span class="number">0</span>); </div><div class="line">     }</div><div class="line">   </div><div class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">rec</span>(String s1, <span class="keyword">int</span> p1, String s2, <span class="keyword">int</span> p2, String s3, <span class="keyword">int</span> p3){</div><div class="line">       <span class="keyword">if</span>(p3==s3.length()) <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">     <span class="keyword">if</span>(p2==s2.length()) <span class="keyword">return</span> s1.substring(p1).equals(s3.substring(p3));</div><div class="line">     <span class="keyword">if</span>(p1==s1.length()) <span class="keyword">return</span> s2.substring(p2).equals(s3.substring(p3));</div><div class="line">     <span class="keyword">if</span>(s3.charAt(p3)==s1.charAt(p1) && s3.charAt(p3)==s2.charAt(p2))</div><div class="line">       <span class="keyword">return</span> rec(s1,p1+<span class="number">1</span>,s2,p2,s3,p3+<span class="number">1</span>) || rec(s1,p1,s2,p2+<span class="number">1</span>,s3,p3+<span class="number">1</span>);</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span>(s3.charAt(p3)==s1.charAt(p1))</div><div class="line">       <span class="keyword">return</span> rec(s1,p1+<span class="number">1</span>,s2,p2,s3,p3+<span class="number">1</span>);</div><div class="line">     <span class="keyword">else</span> <span class="keyword">if</span>(s3.charAt(p3)==s2.charAt(p2))</div><div class="line">       <span class="keyword">return</span> rec(s1,p1,s2,p2+<span class="number">1</span>,s3,p3+<span class="number">1</span>);</div><div class="line">     <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   }</div></pre></td></tr></table></figure>

<h3 id="DP_Solution-1"><a href="http://blog.csdn.net/u011095253/article/details/9248073" target="_blank" rel="external">DP Solution</a></h3>
<p>特么才一辈子都凑不粗来好么…</p>
<li>t[i][j] shows whether using the first i and j elements of s1, s2 can form the first i+j elements of s3.</li>


<li>Initialization: for t[s1+1][s2+1], the first column and row are set by comparing chars to target string, and the previous tuple.</li>


<li>Changing Rule: depends on top and left tuple. Set to true if current char in s1 equals to corresponding char in s3, and previous tuple is true.</li>


<li>Target: t[s1][s2]</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterleave</span>(String s1, String s2, String s3) {</div><div class="line">     <span class="keyword">if</span>(s1.length()+s2.length()!=s3.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     <span class="keyword">boolean</span>[][] t=<span class="keyword">new</span> <span class="keyword">boolean</span>[s1.length()+<span class="number">1</span>][s2.length()+<span class="number">1</span>];</div><div class="line">     t[<span class="number">0</span>][<span class="number">0</span>]=<span class="keyword">true</span>;</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s1.length()+<span class="number">1</span>;i++){</div><div class="line">       t[i][<span class="number">0</span>]= s1.charAt(i-<span class="number">1</span>)==s3.charAt(i-<span class="number">1</span>) && t[i-<span class="number">1</span>][<span class="number">0</span>];</div><div class="line">     }</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s2.length()+<span class="number">1</span>;i++){</div><div class="line">       t[<span class="number">0</span>][i]= s2.charAt(i-<span class="number">1</span>)==s3.charAt(i-<span class="number">1</span>) && t[<span class="number">0</span>][i-<span class="number">1</span>];</div><div class="line">     } </div><div class="line">     <span class="comment">//deduct the whole table </span></div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;s1.length()+<span class="number">1</span>;i++){</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;s2.length()+<span class="number">1</span>;j++){</div><div class="line">         t[i][j]= (t[i-<span class="number">1</span>][j] && s1.charAt(i-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>)) || (t[i][j-<span class="number">1</span>] && s2.charAt(j-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>));</div><div class="line">       }</div><div class="line">     }</div><div class="line">     </div><div class="line">     <span class="keyword">return</span> t[s1.length()][s2.length()]; </div><div class="line">     }</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fprotocolrecordings%2Fbobina-vigel-crunch-official&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Valid_Palindrome">Valid Palindrome</h2>
<blockquote>
<p>Given a string, determine if it is a palindrome, considering only alphanumer]]>
    </summary>
    
      <category term="String" scheme="sunbingjie.tk/tags/String/"/>
    
      <category term="Recursion" scheme="sunbingjie.tk/tags/Recursion/"/>
    
      <category term="DP" scheme="sunbingjie.tk/tags/DP/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Multiply Strings, Implement strStr(), Reverse Words in a String, String to Integer (atoi)]]></title>
    <link href="sunbingjie.tk/2015/02/25/1.10/"/>
    <id>sunbingjie.tk/2015/02/25/1.10/</id>
    <published>2015-02-26T03:07:36.000Z</published>
    <updated>2015-02-26T03:07:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Multiply_Strings">Multiply Strings</h2>
<blockquote>
<p>Multiply Strings<br>Given two numbers represented as strings, return multiplication of the numbers as a string.<br>Note: The numbers can be arbitrarily large and are non-negative.</p>
</blockquote>
<h3 id="First_Solution">First Solution</h3>
<li>reverse two input strings, so index and digits are the same</li>

<li>create a tmp int[] to store the additions of two digits multiply results</li>

<li>add up the array, while inserting into a stringbuilder</li>

<li>delete zeros in the beginning</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"> <span class="keyword">public</span> String <span class="title">multiply</span>(String num1, String num2) {</div><div class="line"> num1=<span class="keyword">new</span> StringBuilder(num1).reverse().toString();</div><div class="line"> num2=<span class="keyword">new</span> StringBuilder(num2).reverse().toString();</div><div class="line"> <span class="keyword">int</span>[] tmp= <span class="keyword">new</span> <span class="keyword">int</span>[num1.length()+num2.length()];</div><div class="line"> StringBuilder res=<span class="keyword">new</span> StringBuilder();</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; num1.length();i++){</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;num2.length();j++){</div><div class="line">     tmp[i+j]+=(num1.charAt(i)-<span class="string">'0'</span>)*(num2.charAt(j)-<span class="string">'0'</span>);</div><div class="line">   }</div><div class="line"> }</div><div class="line"> </div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tmp.length;i++){</div><div class="line">   <span class="keyword">int</span> carries=<span class="number">0</span>, num=<span class="number">0</span>;</div><div class="line">   num=tmp[i]%<span class="number">10</span>;</div><div class="line">   carries=tmp[i]/<span class="number">10</span>;</div><div class="line">   res.insert(<span class="number">0</span>, num);</div><div class="line">   <span class="keyword">if</span>(i!=tmp.length-<span class="number">1</span>){tmp[i+<span class="number">1</span>]+=carries;}</div><div class="line"> }</div><div class="line"> </div><div class="line"> <span class="keyword">while</span>(res.length()&gt;<span class="number">1</span>&&res.charAt(<span class="number">0</span>)==<span class="string">'0'</span>){res.deleteCharAt(<span class="number">0</span>);}</div><div class="line"> <span class="keyword">return</span> res.toString();</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Second_Solution">Second Solution</h3>
<p>Do it reversly, same process:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> String <span class="title">multiply</span>(String num1, String num2) {</div><div class="line">  <span class="keyword">int</span>[] tmp= <span class="keyword">new</span> <span class="keyword">int</span>[num1.length()+num2.length()];</div><div class="line">  StringBuilder res=<span class="keyword">new</span> StringBuilder();</div><div class="line">  <span class="keyword">int</span> j=<span class="number">0</span>,i,num,carries=<span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>( i = num1.length()-<span class="number">1</span>; i&gt;=<span class="number">0</span> ;i--){</div><div class="line">      carries=<span class="number">0</span>; num=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>( j = num2.length()-<span class="number">1</span>; j&gt;=<span class="number">0</span>;j--){        </div><div class="line">      num=(num1.charAt(i)-<span class="string">'0'</span>)*(num2.charAt(j)-<span class="string">'0'</span>)+tmp[i+j+<span class="number">1</span>]+carries;</div><div class="line">      tmp[i+j+<span class="number">1</span>]=num%<span class="number">10</span>;</div><div class="line">      carries=num/<span class="number">10</span>;</div><div class="line">    }</div><div class="line">    tmp[i+j+<span class="number">1</span>]=carries;</div><div class="line">  }</div><div class="line">  i=<span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(i&lt;tmp.length-<span class="number">1</span>&&tmp[i]==<span class="number">0</span>){i++;}</div><div class="line">  <span class="keyword">while</span>(i&lt;tmp.length){res.append(tmp[i++]);}</div><div class="line">  <span class="keyword">return</span> res.toString();</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Implement_strStr()">Implement strStr()</h2>
<blockquote>
<p>Implement strStr().<br>Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.<br>Update (2014-11-02):<br>The signature of the function had been updated to return the index instead of the pointer. If you still see your function signature returns a char * or String, please click the reload button to reset your code definition.</p>
</blockquote>
<h3 id="Naive_Solution">Naive Solution</h3>
<p>Two pointers:</p>
<li>i: from 0 to n-m, check each substring(i,i+m) equals to needle</li>

<li>j: from i to m+i-1, break if non-equal character found</li><br><li>If j=m+i after some round, then we found a substring(i, i+m) matches the needle.</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span>(String haystack, String needle) </div><div class="line">  {  </div><div class="line">    <span class="keyword">int</span> n = haystack.length();  </div><div class="line">    <span class="keyword">int</span> m = needle.length(); </div><div class="line">    <span class="comment">//if haystack empty but needle not</span></div><div class="line">    <span class="keyword">if</span> (n==<span class="number">0</span> && m!=<span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    <span class="comment">//special case </span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">0</span>||m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span>{</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - m+<span class="number">1</span>; i++)  </div><div class="line">      {   <span class="keyword">int</span> j=i;</div><div class="line">        <span class="keyword">for</span> (; j &lt; m+i; j++)  </div><div class="line">        {  </div><div class="line">          <span class="keyword">if</span> (needle.charAt(j-i) != haystack.charAt(j)) <span class="keyword">break</span>;  </div><div class="line">        }  </div><div class="line">        <span class="keyword">if</span> (j == m+i) <span class="keyword">return</span>  i;</div><div class="line">      }  </div><div class="line">      <span class="keyword">return</span> -<span class="number">1</span>;  }</div><div class="line">  }</div></pre></td></tr></table></figure>

<p>More Consice:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span>(String haystack, String needle) {</div><div class="line">       <span class="keyword">if</span>(haystack == <span class="keyword">null</span> || needle == <span class="keyword">null</span>) {</div><div class="line">           <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">       }</div><div class="line">       <span class="keyword">int</span> i, j;</div><div class="line">       <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; haystack.length() - needle.length() + <span class="number">1</span>; i++) {</div><div class="line">           <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; needle.length(); j++) {</div><div class="line">               <span class="keyword">if</span>(haystack.charAt(i + j) != needle.charAt(j)) {</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               }</div><div class="line">           }</div><div class="line">           <span class="keyword">if</span>(j == needle.length()) {</div><div class="line">               <span class="keyword">return</span> i;</div><div class="line">           }</div><div class="line">       }</div><div class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">   }</div></pre></td></tr></table></figure>

<p><a href="http://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="external">KMP</a> is another solution.</p>
<hr>
<h2 id="Reverse_Words_in_a_String">Reverse Words in a String</h2>
<blockquote>
<p>Given an input string, reverse the string word by word.<br>For example,<br>Given s = “the sky is blue”,<br>return “blue is sky the”.<br>Clarification:<br>What constitutes a word?<br>A sequence of non-space characters constitutes a word.<br>Could the input string contain leading or trailing spaces?<br>Yes. However, your reversed string should not contain leading or trailing spaces.<br>How about multiple spaces between two words?<br>Reduce them to a single space in the reversed string.</p>
</blockquote>
<h3 id="Correct_Solution:">Correct Solution:</h3>
<p>First, split words into array by spaces. Then from last element in array, append to stringBuilder if not space, add one space after that element in the new string. At last, get the substring from 0 to sb.length()-1 to delete the ending space.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String <span class="title">reverseWords</span>(String s) {</div><div class="line">  <span class="keyword">if</span>(s==<span class="keyword">null</span>||s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">  String[] words=s.split(<span class="string">" "</span>);</div><div class="line">  <span class="keyword">int</span> n=words.length;</div><div class="line">  StringBuilder sb=<span class="keyword">new</span> StringBuilder();</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">1</span>; i&gt;=<span class="number">0</span>;i--){</div><div class="line">    <span class="keyword">if</span>(!words[i].equals(<span class="string">""</span>)){</div><div class="line">      sb.append(words[i]).append(<span class="string">" "</span>);}</div><div class="line">  } <span class="keyword">return</span> sb.length() == <span class="number">0</span> ? <span class="string">""</span> : sb.substring(<span class="number">0</span>, sb.length() - <span class="number">1</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="String_to_Integer_(atoi)">String to Integer (atoi)</h2>
<blockquote>
<p>Implement atoi to convert a string to an integer.<br>Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.<br>Notes: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.</p>
</blockquote>
<h3 id="Naive_Sulotion">Naive Sulotion</h3>
<li>Case 1: general case, given string is a valid input, convert to int directly</li>

<li>Case 2: input string is null or all blank, return 0;</li>

<li>Case 3: sign of number(+/-, default as +)</li>

<li>Case 4: overflow</li>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">atoi</span>(String str){</div><div class="line">    <span class="keyword">if</span>(str==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="comment">//remove spaces at beginning and end</span></div><div class="line">    str=str.trim();</div><div class="line">    <span class="keyword">int</span> n=str.length(),i=<span class="number">0</span>;</div><div class="line">    <span class="comment">//use long to store result</span></div><div class="line">    <span class="keyword">long</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> sign = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(str.charAt(i)==<span class="string">'+'</span>) {sign=<span class="number">1</span>;i++;}</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(str.charAt(i)==<span class="string">'-'</span>) {sign=-<span class="number">1</span>;i++;}</div><div class="line">    <span class="keyword">for</span>(;i&lt;n;i++){</div><div class="line">      <span class="keyword">char</span> tmp=str.charAt(i);</div><div class="line">      <span class="keyword">if</span>(tmp&gt;<span class="string">'9'</span>||tmp&lt;<span class="string">'0'</span>||tmp==<span class="string">' '</span>) <span class="keyword">break</span>;</div><div class="line">      res=res*<span class="number">10</span>+(tmp-<span class="string">'0'</span>);</div><div class="line">      <span class="keyword">if</span>(res&gt;Integer.MAX_VALUE) <span class="keyword">return</span> sign==<span class="number">1</span> ? Integer.MAX_VALUE: Integer.MIN_VALUE;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)res*sign;</div><div class="line">  }</div></pre></td></tr></table></figure>

<h3 id="An_alternative_solution">An alternative solution</h3>
<p>without using long, is to use the following during loop:</p>
<li>Integer.MAX_VALUE/10 &lt; res;</li>

<p>res*10 will become bigger than MAX</p>
<li>Integer.MAX_VALUE/10 == res &amp;&amp; Integer.MAX_VALUE%10 &lt;(str.charAt(i) - ‘0’)</li>

<p>compare last digit when res*10=MAX</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">atoi</span>(String str){</div><div class="line">    <span class="keyword">if</span>(str==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    str=str.trim();</div><div class="line">    <span class="keyword">int</span> n=str.length(),i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> sign = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(str.charAt(i)==<span class="string">'+'</span>) {sign=<span class="number">1</span>;i++;}</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(str.charAt(i)==<span class="string">'-'</span>) {sign=-<span class="number">1</span>;i++;}</div><div class="line">    <span class="keyword">for</span>(;i&lt;n;i++){</div><div class="line">      <span class="keyword">char</span> tmp=str.charAt(i);</div><div class="line">      <span class="keyword">if</span>(tmp&gt;<span class="string">'9'</span>||tmp&lt;<span class="string">'0'</span>||tmp==<span class="string">' '</span>) <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">if</span>(Integer.MAX_VALUE/<span class="number">10</span> &lt; res || (Integer.MAX_VALUE/<span class="number">10</span> == res && Integer.MAX_VALUE%<span class="number">10</span> &lt;(str.charAt(i) - <span class="string">'0'</span>)))</div><div class="line">      <span class="keyword">return</span> sign==<span class="number">1</span> ? Integer.MAX_VALUE: Integer.MIN_VALUE;    </div><div class="line">      res=res*<span class="number">10</span>+(tmp-<span class="string">'0'</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)res*sign;</div><div class="line">  }</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fmrsuicidesheep%2Flights-motion-aerials&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Multiply_Strings">Multiply Strings</h2>
<blockquote>
<p>Multiply Strings<br>Given two numbers represented as strings, return multipl]]>
    </summary>
    
      <category term="Sort" scheme="sunbingjie.tk/tags/Sort/"/>
    
      <category term="Array" scheme="sunbingjie.tk/tags/Array/"/>
    
      <category term="Math" scheme="sunbingjie.tk/tags/Math/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Add Binary, Add Two Numbers]]></title>
    <link href="sunbingjie.tk/2015/02/25/12.31/"/>
    <id>sunbingjie.tk/2015/02/25/12.31/</id>
    <published>2015-02-26T02:58:41.000Z</published>
    <updated>2015-02-26T02:58:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Add_Binary">Add Binary</h2>
<blockquote>
<p>Given two binary strings, return their sum (also a binary string).<br>For example,<br>a = “11”<br>b = “1”<br>Return “100”.</p>
</blockquote>
<h3 id="Solution">Solution</h3>
<p>Note:Int can be converted to String for manipulation, however, converting String to Int might cause overflow errors.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">public</span> String <span class="title">addBinary</span>(String a, String b) {</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(a==<span class="keyword">null</span>|a.length()==<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> b;</div><div class="line">		<span class="keyword">if</span>(b==<span class="keyword">null</span>|b.length()==<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> a;</div><div class="line"><span class="comment">//switch a,b if a is shorter than b </span></div><div class="line">        <span class="keyword">if</span>(a.length() &lt; b.length()){</div><div class="line">            String temp = a;</div><div class="line">            a = b;</div><div class="line">            b = temp;</div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> m = a.length()-<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> n = b.length()-<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        String rst = <span class="string">""</span>;</div><div class="line">        </div><div class="line"><span class="comment">//Add from last digit</span></div><div class="line">        <span class="keyword">while</span>(n &gt;= <span class="number">0</span>){</div><div class="line">            <span class="keyword">int</span> sum = (<span class="keyword">int</span>)(a.charAt(m) - <span class="string">'0'</span>) + (<span class="keyword">int</span>)(b.charAt(n) - <span class="string">'0'</span>) + res;</div><div class="line">            rst = String.valueOf(sum % <span class="number">2</span>) + rst;</div><div class="line">            res = sum / <span class="number">2</span>;</div><div class="line">            m --;</div><div class="line">            n --;</div><div class="line">        }</div><div class="line"><span class="comment">//Add the longer digits        </span></div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(m &gt;= <span class="number">0</span>){</div><div class="line">            <span class="keyword">int</span> sum = (<span class="keyword">int</span>)(a.charAt(m) - <span class="string">'0'</span>) + res;</div><div class="line">            rst = String.valueOf(sum % <span class="number">2</span>) + rst;</div><div class="line">            res = sum / <span class="number">2</span>;</div><div class="line">            m --;</div><div class="line">        }       </div><div class="line">        </div><div class="line"><span class="comment">//Don't forget the highest digit </span></div><div class="line">        <span class="keyword">if</span> (res == <span class="number">1</span>)</div><div class="line">            rst = <span class="string">"1"</span> + rst;</div><div class="line">        <span class="keyword">return</span> rst;</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Add_Two_Numbers">Add Two Numbers</h2>
<blockquote>
<p>You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.<br>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<p>We don’t have to compare the length of two lists an match digits since we are given reversed order. So just add each pair and the rest, pay attention to the last carries.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span>(ListNode l1, ListNode l2) {</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span> && l2==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        ListNode head=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode cur=head;</div><div class="line">        <span class="keyword">int</span> carries=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span>&&l2!=<span class="keyword">null</span>){</div><div class="line">            <span class="keyword">int</span> sum=l1.val+l2.val+carries;</div><div class="line">            carries=sum/<span class="number">10</span>;</div><div class="line">            ListNode n=<span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</div><div class="line">            cur.next=n;</div><div class="line">            </div><div class="line">            l1=l1.next;</div><div class="line">            l2=l2.next;</div><div class="line">            cur=cur.next; </div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span>){</div><div class="line">            <span class="keyword">int</span> sum=carries+l1.val;</div><div class="line">            cur.next=<span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</div><div class="line">            carries=sum/<span class="number">10</span>;</div><div class="line">            cur=cur.next;</div><div class="line">            l1=l1.next;</div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(l2!=<span class="keyword">null</span>){</div><div class="line">            <span class="keyword">int</span> sum=carries+l2.val;</div><div class="line">            cur.next=<span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</div><div class="line">            carries=sum/<span class="number">10</span>;</div><div class="line">            cur=cur.next;</div><div class="line">            l2=l2.next;</div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(carries!=<span class="number">0</span>){</div><div class="line">            cur.next=<span class="keyword">new</span> ListNode(carries%<span class="number">10</span>);</div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> head.next;</div><div class="line">           }</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Flabyrinth-ear%2Furchin&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Add_Binary">Add Binary</h2>
<blockquote>
<p>Given two binary strings, return their sum (also a binary string).<br>For example,<br>a ]]>
    </summary>
    
      <category term="Array" scheme="sunbingjie.tk/tags/Array/"/>
    
      <category term="LinkedList" scheme="sunbingjie.tk/tags/LinkedList/"/>
    
      <category term="刷题" scheme="sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
</feed>
