<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Cici's Blog]]></title>
  
  <link href="//atom.xml" rel="self"/>
  <link href="http://sunbingjie.tk/"/>
  <updated>2015-09-23T21:06:57.651Z</updated>
  <id>http://sunbingjie.tk/</id>
  
  <author>
    <name><![CDATA[Cici Sun]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Lowest Common Ancestor of a Binary Search Tree, Lowest Common Ancestor of a Binary Tree, Invert Binary Tree, Kth Smallest Element in a BST, Binary Tree Right Side View, Count Complete Tree Nodes]]></title>
    <link href="http://sunbingjie.tk/2015/09/23/9.16/"/>
    <id>http://sunbingjie.tk/2015/09/23/9.16/</id>
    <published>2015-09-23T21:06:19.000Z</published>
    <updated>2015-09-23T21:06:19.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Lowest_Common_Ancestor_of_a_Binary_Search_Tree">Lowest Common Ancestor of a Binary Search Tree</h2>
<blockquote>
<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.<br>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">     _______6______</div><div class="line">    /              <span class="command">\</span></div><div class="line"> ___2__          ___8__</div><div class="line">/      <span class="command">\ </span>       /      <span class="command">\</span></div><div class="line">0      _4       7       9</div><div class="line">      /  <span class="command">\</span></div><div class="line">      3   5</div></pre></td></tr></table></figure>

<p>For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.</p>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<ul>
<li>As long as both p and q are in the same subtree (meaning their values are both smaller or both larger than root’s), move down current node, walks straight from the root to the LCA</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span>(TreeNode root, TreeNode p, TreeNode q) {</div><div class="line">    <span class="keyword">while</span>((p.val-root.val) * (q.val-root.val) &gt; <span class="number">0</span>){</div><div class="line">        root = p.val &gt; root.val? root.right : root.left;</div><div class="line">    }   </div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Lowest_Common_Ancestor_of_a_Binary_Tree">Lowest Common Ancestor of a Binary Tree</h2>
<blockquote>
<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.<br>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">     _______3______</div><div class="line">    /              <span class="command">\</span></div><div class="line"> ___5__          ___1__</div><div class="line">/      <span class="command">\ </span>       /      <span class="command">\</span></div><div class="line">6      _2       0       8</div><div class="line">      /  <span class="command">\</span></div><div class="line">      7   4</div></pre></td></tr></table></figure>

<p>For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.</p>
<h3 id="Solution-1">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span>(TreeNode root, TreeNode p, TreeNode q) {</div><div class="line">    <span class="comment">//if q/p found, return the node, if reached null, return null</span></div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span> || root==q || root==p) <span class="keyword">return</span> root;</div><div class="line">    TreeNode left= lowestCommonAncestor(root.left, p, q);</div><div class="line">    TreeNode right= lowestCommonAncestor(root.right, p, q);</div><div class="line">    <span class="keyword">return</span> (left!=<span class="keyword">null</span> && right!=<span class="keyword">null</span>) ? root : (left!=<span class="keyword">null</span>) ? left : right;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>—</p>
<h2 id="Invert_Binary_Tree">Invert Binary Tree</h2>
<blockquote>
<p>Invert a binary tree.</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">     4</div><div class="line">   /   <span class="command">\</span></div><div class="line">  2     7</div><div class="line"> / <span class="command">\ </span>  / <span class="command">\</span></div><div class="line">1   3 6   9</div><div class="line">to</div><div class="line">     4</div><div class="line">   /   <span class="command">\</span></div><div class="line">  7     2</div><div class="line"> / <span class="command">\ </span>  / <span class="command">\</span></div><div class="line">9   6 3   1</div></pre></td></tr></table></figure>

<p>Trivia:<br>This problem was inspired by this original tweet by Max Howell:<br>Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.</p>
<h3 id="DFS_Solution">DFS Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span>(TreeNode root) {</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span> || (root.left==<span class="keyword">null</span> && root.right==<span class="keyword">null</span>)) <span class="keyword">return</span> root;</div><div class="line">    TreeNode tmp=root.left;</div><div class="line">    root.left=root.right;</div><div class="line">    root.right=tmp;</div><div class="line">    <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>){</div><div class="line">        invertTree(root.left);</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(root.right!=<span class="keyword">null</span>){</div><div class="line">        invertTree(root.right);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Or more concisely</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span>(TreeNode root) {</div><div class="line">   <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   TreeNode tmpright=root.right;</div><div class="line">   root.right=invertTree(root.left);</div><div class="line">   root.left=invertTree(tmpright);</div><div class="line">   <span class="keyword">return</span> root;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="BFS_Solution">BFS Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span>(TreeNode root) {</div><div class="line">   <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   LinkedList&lt;TreeNode&gt; q=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">   q.offer(root);</div><div class="line">   <span class="keyword">while</span>(!q.isEmpty()){</div><div class="line">       TreeNode cur=q.poll();</div><div class="line">       TreeNode tmp=cur.left;</div><div class="line">       cur.left=cur.right;</div><div class="line">       cur.right=tmp;</div><div class="line">       <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>) q.offer(cur.left);</div><div class="line">       <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>) q.offer(cur.right);</div><div class="line">   }</div><div class="line">   <span class="keyword">return</span> root;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Kth_Smallest_Element_in_a_BST">Kth Smallest Element in a BST</h2>
<blockquote>
<p>Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.<br>Note:<br>You may assume k is always valid, 1 ≤ k ≤ BST’s total elements.<br>Follow up:<br>What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?<br>Hint:<br>Try to utilize the property of a BST.<br>What if you could modify the BST node’s structure?<br>The optimal runtime complexity is O(height of BST).</p>
</blockquote>
<h3 id="O(n)_Solution">O(n) Solution</h3>
<ul>
<li>Inorder walk, stop when we get to k elementsm, return the kth. </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span>(TreeNode root, <span class="keyword">int</span> k) {</div><div class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        inorder(root, k, list);</div><div class="line">        <span class="keyword">return</span> list.get(k-<span class="number">1</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorder</span>(TreeNode root, <span class="keyword">int</span> k,  ArrayList&lt;Integer&gt; list){</div><div class="line">    <span class="keyword">if</span>(list.size()&gt;=k) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    inorder(root.left, k, list);</div><div class="line">    list.add(root.val);</div><div class="line">    inorder(root.right, k, list);</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Augmented_Tree_O(logn)_Solution">Augmented Tree O(logn) Solution</h3>
<ul>
<li>Binary search on left subtree count k</li>
<li>If count == k+1 then current root is kth smallest</li>
<li>Otherwise keep looking</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNodeWithCount</span></span>{</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    <span class="keyword">int</span> count;</div><div class="line">    TreeNodeWithCount left;</div><div class="line">    TreeNodeWithCount right;</div><div class="line">    TreeNodeWithCount(<span class="keyword">int</span> x) {val = x; count = <span class="number">1</span>;};</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> TreeNodeWithCount <span class="title">buildtree</span>(TreeNode root){</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        TreeNodeWithCount rootWithCount = <span class="keyword">new</span> TreeNodeWithCount(root.val);</div><div class="line">        rootWithCount.left = buildtree(root.left);</div><div class="line">        rootWithCount.right = buildtree(root.right);</div><div class="line">        <span class="keyword">if</span> (rootWithCount.left != <span class="keyword">null</span>) rootWithCount.count += rootWithCount.left.count;</div><div class="line">        <span class="keyword">if</span> (rootWithCount.right != <span class="keyword">null</span>) rootWithCount.count += rootWithCount.right.count;</div><div class="line">        <span class="keyword">return</span> rootWithCount;</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> TreeNodeWithCount <span class="title">findkthsmallest</span>(TreeNodeWithCount root, <span class="keyword">int</span> k){</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>)  count=root.left.count;</div><div class="line">    <span class="keyword">if</span>(count&gt;=k){</div><div class="line">      <span class="keyword">return</span> findkthsmallest(root.left, k);</div><div class="line">    }</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(count&lt;k-<span class="number">1</span>){</div><div class="line">      <span class="keyword">return</span> findkthsmallest(root.right, k-count-<span class="number">1</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">  }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Binary_Tree_Right_Side_View">Binary Tree Right Side View</h2>
<blockquote>
<p>Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">For</span> example:</div><div class="line"><span class="type">Given</span> the following binary tree,</div><div class="line">   <span class="number">1</span>            &lt;-<span class="comment">--</span></div><div class="line"> /   \</div><div class="line"><span class="number">2</span>     <span class="number">3</span>         &lt;-<span class="comment">--</span></div><div class="line"> \     \</div><div class="line">  <span class="number">5</span>     <span class="number">4</span>       &lt;-<span class="comment">--</span></div><div class="line"><span class="type">You</span> should return [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>].</div></pre></td></tr></table></figure>

<h3 id="Iterative_Solution">Iterative Solution</h3>
<ul>
<li>Reverse BFS,add each layer’s first element to result</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideView</span>(TreeNode root) {</div><div class="line">       List&lt;Integer&gt; res= <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">       <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">       Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">       q.offer(root);</div><div class="line">       <span class="keyword">while</span>(!q.isEmpty()){</div><div class="line">           <span class="keyword">int</span> size = q.size();</div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++){</div><div class="line">               TreeNode cur = q.poll();</div><div class="line">               <span class="keyword">if</span>(i==<span class="number">0</span>){</div><div class="line">                   res.add(cur.val);</div><div class="line">               }</div><div class="line">               <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>){</div><div class="line">                   q.offer(cur.right);</div><div class="line">               }</div><div class="line">               <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>){</div><div class="line">                   q.offer(cur.left);</div><div class="line">               }</div><div class="line">           }</div><div class="line">       }</div><div class="line">       <span class="keyword">return</span> res;</div><div class="line">   }</div></pre></td></tr></table></figure>

<h3 id="Recursive_Solution">Recursive Solution</h3>
<ul>
<li>Each depth of the tree only select one node.</li>
<li>View depth is current size of result list.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideView</span>(TreeNode root) {</div><div class="line">    List&lt;Integer&gt; res= <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">    dfs(res, root, <span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>(List&lt;Integer&gt; res, TreeNode r, <span class="keyword">int</span> level){</div><div class="line">    <span class="keyword">if</span>(r==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(level==res.size()) {</div><div class="line">        res.add(r.val);</div><div class="line">    }</div><div class="line">    dfs(res, r.right, level+<span class="number">1</span>);</div><div class="line">    dfs(res, r.left, level+<span class="number">1</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Count_Complete_Tree_Nodes">Count Complete Tree Nodes</h2>
<blockquote>
<p>Given a complete binary tree, count the number of nodes.<br>Definition of a complete binary tree from Wikipedia:<br>In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<ul>
<li>Use bit manipulation, faster than Math.pow()</li>
<li>Find the leftmost height and rightmost height, if equal just return the full nodes, if not continue to subtrees </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNodes</span>(TreeNode root) {</div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> left = getheight(root.left, <span class="string">"left"</span>);</div><div class="line">    <span class="keyword">int</span> right = getheight(root.right, <span class="string">"right"</span>);</div><div class="line">    <span class="keyword">if</span>(left==right) <span class="keyword">return</span> (<span class="number">2</span>&lt;&lt;left) - <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> + countNodes(root.left) + countNodes(root.right);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getheight</span>(TreeNode root, String s){</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(s.equals(<span class="string">"left"</span>)){</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span> + getheight(root.left, <span class="string">"left"</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">else</span>{</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span> + getheight(root.right, <span class="string">"right"</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>```</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Lowest_Common_Ancestor_of_a_Binary_Search_Tree">Lowest Common Ancestor of a Binary Search Tree</h2>
<blockquote>
<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.<br>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">     _______6______</div><div class="line">    /              <span class="command">\</span></div><div class="line"> ___2__          ___8__</div><div class="line">/      <span class="command">\ </span>       /      <span class="command">\</span></div><div class="line">0      _4       7       9</div><div class="line">      /  <span class="command">\</span></div><div class="line">      3   5</div></pre></td></tr></table></figure>

<p>For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.</p>
]]>
    
    </summary>
    
      <category term="Tree" scheme="http://sunbingjie.tk/tags/Tree/"/>
    
      <category term="DFS" scheme="http://sunbingjie.tk/tags/DFS/"/>
    
      <category term="BFS" scheme="http://sunbingjie.tk/tags/BFS/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clone Graph, Populating Next Right Pointers in Each Node, Populating Next Right Pointers in Each Node II, Word Ladder, Word Ladder II]]></title>
    <link href="http://sunbingjie.tk/2015/09/23/9.15/"/>
    <id>http://sunbingjie.tk/2015/09/23/9.15/</id>
    <published>2015-09-23T21:06:14.000Z</published>
    <updated>2015-09-23T21:06:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Clone_Graph">Clone Graph</h2>
<blockquote>
<p>Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.<br>OJ’s undirected graph serialization:<br>Nodes are labeled uniquely.<br>We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.<br>As an example, consider the serialized graph {0,1,2#1,2#2,2}.<br>The graph has a total of three nodes, and therefore contains three parts as separated by #.<br>First node is labeled as 0. Connect node 0 to both nodes 1 and 2.<br>Second node is labeled as 1. Connect node 1 to node 2.<br>Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.<br>Visually, the graph looks like the following:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   1</div><div class="line">  / <span class="command">\</span></div><div class="line"> /   <span class="command">\</span></div><div class="line">0 --- 2</div><div class="line">     / <span class="command">\</span></div><div class="line">     <span class="command">\_</span>/</div></pre></td></tr></table></figure>

<a id="more"></a>
<h3 id="BFS_Solution">BFS Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> UndirectedGraphNode <span class="title">cloneGraph</span>(UndirectedGraphNode node) {</div><div class="line">       <span class="comment">// use a map to save cloned nodes</span></div><div class="line">       <span class="keyword">if</span>(node==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	HashMap&lt;UndirectedGraphNode, UndirectedGraphNode&gt; map = <span class="keyword">new</span> HashMap&lt;UndirectedGraphNode, UndirectedGraphNode&gt;();</div><div class="line">       LinkedList&lt;UndirectedGraphNode&gt; q = <span class="keyword">new</span> LinkedList&lt;UndirectedGraphNode&gt;();</div><div class="line">       q.offer(node);</div><div class="line">       <span class="comment">// clone the root</span></div><div class="line">       map.put(node, <span class="keyword">new</span> UndirectedGraphNode(node.label));</div><div class="line">       <span class="keyword">while</span>(!q.isEmpty()){</div><div class="line">           UndirectedGraphNode cur = q.poll();</div><div class="line">           <span class="keyword">for</span> (UndirectedGraphNode neighbor : cur.neighbors) {</div><div class="line">               <span class="keyword">if</span>(!map.containsKey(neighbor)){</div><div class="line">                   map.put(neighbor, <span class="keyword">new</span> UndirectedGraphNode(neighbor.label));</div><div class="line">                   q.offer(neighbor);</div><div class="line">               }</div><div class="line">               map.get(cur).neighbors.add(map.get(neighbor));</div><div class="line">           }</div><div class="line">       }</div><div class="line">       <span class="keyword">return</span> map.get(node);</div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Populating_Next_Right_Pointers_in_Each_Node">Populating Next Right Pointers in Each Node</h2>
<blockquote>
<p>Given a binary tree</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">    struct TreeLinkNode {</div><div class="line">      TreeLinkNode *left;</div><div class="line">      TreeLinkNode *right;</div><div class="line">      TreeLinkNode *next;</div><div class="line">    }</div><div class="line">Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be <span class="operator"><span class="keyword">set</span> <span class="keyword">to</span> <span class="literal">NULL</span>.</span></div><div class="line"><span class="keyword">Initially</span>, <span class="keyword">all</span> <span class="keyword">next</span> pointers <span class="keyword">are</span> <span class="keyword">set</span> <span class="keyword">to</span> <span class="literal">NULL</span>.</div><div class="line">Note:</div><div class="line">You may <span class="keyword">only</span> <span class="keyword">use</span> constant extra <span class="keyword">space</span>.</div><div class="line">You may assume that it <span class="keyword">is</span> a perfect <span class="built_in">binary</span> tree (ie, <span class="keyword">all</span> <span class="keyword">leaves</span> <span class="keyword">are</span> <span class="keyword">at</span> the same <span class="keyword">level</span>, <span class="keyword">and</span> every parent has two children).</div><div class="line"><span class="keyword">For</span> example,</div><div class="line">Given the following perfect <span class="built_in">binary</span> tree,</div><div class="line">         <span class="number">1</span></div><div class="line">       /  \</div><div class="line">      <span class="number">2</span>    <span class="number">3</span></div><div class="line">     / \  / \</div><div class="line">    <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span></div><div class="line"><span class="keyword">After</span> calling your <span class="keyword">function</span>, the tree should look <span class="keyword">like</span>:</div><div class="line">         <span class="number">1</span> -&gt; <span class="literal">NULL</span></div><div class="line">       /  \</div><div class="line">      <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="literal">NULL</span></div><div class="line">     / \  / \</div><div class="line">    <span class="number">4</span>-&gt;<span class="number">5</span>-&gt;<span class="number">6</span>-&gt;<span class="number">7</span> -&gt; <span class="literal">NULL</span></div></pre></td></tr></table></figure>

<h3 id="Two_pointer_Solution">Two pointer Solution</h3>
<ul>
<li>cur-keep the start of next level ; last-keep iterating the last level</li>
<li>if last has left child, then child’s next=last.right</li>
<li>if last has no left child, then reached leaf</li>
<li>if last has next, then right child’s next=last.next.left</li>
<li>if last has no next, we reached end of that layer</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span>(TreeLinkNode root) {</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        TreeLinkNode last = root; <span class="comment">//previous level pointer</span></div><div class="line">        TreeLinkNode cur = <span class="keyword">null</span>;<span class="comment">//current level head</span></div><div class="line">        <span class="keyword">while</span>(last!=<span class="keyword">null</span>){</div><div class="line">            <span class="keyword">if</span>(cur==<span class="keyword">null</span>){</div><div class="line">                cur=last.left;<span class="comment">//cur level head-leftmost subtree</span></div><div class="line">            }</div><div class="line">            <span class="keyword">if</span>(last.left!=<span class="keyword">null</span>){<span class="comment">//如果一个子节点是根节点的左子树，那么它的next就是该根节点的右子树</span></div><div class="line">                last.left.next=last.right;</div><div class="line">            }</div><div class="line">            <span class="keyword">else</span>{</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            }</div><div class="line">            <span class="keyword">if</span>(last.next!=<span class="keyword">null</span>){<span class="comment">//如果一个子节点是根节点的右子树，那么它的next就是该根节点next节点的左子树</span></div><div class="line">                last.right.next=last.next.left;</div><div class="line">                last=last.next;</div><div class="line">            }</div><div class="line">            <span class="keyword">else</span>{</div><div class="line">                last=cur;</div><div class="line">                cur=<span class="keyword">null</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Populating_Next_Right_Pointers_in_Each_Node_II">Populating Next Right Pointers in Each Node II</h2>
<blockquote>
<p>Follow up for problem “Populating Next Right Pointers in Each Node”.<br>What if the given tree could be any binary tree? Would your previous solution still work?<br>Note:<br>You may only use constant extra space.<br>For example,</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Given the following binary tree,</div><div class="line">         <span class="number">1</span></div><div class="line">       <span class="subst">/</span>  <span class="subst">\</span></div><div class="line">      <span class="number">2</span>    <span class="number">3</span></div><div class="line">     <span class="subst">/</span> <span class="subst">\</span>    <span class="subst">\</span></div><div class="line">    <span class="number">4</span>   <span class="number">5</span>    <span class="number">7</span></div><div class="line">After calling your function, the tree should look like:</div><div class="line">         <span class="number">1</span> <span class="subst">-&gt; </span><span class="built_in">NULL</span></div><div class="line">       <span class="subst">/</span>  <span class="subst">\</span></div><div class="line">      <span class="number">2</span> <span class="subst">-&gt; </span><span class="number">3</span> <span class="subst">-&gt; </span><span class="built_in">NULL</span></div><div class="line">     <span class="subst">/</span> <span class="subst">\</span>    <span class="subst">\</span></div><div class="line">    <span class="number">4</span><span class="subst">-&gt; </span><span class="number">5</span> <span class="subst">-&gt; </span><span class="number">7</span> <span class="subst">-&gt; </span><span class="built_in">NULL</span></div></pre></td></tr></table></figure>

<h3 id="Four_Pointer_Solution">Four Pointer <a href="http://blog.csdn.net/linhuanmars/article/details/23499383" target="_blank" rel="external">Solution</a></h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span>(TreeLinkNode root) {</div><div class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    TreeLinkNode lastHead = root; <span class="comment">//previous level head</span></div><div class="line">    TreeLinkNode pre = <span class="keyword">null</span>;<span class="comment">//current level pointer</span></div><div class="line">    TreeLinkNode curHead = <span class="keyword">null</span>;<span class="comment">//current level head</span></div><div class="line">    <span class="keyword">while</span>(lastHead!=<span class="keyword">null</span>)</div><div class="line">    {</div><div class="line">        TreeLinkNode lastCur = lastHead;<span class="comment">//previous level pointer</span></div><div class="line">        <span class="keyword">while</span>(lastCur != <span class="keyword">null</span>)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(lastCur.left!=<span class="keyword">null</span>)</div><div class="line">            {</div><div class="line">                <span class="keyword">if</span>(curHead == <span class="keyword">null</span>)</div><div class="line">                {</div><div class="line">                    curHead = lastCur.left;</div><div class="line">                    pre = curHead;</div><div class="line">                }</div><div class="line">                <span class="keyword">else</span></div><div class="line">                {</div><div class="line">                    pre.next = lastCur.left;</div><div class="line">                    pre = pre.next;</div><div class="line">                }</div><div class="line">            }</div><div class="line">            <span class="keyword">if</span>(lastCur.right!=<span class="keyword">null</span>)</div><div class="line">            {</div><div class="line">                <span class="keyword">if</span>(curHead == <span class="keyword">null</span>)</div><div class="line">                {</div><div class="line">                    curHead = lastCur.right;</div><div class="line">                    pre = curHead;</div><div class="line">                }</div><div class="line">                <span class="keyword">else</span></div><div class="line">                {</div><div class="line">                    pre.next = lastCur.right;</div><div class="line">                    pre = pre.next;</div><div class="line">                }</div><div class="line">            }                </div><div class="line">            lastCur = lastCur.next;</div><div class="line"></div><div class="line">        }</div><div class="line">        lastHead = curHead;</div><div class="line">        curHead = <span class="keyword">null</span>;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Word_Ladder_II">Word Ladder II</h2>
<blockquote>
<p>Word Ladder II My Submissions Question Solution<br>Total Accepted: 31002 Total Submissions: 234902 Difficulty: Hard<br>Given two words (beginWord and endWord), and a dictionary’s word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:<br>Only one letter can be changed at a time<br>Each intermediate word must exist in the word list<br>For example,<br>Given:<br>beginWord = “hit”<br>endWord = “cog”<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”]<br>Return<br>  [<br>    [“hit”,”hot”,”dot”,”dog”,”cog”],<br>    [“hit”,”hot”,”lot”,”log”,”cog”]<br>  ]<br>Note:<br>All words have the same length.<br>All words contain only lowercase alphabetic characters.</p>
</blockquote>
<h3 id="BFS_+_DFS_Solution">BFS + DFS Solution</h3>
<ul>
<li>BFS once to find shortest path, stored all neighbors, and ladder map </li>
<li>DFS to output shortest path, start from end, check each time to see if we are on the shortest path (ladder.get(s) == (ladder.get(end)-1))</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title">findLadders</span>(String beginWord, String endWord, Set&lt;String&gt; wordList) {</div><div class="line">        HashMap&lt;String, List&lt;String&gt;&gt; neighbors = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;();</div><div class="line">        HashMap&lt;String, Integer&gt; ladder = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line">        bfs(beginWord, endWord, wordList, neighbors, ladder);</div><div class="line">        List&lt;String&gt; path=<span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        List&lt;List&lt;String&gt;&gt; res= <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</div><div class="line">        dfs(neighbors, ladder, path, res, endWord, beginWord);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span>( HashMap&lt;String, List&lt;String&gt;&gt; neighbors, HashMap&lt;String, Integer&gt; ladder, List&lt;String&gt; path, List&lt;List&lt;String&gt;&gt; res, String end, String start){</div><div class="line">        path.add(end);</div><div class="line">        <span class="keyword">if</span>(end.equals(start)){</div><div class="line">            Collections.reverse(path);</div><div class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;String&gt;(path));</div><div class="line">            Collections.reverse(path);</div><div class="line">            path.remove(path.size()-<span class="number">1</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        }</div><div class="line">        List&lt;String&gt; parents = neighbors.get(end);</div><div class="line">        <span class="keyword">for</span>(String s : parents){</div><div class="line">            <span class="keyword">if</span>(ladder.get(s) == (ladder.get(end)-<span class="number">1</span>)){</div><div class="line">                dfs(neighbors, ladder, path, res, s, start);</div><div class="line">            }            </div><div class="line">        }</div><div class="line">        path.remove(path.size()-<span class="number">1</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span>(String begin, String end, Set&lt;String&gt; wordlist, HashMap&lt;String, List&lt;String&gt;&gt; neighbors, HashMap&lt;String, Integer&gt; ladder){</div><div class="line">        wordlist.add(begin); wordlist.add(end);</div><div class="line">        LinkedList&lt;String&gt; q = <span class="keyword">new</span> LinkedList&lt;String&gt;();</div><div class="line">        q.offer(begin);</div><div class="line">        ladder.put(begin, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(String s : wordlist){<span class="comment">//create adjacency list for each word</span></div><div class="line">            neighbors.put(s, <span class="keyword">new</span> ArrayList&lt;String&gt;());</div><div class="line">        }</div><div class="line">        <span class="keyword">while</span>(!q.isEmpty()){</div><div class="line">            String cur=q.poll();</div><div class="line">            ArrayList&lt;String&gt; nextlayer = findnext(cur, wordlist);</div><div class="line">            <span class="keyword">for</span>(String next : nextlayer){</div><div class="line">                neighbors.get(cur).add(next);<span class="comment">//add to adjacency list</span></div><div class="line">                <span class="keyword">if</span>(!ladder.containsKey(next)){<span class="comment">//update shortest path count </span></div><div class="line">                    ladder.put(next, ladder.get(cur) + <span class="number">1</span>);</div><div class="line">                    q.offer(next);</div><div class="line">                }</div><div class="line">                </div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title">findnext</span>(String cur, Set&lt;String&gt; wordlist){</div><div class="line">        ArrayList&lt;String&gt; nextlayer = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cur.length();i++){</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">'a'</span>; c&lt;=<span class="string">'z'</span>; c++){</div><div class="line">                <span class="keyword">if</span>(!(cur.charAt(i)==c)){</div><div class="line">                    String next=cur.substring(<span class="number">0</span>,i) + c + cur.substring(i+<span class="number">1</span>);</div><div class="line">                    <span class="keyword">if</span>(wordlist.contains(next)) nextlayer.add(next);</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> nextlayer;</div><div class="line">    }</div></pre></td></tr></table></figure>

<h3 id="Two_End_BFS_Solution">Two End BFS Solution</h3>
<ul>
<li>BFS from two end finds shortest path fast, stored in a map</li>
<li>DFS to output shortest paths</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title">findLadders</span>(String start, String end, Set&lt;String&gt; dict) {</div><div class="line">	<span class="comment">// hash set for both ends</span></div><div class="line">	Set&lt;String&gt; set1 = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">	Set&lt;String&gt; set2 = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line"></div><div class="line">	<span class="comment">// initial words in both ends</span></div><div class="line">	set1.add(start);</div><div class="line">	set2.add(end);</div><div class="line"></div><div class="line">	<span class="comment">// we use a map to help construct the final result</span></div><div class="line">	HashMap&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;();</div><div class="line"></div><div class="line">	<span class="comment">// build the map</span></div><div class="line">	helper(dict, set1, set2, map, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">	List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</div><div class="line">	List&lt;String&gt; sol = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(start));</div><div class="line"></div><div class="line">	<span class="comment">// recursively build the final result</span></div><div class="line">	generateList(start, end, map, sol, res);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> res;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> helper(Set&lt;String&gt; dict, Set&lt;String&gt; set1, Set&lt;String&gt; set2, HashMap&lt;String, List&lt;String&gt;&gt; map, <span class="keyword">boolean</span> flip) {</div><div class="line">	<span class="keyword">if</span> (set1.isEmpty()) {</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (set1.size() &gt; set2.size()) {</div><div class="line">		<span class="keyword">return</span> helper(dict, set2, set1, map, !flip);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// remove words on current both ends from the dict</span></div><div class="line">	dict.removeAll(set1);</div><div class="line">	dict.removeAll(set2);</div><div class="line"></div><div class="line">	<span class="comment">// as we only need the shortest paths</span></div><div class="line">	<span class="comment">// we use a boolean value help early termination</span></div><div class="line">	<span class="keyword">boolean</span> done = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">	<span class="comment">// set for the next level</span></div><div class="line">	Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line"></div><div class="line">	<span class="comment">// for each string in end 1</span></div><div class="line">	<span class="keyword">for</span> (String str : set1) {</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) {</div><div class="line">			<span class="comment">// change one character for every position</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">char</span> ch = <span class="string">'a'</span>; ch &lt;= <span class="string">'z'</span>; ch++) {</div><div class="line">				<span class="keyword">char</span>[] chars = str.toCharArray();</div><div class="line">				chars[i] = ch;</div><div class="line">				String word = <span class="keyword">new</span> String(chars);</div><div class="line">				<span class="comment">// make sure we construct the tree in the correct direction</span></div><div class="line">				String key = flip ? word : str;</div><div class="line">				String val = flip ? str : word;</div><div class="line">				List&lt;String&gt; list = map.containsKey(key) ? map.get(key) : <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">				<span class="keyword">if</span> (set2.contains(word)) {</div><div class="line">					done = <span class="keyword">true</span>;</div><div class="line">					list.add(val);</div><div class="line">					map.put(key, list);</div><div class="line">				} </div><div class="line">				<span class="keyword">if</span> (!done && dict.contains(word)) {</div><div class="line">					set.add(word);</div><div class="line">					list.add(val);</div><div class="line">					map.put(key, list);</div><div class="line">				}</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// early terminate if done is true</span></div><div class="line">	<span class="keyword">return</span> done || helper(dict, set2, set, map, !flip);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> generateList(String start, String end, HashMap&lt;String, List&lt;String&gt;&gt; map, List&lt;String&gt; sol, List&lt;List&lt;String&gt;&gt; res) {</div><div class="line">	<span class="keyword">if</span> (start.equals(end)) {</div><div class="line">		res.add(<span class="keyword">new</span> ArrayList&lt;String&gt;(sol));</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	}</div><div class="line">	<span class="comment">// need this check in case the diff between start and end happens to be one</span></div><div class="line">	<span class="comment">// e.g "a", "c", {"a", "b", "c"}</span></div><div class="line">	<span class="keyword">if</span> (!map.containsKey(start)) {</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	}</div><div class="line">	<span class="keyword">for</span> (String word : map.get(start)) {</div><div class="line">		sol.add(word);</div><div class="line">		generateList(word, end, map, sol, res);</div><div class="line">		sol.remove(sol.size() - <span class="number">1</span>);</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Clone_Graph">Clone Graph</h2>
<blockquote>
<p>Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.<br>OJ’s undirected graph serialization:<br>Nodes are labeled uniquely.<br>We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.<br>As an example, consider the serialized graph {0,1,2#1,2#2,2}.<br>The graph has a total of three nodes, and therefore contains three parts as separated by #.<br>First node is labeled as 0. Connect node 0 to both nodes 1 and 2.<br>Second node is labeled as 1. Connect node 1 to node 2.<br>Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.<br>Visually, the graph looks like the following:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   1</div><div class="line">  / <span class="command">\</span></div><div class="line"> /   <span class="command">\</span></div><div class="line">0 --- 2</div><div class="line">     / <span class="command">\</span></div><div class="line">     <span class="command">\_</span>/</div></pre></td></tr></table></figure>

]]>
    
    </summary>
    
      <category term="Graph" scheme="http://sunbingjie.tk/tags/Graph/"/>
    
      <category term="BFS" scheme="http://sunbingjie.tk/tags/BFS/"/>
    
      <category term="DFS" scheme="http://sunbingjie.tk/tags/DFS/"/>
    
      <category term="Backtracking" scheme="http://sunbingjie.tk/tags/Backtracking/"/>
    
      <category term="LinkedList" scheme="http://sunbingjie.tk/tags/LinkedList/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Path Sum, Path Sum II, Binary Tree Maximum Path Sum, Binary Tree Paths, Sum Root to Leaf Numbers]]></title>
    <link href="http://sunbingjie.tk/2015/09/19/4.11/"/>
    <id>http://sunbingjie.tk/2015/09/19/4.11/</id>
    <published>2015-09-20T02:44:46.000Z</published>
    <updated>2015-09-20T02:44:46.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Path_Sum">Path Sum</h2>
<blockquote>
<p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.<br>For example:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Given the below binary tree and sum = 22,</div><div class="line">              5</div><div class="line">             / <span class="command">\</span></div><div class="line">            4   8</div><div class="line">           /   / <span class="command">\</span></div><div class="line">          11  13  4</div><div class="line">         /  <span class="command">\ </span>     <span class="command">\</span></div><div class="line">        7    2      1</div></pre></td></tr></table></figure>

<p>return true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22.</p>
<a id="more"></a>
<h3 id="Recursive_Solution">Recursive Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span>(TreeNode root, <span class="keyword">int</span> sum) {</div><div class="line">    <span class="keyword">return</span> dfs(root, sum);</div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span>(TreeNode root, <span class="keyword">int</span> sum){</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    sum = sum-root.val;</div><div class="line">    <span class="keyword">if</span>(root.left==<span class="keyword">null</span> && root.right==<span class="keyword">null</span>) <span class="keyword">return</span> sum==<span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> dfs(root.left, sum) || dfs(root.right, sum);</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Iterative_Solution">Iterative Solution</h3>
<ul>
<li>Use two queues to store all possible sum and curnode pairs</li>
<li>when reached a leave, check if the corresponding sum is true</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span>(TreeNode root, <span class="keyword">int</span> sum) {</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    LinkedList&lt;TreeNode&gt; node = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">    LinkedList&lt;Integer&gt; value = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">    node.offer(root);</div><div class="line">    value.offer(root.val);</div><div class="line">    <span class="keyword">while</span>(!node.isEmpty()){</div><div class="line">        TreeNode cur = node.poll();</div><div class="line">        <span class="keyword">int</span> cursum = value.poll();</div><div class="line">        <span class="keyword">if</span>(cur.left==<span class="keyword">null</span> && cur.right==<span class="keyword">null</span> && cursum==sum){</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>) {</div><div class="line">            node.offer(cur.left);</div><div class="line">            value.offer(cursum+cur.left.val);</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>){</div><div class="line">            node.offer(cur.right);</div><div class="line">            value.offer(cursum+cur.right.val);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;   </div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Path_Sum_II">Path Sum II</h2>
<blockquote>
<p>Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given sum.<br>For example:<br>Given the below binary tree and sum = 22,</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">              5</div><div class="line">             / <span class="command">\</span></div><div class="line">            4   8</div><div class="line">           /   / <span class="command">\</span></div><div class="line">          11  13  4</div><div class="line">         /  <span class="command">\ </span>   / <span class="command">\</span></div><div class="line">        7    2  5   1</div><div class="line">return</div><div class="line"><span class="special">[</span></div><div class="line">   <span class="special">[</span>5,4,11,2<span class="special">]</span>,</div><div class="line">   <span class="special">[</span>5,8,4,5<span class="special">]</span></div><div class="line"><span class="special">]</span></div></pre></td></tr></table></figure>

<h3 id="DFS_Solution">DFS Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;LinkedList&lt;Integer&gt;&gt; <span class="title">pathSum</span>(TreeNode root, <span class="keyword">int</span> sum) {</div><div class="line">    ArrayList&lt;LinkedList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;LinkedList&lt;Integer&gt;&gt;();</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">    LinkedList&lt;Integer&gt; pathlist = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">    dfs(root, sum, pathlist, res);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>(TreeNode r, <span class="keyword">int</span> sum, LinkedList&lt;Integer&gt; pathlist, ArrayList&lt;LinkedList&lt;Integer&gt;&gt; res){</div><div class="line">    pathlist.add(r.val);</div><div class="line">    <span class="keyword">int</span> curvalue = sum-r.val;</div><div class="line">    <span class="keyword">if</span>(r.left==<span class="keyword">null</span> && r.right==<span class="keyword">null</span> && curvalue==<span class="number">0</span>) {res.add(<span class="keyword">new</span> LinkedList&lt;Integer&gt;(pathlist));}</div><div class="line">    <span class="keyword">if</span>(r.left!=<span class="keyword">null</span>) dfs(r.left, curvalue, pathlist, res);</div><div class="line">    <span class="keyword">if</span>(r.right!=<span class="keyword">null</span>) dfs(r.right, curvalue, pathlist, res);</div><div class="line">    pathlist.remove(pathlist.size()-<span class="number">1</span>); <span class="comment">//**</span></div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Binary_Tree_Maximum_Path_Sum">Binary Tree Maximum Path Sum</h2>
<blockquote>
<p>Given a binary tree, find the maximum path sum.<br>The path may start and end at any node in the tree.<br>For example:<br>Given the below binary tree,</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">       <span class="number">1</span></div><div class="line">      / \</div><div class="line">     <span class="number">2</span>   <span class="number">3</span></div><div class="line"><span class="keyword">Return</span> <span class="number">6</span>.</div></pre></td></tr></table></figure>

<h3 id="DFS_+_DP_Solution">DFS + DP Solution</h3>
<ul>
<li>Return each time the max single path starting from current r</li>
<li>update maxsofar among single/arc of current r </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPathSum</span>(TreeNode root) {</div><div class="line">    <span class="keyword">int</span>[] maxsofar = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</div><div class="line">    maxsofar[<span class="number">0</span>]= Integer.MIN_VALUE;</div><div class="line">    dfs(root,maxsofar);</div><div class="line">    <span class="keyword">return</span> maxsofar[<span class="number">0</span>];</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span>(TreeNode r, <span class="keyword">int</span>[] maxsofar){</div><div class="line">    <span class="keyword">if</span>(r==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> left = dfs(r.left, maxsofar);</div><div class="line">    <span class="keyword">int</span> right = dfs(r.right, maxsofar);</div><div class="line">    <span class="keyword">int</span> arc = left + right + r.val;</div><div class="line">    <span class="keyword">int</span> single = Math.max(r.val, Math.max(left, right)+r.val);</div><div class="line">    maxsofar[<span class="number">0</span>] = Math.max(maxsofar[<span class="number">0</span>], Math.max(single,arc));</div><div class="line">    <span class="keyword">return</span> single;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Binary_Tree_Paths">Binary Tree Paths</h2>
<blockquote>
<p>Given a binary tree, return all root-to-leaf paths.<br>For example, given the following binary tree:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   <span class="number">1</span></div><div class="line"> /   \</div><div class="line"><span class="number">2</span>     <span class="number">3</span></div><div class="line"> \</div><div class="line">  <span class="number">5</span></div><div class="line"><span class="keyword">All</span> root-<span class="keyword">to</span>-leaf paths are:</div><div class="line">[<span class="string">"1-&gt;2-&gt;5"</span>, <span class="string">"1-&gt;3"</span>]</div></pre></td></tr></table></figure>

<h3 id="Solution">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title">binaryTreePaths</span>(TreeNode root) {</div><div class="line">    List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    dfs(root, res, sb);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>(TreeNode root, List&lt;String&gt; res, StringBuilder sb){</div><div class="line">    <span class="keyword">if</span>(root.left==<span class="keyword">null</span> && root.right==<span class="keyword">null</span>){</div><div class="line">        sb.append(root.val);</div><div class="line">        res.add(sb.toString());</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    sb.append(root.val);</div><div class="line">    sb.append(<span class="string">"-&gt;"</span>);</div><div class="line">    <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>){</div><div class="line">        dfs(root.left, res, <span class="keyword">new</span> StringBuilder(sb));</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(root.right!=<span class="keyword">null</span>){</div><div class="line">        dfs(root.right, res, <span class="keyword">new</span> StringBuilder(sb));</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Sum_Root_to_Leaf_Numbers">Sum Root to Leaf Numbers</h2>
<blockquote>
<p>Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.<br>An example is the root-to-leaf path 1-&gt;2-&gt;3 which represents the number 123.<br>Find the total sum of all root-to-leaf numbers.<br>For example,</p>
</blockquote>
<pre><code>1
</code></pre><p>   / \<br>  2   3<br>The root-to-leaf path 1-&gt;2 represents the number 12.<br>The root-to-leaf path 1-&gt;3 represents the number 13.<br>Return the sum = 12 + 13 = 25.</p>
<h3 id="Solution-1">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumNumbers</span>(TreeNode root) {</div><div class="line">       ArrayList&lt;Integer&gt; path=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">       List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">       <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">       dfs(root, path, res);</div><div class="line">       <span class="keyword">return</span> getsum(res);</div><div class="line">   }</div><div class="line">   </div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span>(TreeNode cur, ArrayList&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res){</div><div class="line">       path.add(cur.val);</div><div class="line">       <span class="keyword">if</span>(cur.left==<span class="keyword">null</span> && cur.right==<span class="keyword">null</span>){</div><div class="line">           res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(path));</div><div class="line">           path.remove(path.size()-<span class="number">1</span>);</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       }</div><div class="line">       <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>){</div><div class="line">           dfs(cur.left, path, res);</div><div class="line">       }</div><div class="line">       <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>){</div><div class="line">           dfs(cur.right, path, res);</div><div class="line">       }</div><div class="line">       path.remove(path.size()-<span class="number">1</span>);</div><div class="line">   }</div><div class="line">   </div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getsum</span>(List&lt;List&lt;Integer&gt;&gt; res){</div><div class="line">       <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">       <span class="keyword">for</span>(List&lt;Integer&gt; path: res){</div><div class="line">           <span class="keyword">int</span> subsum=<span class="number">0</span>;</div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;path.size();i++){</div><div class="line">               subsum=<span class="number">10</span>*subsum+path.get(i);</div><div class="line">           }</div><div class="line">           sum+=subsum;</div><div class="line">       }</div><div class="line">       <span class="keyword">return</span> sum;</div><div class="line">   }</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Flanarey%2Flana-del-rey-lucky-ones-demo&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Path_Sum">Path Sum</h2>
<blockquote>
<p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.<br>For example:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Given the below binary tree and sum = 22,</div><div class="line">              5</div><div class="line">             / <span class="command">\</span></div><div class="line">            4   8</div><div class="line">           /   / <span class="command">\</span></div><div class="line">          11  13  4</div><div class="line">         /  <span class="command">\ </span>     <span class="command">\</span></div><div class="line">        7    2      1</div></pre></td></tr></table></figure>

<p>return true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22.</p>
]]>
    
    </summary>
    
      <category term="Tree" scheme="http://sunbingjie.tk/tags/Tree/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="DP" scheme="http://sunbingjie.tk/tags/DP/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sort List, Insertion Sort List, Reverse Linked List, Palindrome Linked List, Delete Node in a Linked List, Remove Linked List Elements, Intersection of Two Linked Lists, Reorder List, Copy List with Random Pointer]]></title>
    <link href="http://sunbingjie.tk/2015/09/17/9.14/"/>
    <id>http://sunbingjie.tk/2015/09/17/9.14/</id>
    <published>2015-09-17T04:14:53.000Z</published>
    <updated>2015-09-17T04:14:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Sort_List">Sort List</h2>
<blockquote>
<p>Sort a linked list in O(n log n) time using constant space complexity.</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<ul>
<li>Merge sort: use merge two sorted list as helper function. </li>
<li>Corner case: if only one node left, just return the head to be merged </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">mergetwosortedlist</span>(ListNode a, ListNode b){</div><div class="line">		ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">		ListNode h=head;</div><div class="line">		<span class="keyword">while</span>(a!= <span class="keyword">null</span> && b!=<span class="keyword">null</span>){</div><div class="line">			<span class="keyword">if</span>(a.val&gt;b.val){</div><div class="line">				h.next=b;</div><div class="line">				b=b.next;</div><div class="line">			}</div><div class="line">			<span class="keyword">else</span>{</div><div class="line">				h.next=a;</div><div class="line">				a=a.next;</div><div class="line">			}</div><div class="line">			h=h.next;</div><div class="line">		}</div><div class="line">		<span class="keyword">if</span>(a==<span class="keyword">null</span>) h.next=b;</div><div class="line">		<span class="keyword">else</span> h.next=a;</div><div class="line">		<span class="keyword">return</span> head;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> ListNode <span class="title">sortList</span>(ListNode head) {</div><div class="line">		<span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;</div><div class="line">		ListNode fast=head;</div><div class="line">		ListNode slow=head;</div><div class="line">		<span class="keyword">while</span>(fast.next!=<span class="keyword">null</span> &&  fast.next.next!=<span class="keyword">null</span>){</div><div class="line">			fast=fast.next.next;</div><div class="line">			slow=slow.next;</div><div class="line">		}</div><div class="line">		fast=slow.next;<span class="comment">//fast now points to mid</span></div><div class="line">		slow.next=<span class="keyword">null</span>;</div><div class="line">		slow=sortList(head);<span class="comment">//sort first half</span></div><div class="line">		fast=sortList(fast);<span class="comment">//sort second half</span></div><div class="line">		<span class="keyword">return</span> mergetwosortedlist(slow, fast);    </div><div class="line">	}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Insertion_Sort_List">Insertion Sort List</h2>
<blockquote>
<p>Sort a linked list using insertion sort.</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">insertionSortList</span>(ListNode head) {</div><div class="line">    ListNode pre=head, cur=head, post=head;</div><div class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span> ||  head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;</div><div class="line">    ListNode dummyhead=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span>(cur!=<span class="keyword">null</span>){</div><div class="line">        ListNode tmp=dummyhead;</div><div class="line">        <span class="keyword">while</span>(tmp.next!=<span class="keyword">null</span> && tmp.next.val&lt;cur.val){</div><div class="line">            tmp=tmp.next;</div><div class="line">        }</div><div class="line">        <span class="comment">//now tmp is before the element larger than cur, need to insert cur before</span></div><div class="line">        post=cur.next;</div><div class="line">        cur.next=tmp.next;</div><div class="line">        tmp.next=cur;</div><div class="line">        cur=post;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> dummyhead.next;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Reverse_Linked_List">Reverse Linked List</h2>
<blockquote>
<p>Reverse a singly linked list.<br>click to show more hints.<br>Hint:<br>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>
</blockquote>
<h3 id="Iterative_Solution">Iterative Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">reverseList</span>(ListNode head) {</div><div class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span>) <span class="keyword">return</span> head;</div><div class="line">    ListNode cur=head, post=head, pre=<span class="keyword">null</span>;</div><div class="line">    <span class="keyword">while</span>(cur!=<span class="keyword">null</span>){</div><div class="line">        post=cur.next;</div><div class="line">        cur.next=pre;</div><div class="line">        pre=cur;</div><div class="line">        cur=post;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> pre;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Recursive_Solution">Recursive Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">reverseList</span>(ListNode head) {</div><div class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;</div><div class="line">    ListNode post=head.next;</div><div class="line">    ListNode subhead=reverseList(post);</div><div class="line">    post.next=head;</div><div class="line">    head.next=<span class="keyword">null</span>;</div><div class="line">    <span class="keyword">return</span> subhead;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Palindrome_Linked_List">Palindrome Linked List</h2>
<blockquote>
<p>Given a singly linked list, determine if it is a palindrome.<br>Follow up:<br>Could you do it in O(n) time and O(1) space?</p>
</blockquote>
<h3 id="Solution_o(n)_space">Solution o(n) space</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span>(ListNode head) {</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        ListNode slow=head, fast=head;</div><div class="line">        Stack&lt;Integer&gt; stk=<span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        stk.push(head.val);</div><div class="line">        <span class="keyword">while</span>(fast.next!=<span class="keyword">null</span> && fast.next.next!=<span class="keyword">null</span>){</div><div class="line">            fast=fast.next.next;</div><div class="line">            slow=slow.next;</div><div class="line">            stk.push(slow.val);</div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="comment">//slow is now at the lower median</span></div><div class="line">        <span class="keyword">if</span>(fast.next==<span class="keyword">null</span> && !stk.isEmpty()) stk.pop();<span class="comment">//odd number, pop median</span></div><div class="line">        slow=slow.next;</div><div class="line">        <span class="keyword">while</span>(slow!=<span class="keyword">null</span>){</div><div class="line">            <span class="keyword">if</span>(slow.val!=stk.pop()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            slow=slow.next;</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div></pre></td></tr></table></figure>

<h3 id="Solution_o(1)_space">Solution o(1) space</h3>
<ul>
<li>reverse last half of the list when we reached median, compare each node</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span>(ListNode head) {</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        ListNode slow=head, fast=head;</div><div class="line">        <span class="keyword">while</span>(fast.next!=<span class="keyword">null</span> && fast.next.next!=<span class="keyword">null</span>){</div><div class="line">            fast=fast.next.next;</div><div class="line">            slow=slow.next;</div><div class="line">        }</div><div class="line">        <span class="comment">//slow is now at the lower median</span></div><div class="line">        slow=slow.next;</div><div class="line">        ListNode pre=<span class="keyword">null</span>, cur=slow, post=cur;</div><div class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>){</div><div class="line">            post=cur.next;</div><div class="line">            cur.next=pre;</div><div class="line">            pre=cur;</div><div class="line">            cur=post;</div><div class="line">        }</div><div class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span> && pre!=<span class="keyword">null</span>){</div><div class="line">            <span class="keyword">if</span>(head.val!=pre.val) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            head=head.next;</div><div class="line">            pre=pre.next;</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Delete_Node_in_a_Linked_List">Delete Node in a Linked List</h2>
<blockquote>
<p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.<br>Supposed the linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4 and you are given the third node with value 3, the linked list should become 1 -&gt; 2 -&gt; 4 after calling your function.</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span>(ListNode node) {</div><div class="line">    <span class="keyword">if</span>(node==<span class="keyword">null</span> || node.next==<span class="keyword">null</span>) <span class="keyword">return</span>; <span class="comment">//tails dont matter</span></div><div class="line">    node.val = node.next.val;</div><div class="line">    node.next = node.next.next;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Remove_Linked_List_Elements">Remove Linked List Elements</h2>
<blockquote>
<p>Remove all elements from a linked list of integers that have value val.<br>Example<br>Given: 1 —&gt; 2 —&gt; 6 —&gt; 3 —&gt; 4 —&gt; 5 —&gt; 6, val = 6<br>Return: 1 —&gt; 2 —&gt; 3 —&gt; 4 —&gt; 5<br>Credits:<br>Special thanks to @mithmatt for adding this problem and creating all test cases.</p>
</blockquote>
<h3 id="Solution-3">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">removeElements</span>(ListNode head, <span class="keyword">int</span> val) {</div><div class="line">    ListNode dummyhead=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">    dummyhead.next=head;</div><div class="line">    ListNode cur=dummyhead;</div><div class="line">    <span class="keyword">while</span>(cur!=<span class="keyword">null</span> && cur.next!=<span class="keyword">null</span>){</div><div class="line">        <span class="keyword">if</span>(cur.next.val==val){</div><div class="line">            cur.next=cur.next.next;</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> cur=cur.next; <span class="comment">// use else here because we want to keep checking continuous vals</span></div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> dummyhead.next;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Intersection_of_Two_Linked_Lists">Intersection of Two Linked Lists</h2>
<blockquote>
<p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">For example, <span class="operator">the</span> following <span class="constant">two</span> linked lists:</div><div class="line"></div><div class="line">A:          a1 → a2</div><div class="line">                   ↘</div><div class="line">                     c1 → c2 → c3</div><div class="line">                   ↗            </div><div class="line">B:     b1 → b2 → b3</div><div class="line">begin <span class="built_in">to</span> <span class="built_in">intersect</span> <span class="keyword">at</span> node c1.</div></pre></td></tr></table></figure>

<p>Notes:<br>If the two linked lists have no intersection at all, return null.<br>The linked lists must retain their original structure after the function returns.<br>You may assume there are no cycles anywhere in the entire linked structure.<br>Your code should preferably run in O(n) time and use only O(1) memory.</p>
<h3 id="Solution-4">Solution</h3>
<ul>
<li>find length of two lists, and skip the longer list until starting from same length</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span>(ListNode headA, ListNode headB) {</div><div class="line">       <span class="keyword">int</span> lena=<span class="number">0</span>, lenb=<span class="number">0</span>;</div><div class="line">       ListNode cura=headA, curb=headB;</div><div class="line">       <span class="keyword">while</span>(cura!=<span class="keyword">null</span>){</div><div class="line">           cura=cura.next;</div><div class="line">           lena++;</div><div class="line">       }</div><div class="line">       <span class="keyword">while</span>(curb!=<span class="keyword">null</span>){</div><div class="line">           curb=curb.next;</div><div class="line">           lenb++;</div><div class="line">       }</div><div class="line">       cura=headA;</div><div class="line">       curb=headB;</div><div class="line">       <span class="keyword">if</span>(lena&gt;lenb){</div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(lena-lenb);i++){</div><div class="line">               cura=cura.next;</div><div class="line">           }</div><div class="line">       }</div><div class="line">       <span class="keyword">else</span>{</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(lenb-lena);i++){</div><div class="line">               curb=curb.next;</div><div class="line">           }           </div><div class="line">       }</div><div class="line">       <span class="keyword">while</span>(cura!=<span class="keyword">null</span> && curb!=<span class="keyword">null</span>){</div><div class="line">           <span class="keyword">if</span>(cura.val==curb.val) <span class="keyword">return</span> cura;</div><div class="line">           cura=cura.next;</div><div class="line">           curb=curb.next;</div><div class="line">       }</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   }</div></pre></td></tr></table></figure>

<h3 id="Cycle_Solution">Cycle Solution</h3>
<p>+Two pointer solution (O(n+m) running time, O(1) memory):<br>Maintain two pointers pA and pB initialized at the head of A and B, respectively. Then let them both traverse through the lists, one node at a time.<br>When pA reaches the end of a list, then redirect it to the head of B (yes, B, that’s right.); similarly when pB reaches the end of a list, redirect it the head of A.<br>If at any point pA meets pB, then pA/pB is the intersection node.<br>To see why the above trick would work, consider the following two lists: A = {1,3,5,7,9,11} and B = {2,4,9,11}, which are intersected at node ‘9’. Since B.length (=4) &lt; A.length (=6), pB would reach the end of the merged list first, because pB traverses exactly 2 nodes less than pA does. By redirecting pB to head A, and pA to head B, we now ask pB to travel exactly 2 more nodes than pA would. So in the second iteration, they are guaranteed to reach the intersection node at the same time.<br>If two lists have intersection, then their last nodes must be the same one. So when pA/pB reaches the end of a list, record the last element of A/B respectively. If the two last elements are not the same one, then the two lists have no intersections.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span>(ListNode headA, ListNode headB) {</div><div class="line">        <span class="keyword">if</span> (headA == <span class="keyword">null</span> || headB == <span class="keyword">null</span>) {</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        }</div><div class="line">        </div><div class="line">        ListNode pA = headA;</div><div class="line">        ListNode pB = headB;</div><div class="line">        </div><div class="line">        ListNode tailA = <span class="keyword">null</span>;</div><div class="line">        ListNode tailB = <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</div><div class="line">            <span class="keyword">if</span> (pA == <span class="keyword">null</span>) {</div><div class="line">                pA = headB;</div><div class="line">            }</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (pB == <span class="keyword">null</span>) {</div><div class="line">                pB = headA;</div><div class="line">            }</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (pA.next == <span class="keyword">null</span>) {</div><div class="line">                tailA = pA;</div><div class="line">            }</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (pB.next == <span class="keyword">null</span>) {</div><div class="line">                tailB = pB;</div><div class="line">            }</div><div class="line">            </div><div class="line">            <span class="comment">//The two links have different tails. So just return null;</span></div><div class="line">            <span class="keyword">if</span> (tailA != <span class="keyword">null</span> && tailB != <span class="keyword">null</span> && tailA != tailB) {</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            }</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (pA == pB) {</div><div class="line">                <span class="keyword">return</span> pA;</div><div class="line">            }</div><div class="line">            </div><div class="line">            pA = pA.next;</div><div class="line">            pB = pB.next;</div><div class="line">        }</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Reorder_List">Reorder List</h2>
<blockquote>
<p>Given a singly linked list L: L0→L1→…→Ln-1→Ln,<br>reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…<br>You must do this in-place without altering the nodes’ values.<br>For example,<br>Given {1,2,3,4}, reorder it to {1,4,2,3}.</p>
</blockquote>
<h3 id="Solution-5">Solution</h3>
<ul>
<li>find median, reverse second half, merge two parts</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reorderList</span>(ListNode head) {</div><div class="line">     <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">     ListNode slow=head, fast=head;</div><div class="line">     <span class="keyword">while</span>(fast.next!=<span class="keyword">null</span> && fast.next.next!=<span class="keyword">null</span>){</div><div class="line">         fast=fast.next.next;</div><div class="line">         slow=slow.next;</div><div class="line">     }</div><div class="line">     ListNode cur=slow.next, post=cur, pre=<span class="keyword">null</span>;</div><div class="line">     slow.next=<span class="keyword">null</span>;</div><div class="line">     <span class="keyword">while</span>(cur!=<span class="keyword">null</span>){</div><div class="line">         post=cur.next;</div><div class="line">         cur.next=pre;</div><div class="line">         pre=cur;</div><div class="line">         cur=post;</div><div class="line">     }</div><div class="line">     <span class="keyword">while</span>(pre!=<span class="keyword">null</span> && head!=<span class="keyword">null</span>){</div><div class="line">         post=head.next;</div><div class="line">         head.next=pre;</div><div class="line">         pre=pre.next;</div><div class="line">         head.next.next=post;</div><div class="line">         head=post;</div><div class="line">     }</div><div class="line"> }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Copy_List_with_Random_Pointer">Copy List with Random Pointer</h2>
<blockquote>
<p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.<br>Return a deep copy of the list.</p>
</blockquote>
<h3 id="Recursive_Solution-1">Recursive <a href="http://traceformula.blogspot.com/2015/07/copy-list-with-random-pointers.html" target="_blank" rel="external">Solution</a></h3>
<ul>
<li>Java limits recursion stack size to 128k, so I hit stackoverflow, while c++ could pass the OJ…</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> RandomListNode <span class="title">copyRandomList</span>(RandomListNode head) {</div><div class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    <span class="comment">//copy current node value, next pointer</span></div><div class="line">    <span class="keyword">if</span>(map.containsKey(head)){</div><div class="line">        <span class="keyword">return</span> map.get(head);</div><div class="line">    }</div><div class="line">    RandomListNode newhead = <span class="keyword">new</span> RandomListNode(head.label);</div><div class="line">    map.put(head, newhead);</div><div class="line">    newhead.next=copyRandomList(head.next);</div><div class="line">    <span class="comment">//random pointer</span></div><div class="line">    newhead.random=copyRandomList(head.random);</div><div class="line">    <span class="keyword">return</span> newhead;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Iterative_Solution-1">Iterative Solution</h3>
<ul>
<li>Use a hashmap to keep <a, copyofa=""> paris, for copying random pointers</a,></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> RandomListNode <span class="title">copyRandomList</span>(RandomListNode head) {</div><div class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">    HashMap&lt;RandomListNode, RandomListNode&gt; map = <span class="keyword">new</span> HashMap&lt;RandomListNode, RandomListNode&gt;();  </div><div class="line">    RandomListNode newhead = <span class="keyword">new</span> RandomListNode(head.label);  </div><div class="line">    map.put(head, newhead);  </div><div class="line">    <span class="comment">//copy next pointers</span></div><div class="line">    RandomListNode cur = head.next, copylast = newhead; </div><div class="line">    <span class="keyword">while</span>(cur != <span class="keyword">null</span>){  </div><div class="line">        copylast.next = <span class="keyword">new</span> RandomListNode(cur.label);  </div><div class="line">        map.put(cur, copylast.next);  </div><div class="line">        cur = cur.next;</div><div class="line">        copylast = copylast.next;</div><div class="line">    }  </div><div class="line">    cur=head; copylast=newhead;</div><div class="line">    <span class="keyword">while</span>(cur!=<span class="keyword">null</span>){</div><div class="line">        copylast.random = cur.random == <span class="keyword">null</span> ? <span class="keyword">null</span> : map.get(cur.random);</div><div class="line">        cur=cur.next;</div><div class="line">        copylast=copylast.next;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> newhead;  </div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Sort_List">Sort List</h2>
<blockquote>
<p>Sort a linked list in O(n log n) time using constant space complexity.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="LinkedList" scheme="http://sunbingjie.tk/tags/LinkedList/"/>
    
      <category term="Sort" scheme="http://sunbingjie.tk/tags/Sort/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Number of Islands, Word Search, Word Search II, Implement Trie (Prefix Tree)]]></title>
    <link href="http://sunbingjie.tk/2015/09/15/4.6/"/>
    <id>http://sunbingjie.tk/2015/09/15/4.6/</id>
    <published>2015-09-15T20:56:35.000Z</published>
    <updated>2015-09-15T20:56:35.000Z</updated>
    <content type="html"><![CDATA[<p>Update—Leetcode now includes this problem:</p>
<h2 id="Number_of_Islands">Number of Islands</h2>
<blockquote>
<p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.<br>Example 1:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">11110</span></div><div class="line"><span class="number">11010</span></div><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">00000</span></div><div class="line"><span class="label">Answer:</span> <span class="number">1</span></div></pre></td></tr></table></figure>

<p>Example 2:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">11000</span></div><div class="line"><span class="number">00100</span></div><div class="line"><span class="number">00011</span></div><div class="line"><span class="label">Answer:</span> <span class="number">3</span></div></pre></td></tr></table></figure>

<h2 id="Solution">Solution</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span>(<span class="keyword">char</span>[][] grid) {</div><div class="line">    <span class="keyword">if</span>(grid.length==<span class="number">0</span> || grid==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;grid.length; i++){</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;grid[<span class="number">0</span>].length;j++){</div><div class="line">            <span class="keyword">if</span>(grid[i][j]==<span class="string">'1'</span>){</div><div class="line">                count++;</div><div class="line">                dfs(grid, i, j);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j){</div><div class="line">    <span class="keyword">if</span>(i&lt;grid.length && i&gt;=<span class="number">0</span> & j&lt;grid[<span class="number">0</span>].length && j&gt;=<span class="number">0</span> && grid[i][j]==<span class="string">'1'</span>){</div><div class="line">        grid[i][j]=<span class="string">'0'</span>;</div><div class="line">        dfs(grid, i-<span class="number">1</span>,j);</div><div class="line">        dfs(grid, i+<span class="number">1</span>,j);</div><div class="line">        dfs(grid, i,j-<span class="number">1</span>);</div><div class="line">        dfs(grid, i,j+<span class="number">1</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="CountIslands/Floodfill">CountIslands/Floodfill</h2>
<blockquote>
<p>给定matrix，只有0和1，求1的连通size，连通只算上下左右，不算对角线</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0 1 0 0 1 </div><div class="line">1 1 1 0 0</div><div class="line">1 0 0 0 1</div><div class="line">0 0 0 0 1</div></pre></td></tr></table></figure>

<p>Return 5， 1， 2</p>
<h3 id="Solution-1">Solution</h3>
<p>For each 1 in the matrix, recursivly search for the four neighbors, terminate if 0/boundary found.</p>
<ul>
<li>Mark each node visited to avoid duplicated counting.</li>
</ul>
<pre><code><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">countIslands</span>(<span class="keyword">int</span>[][] mat){
    <span class="keyword">int</span> one,count;
    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();
    <span class="keyword">int</span>[][] mark = <span class="keyword">new</span> <span class="keyword">int</span>[mat.length][mat[<span class="number">0</span>].length];

    <span class="keyword">if</span>(mat == <span class="keyword">null</span> || mat.length == <span class="number">0</span>) <span class="keyword">return</span> res;

    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mat.length; i++){
        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;mat[<span class="number">0</span>].length; j++){

            <span class="keyword">if</span>(mark[i][j]!=<span class="number">1</span> &amp;&amp; mat[i][j]==<span class="number">1</span>){
                res.add(dfs(i,j, mat, mark));
            }
        }
    }
    <span class="keyword">return</span> res;
}

<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span>(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span>[][] mat, <span class="keyword">int</span>[][] mark){
    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;mat.length-<span class="number">1</span> || j&gt;mat[<span class="number">0</span>].length-<span class="number">1</span> || mat[i][j]==<span class="number">0</span> || mark[i][j]==<span class="number">1</span>)
        <span class="keyword">return</span> <span class="number">0</span>;
    mark[i][j] = <span class="number">1</span>;
    <span class="keyword">return</span> <span class="number">1</span>+dfs(i-<span class="number">1</span>,j,mat,mark)+dfs(i+<span class="number">1</span>,j,mat,mark)+dfs(i,j-<span class="number">1</span>,mat,mark)+dfs(i,j+<span class="number">1</span>,mat,mark);
}

<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
    <span class="keyword">int</span>[][] test = {{<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>} ,{<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>}, {<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>}, {<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>}};
    countIslands c = <span class="keyword">new</span> countIslands();
    System.<span class="keyword">out</span>.println(c.countIslands(test));
}
</code></pre><hr>
<h2 id="Word_Search">Word Search</h2>
<blockquote>
<p>Given a 2D board and a word, find if the word exists in the grid.<br>The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.<br>For example,<br>Given board =</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="string">"ABCE"</span>],</div><div class="line">  [<span class="string">"SFCS"</span>],</div><div class="line">  [<span class="string">"ADEE"</span>]</div><div class="line">]</div><div class="line">word = <span class="string">"ABCCED"</span>, -&gt; returns <span class="keyword">true</span>,</div><div class="line">word = <span class="string">"SEE"</span>, -&gt; returns <span class="keyword">true</span>,</div><div class="line">word = <span class="string">"ABCB"</span>, -&gt; returns <span class="keyword">false</span>.</div></pre></td></tr></table></figure>

<h3 id="Solution-2">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">boolean</span> <span class="title">exist</span>(<span class="keyword">char</span>[][] board, String word) {</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;board.length;i++){</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;board[<span class="number">0</span>].length;j++){</div><div class="line">				<span class="keyword">if</span>(dfs(board, word, i,j)){</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				}</div><div class="line">			}</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	}</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">dfs</span>(<span class="keyword">char</span>[][] a, String word, <span class="keyword">int</span> i, <span class="keyword">int</span> j){</div><div class="line">		<span class="keyword">if</span>(word.equals(<span class="string">""</span>)) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> ||j&gt;=a[<span class="number">0</span>].length || i&gt;=a.length ) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span>(a[i][j]==word.charAt(<span class="number">0</span>)){</div><div class="line">			<span class="keyword">char</span> tmp=a[i][j];</div><div class="line">			a[i][j]=<span class="string">'#'</span>;</div><div class="line">			<span class="keyword">boolean</span> res = (dfs(a, word.substring(<span class="number">1</span>), i+<span class="number">1</span>, j) || dfs(a, word.substring(<span class="number">1</span>), i, j+<span class="number">1</span>) || dfs(a, word.substring(<span class="number">1</span>), i-<span class="number">1</span>, j) || dfs(a, word.substring(<span class="number">1</span>), i, j-<span class="number">1</span>));</div><div class="line">			<span class="keyword">if</span>(res) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			<span class="keyword">else</span> a[i][j]=tmp;</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Word_Search_II">Word Search II</h2>
<blockquote>
<p>Given a 2D board and a list of words from the dictionary, find all words in the board.<br>Each word must be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.<br>For example,<br>Given words = [“oath”,”pea”,”eat”,”rain”] and board =</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="attribute">'o</span>',<span class="attribute">'a</span>',<span class="attribute">'a</span>',<span class="attribute">'n</span>'],</div><div class="line">  [<span class="attribute">'e</span>',<span class="attribute">'t</span>',<span class="attribute">'a</span>',<span class="attribute">'e</span>'],</div><div class="line">  [<span class="attribute">'i</span>',<span class="literal">'h'</span>,<span class="attribute">'k</span>',<span class="attribute">'r</span>'],</div><div class="line">  [<span class="attribute">'i</span>',<span class="attribute">'f</span>',<span class="literal">'l'</span>,<span class="attribute">'v</span>']</div><div class="line">]</div><div class="line"><span class="keyword">Return</span> [<span class="string">"eat"</span>,<span class="string">"oath"</span>].</div><div class="line">Note:</div><div class="line">You may assume that <span class="keyword">all</span> inputs are consist <span class="keyword">of</span> lowercase letters a-z.</div></pre></td></tr></table></figure>

<h3 id="DFS_Solution">DFS Solution</h3>
<ul>
<li>LTE… </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findWords</span>(<span class="keyword">char</span>[][] board, String[] words) {</div><div class="line">    List&lt;String&gt; res= <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">   	<span class="keyword">for</span>(String s : words){</div><div class="line">   		<span class="keyword">if</span>(exist(board, s)){</div><div class="line">   			res.add(s);</div><div class="line">   		}</div><div class="line">   	}</div><div class="line">   	<span class="keyword">return</span> res;</div><div class="line">   }</div><div class="line">   </div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">exist</span>(<span class="keyword">char</span>[][] board, String word) {</div><div class="line">       <span class="keyword">boolean</span>[][] visited= <span class="keyword">new</span> <span class="keyword">boolean</span>[board.length][board[<span class="number">0</span>].length];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;board.length;i++){</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;board[<span class="number">0</span>].length;j++){</div><div class="line">		    <span class="keyword">if</span>(board[i][j]==word.charAt(<span class="number">0</span>)){</div><div class="line">   				<span class="keyword">if</span>(dfs(board, word, i,j, visited)){</div><div class="line">   					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   				}</div><div class="line">		    }</div><div class="line">		}</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">dfs</span>(<span class="keyword">char</span>[][] a, String word, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">boolean</span>[][] visited){</div><div class="line">	<span class="keyword">if</span>(word.equals(<span class="string">""</span>)) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	<span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> ||j&gt;=a[<span class="number">0</span>].length || i&gt;=a.length ) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	<span class="keyword">if</span>(a[i][j]==word.charAt(<span class="number">0</span>) && !visited[i][j]){</div><div class="line">		visited[i][j]=<span class="keyword">true</span>;</div><div class="line">		<span class="keyword">boolean</span> res = (dfs(a, word.substring(<span class="number">1</span>), i+<span class="number">1</span>, j, visited) || dfs(a, word.substring(<span class="number">1</span>), i, j+<span class="number">1</span>, visited) || dfs(a, word.substring(<span class="number">1</span>), i-<span class="number">1</span>, j, visited) || dfs(a, word.substring(<span class="number">1</span>), i, j-<span class="number">1</span>, visited));</div><div class="line">		<span class="keyword">if</span>(res) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">else</span> visited[i][j]=<span class="keyword">false</span>;</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Trie_Solution"><a href="https://leetcode.com/discuss/51505/my-java-solution-using-trie" target="_blank" rel="external">Trie Solution</a></h3>
<ul>
<li>Trie helps with worst case ([“aaaaaa…aaas”, “aaaaaaa..aaaay”…])</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span></span>{</div><div class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> isWord = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">public</span> TrieNode[] child = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</div><div class="line">        <span class="keyword">public</span> <span class="title">TrieNode</span>(){</div><div class="line"></div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    TrieNode root = <span class="keyword">new</span> TrieNode();</div><div class="line">    <span class="keyword">boolean</span>[][] flag;</div><div class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title">findWords</span>(<span class="keyword">char</span>[][] board, String[] words) {</div><div class="line">        Set&lt;String&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[board.length][board[<span class="number">0</span>].length];</div><div class="line"></div><div class="line">        addToTrie(words);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++){</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++){</div><div class="line">                <span class="keyword">if</span>(root.child[board[i][j] - <span class="string">'a'</span>] != <span class="keyword">null</span>){</div><div class="line">                    search(board, i, j, root, <span class="string">""</span>, result);</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LinkedList&lt;&gt;(result);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addToTrie</span>(String[] words){</div><div class="line">        <span class="keyword">for</span>(String word: words){</div><div class="line">            TrieNode node = root;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++){</div><div class="line">                <span class="keyword">char</span> ch = word.charAt(i);</div><div class="line">                <span class="keyword">if</span>(node.child[ch - <span class="string">'a'</span>] == <span class="keyword">null</span>){</div><div class="line">                    node.child[ch - <span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</div><div class="line">                }</div><div class="line">                node = node.child[ch - <span class="string">'a'</span>];</div><div class="line">            }</div><div class="line">            node.isWord = <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">search</span>(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> i, <span class="keyword">int</span> j, TrieNode node, String word, Set&lt;String&gt; result){</div><div class="line">        <span class="keyword">if</span>(i &gt;= board.length || i &lt; <span class="number">0</span> || j &gt;= board[i].length || j &lt; <span class="number">0</span> || flag[i][j]){</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(node.child[board[i][j] - <span class="string">'a'</span>] == <span class="keyword">null</span>){</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        flag[i][j] = <span class="keyword">true</span>;</div><div class="line">        node = node.child[board[i][j] - <span class="string">'a'</span>];</div><div class="line">        <span class="keyword">if</span>(node.isWord){</div><div class="line">            result.add(word + board[i][j]);</div><div class="line">        }</div><div class="line"></div><div class="line">        search(board, i-<span class="number">1</span>, j, node, word + board[i][j], result);</div><div class="line">        search(board, i+<span class="number">1</span>, j, node, word + board[i][j], result);</div><div class="line">        search(board, i, j-<span class="number">1</span>, node, word + board[i][j], result);</div><div class="line">        search(board, i, j+<span class="number">1</span>, node, word + board[i][j], result);</div><div class="line"></div><div class="line">        flag[i][j] = <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Implement_Trie_(Prefix_Tree)">Implement Trie (Prefix Tree)</h2>
<blockquote>
<p>Implement a trie with insert, search, and startsWith methods.<br>Note:<br>You may assume that all inputs are consist of lowercase letters a-z.</p>
</blockquote>
<h3 id="Solution-3">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">class TrieNode {</div><div class="line">    <span class="comment">// Initialize your data structure here.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isword;</div><div class="line">    <span class="keyword">public</span> TrieNode[] children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</div><div class="line">    <span class="keyword">public</span> <span class="title">TrieNode</span>() {}</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>{</div><div class="line">    <span class="keyword">private</span> TrieNode root;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">Trie</span>() {</div><div class="line">        root = <span class="keyword">new</span> TrieNode();</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// Inserts a word into the trie.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span>(String word) {</div><div class="line">        TrieNode r=root;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;word.length();i++){</div><div class="line">            <span class="keyword">if</span>(r.children[word.charAt(i)-<span class="string">'a'</span>]==<span class="keyword">null</span>){</div><div class="line">                r.children[word.charAt(i)-<span class="string">'a'</span>]=<span class="keyword">new</span> TrieNode();</div><div class="line">            }</div><div class="line">            r=r.children[word.charAt(i)-<span class="string">'a'</span>];</div><div class="line">        }</div><div class="line">        r.isword=<span class="keyword">true</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// Returns if the word is in the trie.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span>(String word) {</div><div class="line">        TrieNode r=root;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;word.length();i++){</div><div class="line">            <span class="keyword">if</span>(r.children[word.charAt(i)-<span class="string">'a'</span>]==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            r=r.children[word.charAt(i)-<span class="string">'a'</span>];</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> r.isword;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// Returns if there is any word in the trie</span></div><div class="line">    <span class="comment">// that starts with the given prefix.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span>(String prefix) {</div><div class="line">        TrieNode r=root;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prefix.length();i++){</div><div class="line">            <span class="keyword">if</span>(r.children[prefix.charAt(i)-<span class="string">'a'</span>]==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            r=r.children[prefix.charAt(i)-<span class="string">'a'</span>];</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// Your Trie object will be instantiated and called as such:</span></div><div class="line"><span class="comment">// Trie trie = new Trie();</span></div><div class="line"><span class="comment">// trie.insert("somestring");</span></div><div class="line"><span class="comment">// trie.search("key");</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fdanielasings%2Fgnarls-barkley-crazy-cover-by%3Fin%3Dcici-42%2Fsets%2Fsuits&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<p>Update—Leetcode now includes this problem:</p>
<h2 id="Number_of_Islands">Number of Islands</h2>
<blockquote>
<p>Given a 2d grid map of ‘]]>
    </summary>
    
      <category term="DFS" scheme="http://sunbingjie.tk/tags/DFS/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="Trie" scheme="http://sunbingjie.tk/tags/Trie/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spiral Matrix, Spiral Matrix II, Search a 2D Matrix, Search a 2D Matrix II, Set Matrix Zeroes, Pascal's Triangle, Pascal's Triangle II]]></title>
    <link href="http://sunbingjie.tk/2015/09/14/9.13/"/>
    <id>http://sunbingjie.tk/2015/09/14/9.13/</id>
    <published>2015-09-14T23:21:07.000Z</published>
    <updated>2015-09-14T23:21:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Spiral_Matrix">Spiral Matrix</h2>
<blockquote>
<p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.<br>For example,<br>Given the following matrix:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"> [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ],</div><div class="line"> [ <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ],</div><div class="line"> [ <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ]</div><div class="line">]</div></pre></td></tr></table></figure>

<p>You should return [1,2,3,6,9,8,7,4,5].</p>
<a id="more"></a>
<h3 id="Recursive_Solution">Recursive Solution</h3>
<p>Similar to the previous <a href="http://sunbingjie.tk/2015/02/25/1.27/" target="_blank" rel="external">solution</a></p>
<ul>
<li>Subproblem is [m-2, n-2]</li>
<li>Corner case 1 : m/n&lt;=0, even number of rows and columns all processed, just return</li>
<li>Corner case 2 : if m&amp;&amp;n=1, only one number is left, just add that cell</li>
<li>Corner case 3 : if m||n=1, only add the last (x,y) by passing in m=1, n=1</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">spiralOrder</span>(<span class="keyword">int</span>[][] matrix) {</div><div class="line">        <span class="keyword">if</span>(matrix==<span class="keyword">null</span> || matrix.length==<span class="number">0</span> || matrix[<span class="number">0</span>].length==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">return</span> spiralOrder(matrix,<span class="number">0</span>,<span class="number">0</span>,matrix.length,matrix[<span class="number">0</span>].length);</div><div class="line">    }</div><div class="line">    </div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">spiralOrder</span>(<span class="keyword">int</span> [][] matrix, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> n){</div><div class="line">       ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">       <span class="keyword">if</span>(m&lt;=<span class="number">0</span>||n&lt;=<span class="number">0</span>) <span class="keyword">return</span> res;<span class="comment">//corner case</span></div><div class="line">       <span class="keyword">if</span>(m==<span class="number">1</span>&&n==<span class="number">1</span>) {<span class="comment">//菜心儿</span></div><div class="line">           res.add(matrix[x][y]);</div><div class="line">           <span class="keyword">return</span> res;</div><div class="line">       }</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++){<span class="comment">//start from (x,y), go right until n-1</span></div><div class="line">           res.add(matrix[x][y++]);</div><div class="line">       }</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m-<span class="number">1</span>;i++){<span class="comment">//start from (x,y), go down until m-1</span></div><div class="line">           res.add(matrix[x++][y]);</div><div class="line">       }</div><div class="line">       <span class="keyword">if</span>(m&gt;<span class="number">1</span>){<span class="comment">//if &gt;=2 rows left </span></div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++){<span class="comment">//start from (x,y), go left until n-1</span></div><div class="line">               res.add(matrix[x][y--]);</div><div class="line">           }</div><div class="line">       }</div><div class="line">       <span class="keyword">if</span>(n&gt;<span class="number">1</span>){<span class="comment">//if &gt;=2 columns left</span></div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m-<span class="number">1</span>;i++){<span class="comment">//start from (x,y), go up until m-1</span></div><div class="line">               res.add(matrix[x--][y]);</div><div class="line">           }</div><div class="line">       }</div><div class="line">       <span class="keyword">if</span>(m==<span class="number">1</span>||n==<span class="number">1</span>)<span class="comment">//一条线儿</span></div><div class="line">           res.addAll(spiralOrder(matrix,x,y,<span class="number">1</span>,<span class="number">1</span>));</div><div class="line">       <span class="keyword">else</span>    </div><div class="line">           res.addAll(spiralOrder(matrix,x+<span class="number">1</span>,y+<span class="number">1</span>,m-<span class="number">2</span>,n-<span class="number">2</span>));</div><div class="line">       <span class="keyword">return</span> res;</div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Spiral_Matrix_II">Spiral Matrix II</h2>
<blockquote>
<p>Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.<br>For example,<br>Given n = 3,<br>You should return the following matrix:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"> [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ],</div><div class="line"> [ <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span> ],</div><div class="line"> [ <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span> ]</div><div class="line">]</div></pre></td></tr></table></figure>

<h3 id="Solution">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] <span class="title">generateMatrix</span>(<span class="keyword">int</span> n) {</div><div class="line">		<span class="keyword">int</span>[][] res=<span class="keyword">new</span> <span class="keyword">int</span>[n][n];</div><div class="line">		<span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">		generateMatrix(n,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,res);</div><div class="line">		<span class="keyword">return</span> res;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateMatrix</span>(<span class="keyword">int</span> n, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> num, <span class="keyword">int</span> [][] res){</div><div class="line">		<span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span>;<span class="comment">//corner case</span></div><div class="line">		<span class="keyword">if</span>(n==<span class="number">1</span>) {<span class="comment">//菜心儿</span></div><div class="line">			res[x][y]=num++;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		}</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++){<span class="comment">//start from (x,y), go right until n-1</span></div><div class="line">			res[x][y++]=num++;</div><div class="line">		}</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++){<span class="comment">//start from (x,y), go down until n-1</span></div><div class="line">			res[x++][y]=num++;</div><div class="line">		}</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++){<span class="comment">//start from (x,y), go left until n-1</span></div><div class="line">			res[x][y--]=num++;</div><div class="line">		}</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++){<span class="comment">//start from (x,y), go up until n-1</span></div><div class="line">			res[x--][y]=num++;</div><div class="line">		}</div><div class="line">		generateMatrix(n-<span class="number">2</span>,x+<span class="number">1</span>,y+<span class="number">1</span>,num,res);</div><div class="line">	}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Search_a_2D_Matrix">Search a 2D Matrix</h2>
<blockquote>
<p>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:<br>Integers in each row are sorted from left to right.<br>The first integer of each row is greater than the last integer of the previous row.<br>For example,<br>Consider the following matrix:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">1</span>,   <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">7</span>],</div><div class="line">  [<span class="number">10</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">20</span>],</div><div class="line">  [<span class="number">23</span>, <span class="number">30</span>, <span class="number">34</span>, <span class="number">50</span>]</div><div class="line">]</div></pre></td></tr></table></figure>

<p>Given target = 3, return true.</p>
<h3 id="Solution-1">Solution</h3>
<p>eh</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span>(<span class="keyword">int</span>[][] a, <span class="keyword">int</span> target) {</div><div class="line">     <span class="keyword">int</span> row=<span class="number">0</span>;</div><div class="line">     <span class="keyword">while</span>(row&lt;a.length){</div><div class="line">         <span class="keyword">int</span> l=<span class="number">0</span>,r=a[row].length-<span class="number">1</span>;</div><div class="line">         <span class="keyword">while</span>(l&lt;=r){</div><div class="line">             <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</div><div class="line">             <span class="keyword">if</span>(target&lt;a[row][mid]){</div><div class="line">                 r=mid-<span class="number">1</span>;</div><div class="line">             }</div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;a[row][mid]){</div><div class="line">                 l=mid+<span class="number">1</span>;</div><div class="line">             }</div><div class="line">             <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">         }</div><div class="line">         row++;</div><div class="line">     }</div><div class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"> }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Search_a_2D_Matrix_II">Search a 2D Matrix II</h2>
<blockquote>
<p>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:<br>Integers in each row are sorted in ascending from left to right.<br>Integers in each column are sorted in ascending from top to bottom.<br>For example,<br>Consider the following matrix:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">1</span>,   <span class="number">4</span>,  <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>],</div><div class="line">  [<span class="number">2</span>,   <span class="number">5</span>,  <span class="number">8</span>, <span class="number">12</span>, <span class="number">19</span>],</div><div class="line">  [<span class="number">3</span>,   <span class="number">6</span>,  <span class="number">9</span>, <span class="number">16</span>, <span class="number">22</span>],</div><div class="line">  [<span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">24</span>],</div><div class="line">  [<span class="number">18</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">30</span>]</div><div class="line">]</div></pre></td></tr></table></figure>

<p>Given target = 5, return true.<br>Given target = 20, return false.</p>
<h3 id="solution">solution</h3>
<ul>
<li>Start from the top-right corner, and use O(m+n) to search for the result</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span>(<span class="keyword">int</span>[][] a, <span class="keyword">int</span> target) {</div><div class="line">    <span class="keyword">int</span> row=<span class="number">0</span>, col=a[<span class="number">0</span>].length-<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(row&lt;a.length && col&gt;=<span class="number">0</span>){</div><div class="line">    	<span class="keyword">if</span>(target &gt; a[row][col]) row++;</div><div class="line">    	<span class="keyword">else</span> <span class="keyword">if</span>(target &lt; a[row][col]) col--;</div><div class="line">    	<span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Set_Matrix_Zeroes">Set Matrix Zeroes</h2>
<blockquote>
<p>Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.<br>click to show follow up.<br>Follow up:<br>Did you use extra space?<br>A straight forward solution using O(mn) space is probably a bad idea.<br>A simple improvement uses O(m + n) space, but still not the best solution.<br>Could you devise a constant space solution?</p>
</blockquote>
<h3 id="Inplace_Solution_O(1)_space">Inplace Solution O(1) space</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setZeroes</span>(<span class="keyword">int</span>[][] a) {</div><div class="line">       <span class="keyword">boolean</span> rhavezero=<span class="keyword">false</span>;</div><div class="line">       <span class="keyword">boolean</span> chavezero=<span class="keyword">false</span>;</div><div class="line">       </div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a[<span class="number">0</span>].length;i++){</div><div class="line">           <span class="keyword">if</span>(a[<span class="number">0</span>][i]==<span class="number">0</span>) {rhavezero=<span class="keyword">true</span>; <span class="keyword">break</span>;}</div><div class="line">       }</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++){</div><div class="line">           <span class="keyword">if</span>(a[i][<span class="number">0</span>]==<span class="number">0</span>) {chavezero=<span class="keyword">true</span>; <span class="keyword">break</span>;}</div><div class="line">       }</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++){<span class="comment">//start from 1, to avoid a[0][0]=0 case to destroy two index rows</span></div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;a[<span class="number">0</span>].length;j++){</div><div class="line">               <span class="keyword">if</span>(a[i][j]==<span class="number">0</span>){</div><div class="line">                   a[i][<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">                   a[<span class="number">0</span>][j]=<span class="number">0</span>;</div><div class="line">               }</div><div class="line">           }</div><div class="line">       }</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a[<span class="number">0</span>].length;i++){</div><div class="line">           <span class="keyword">if</span>(a[<span class="number">0</span>][i]==<span class="number">0</span>){</div><div class="line">               <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;a.length;j++){</div><div class="line">                   a[j][i]=<span class="number">0</span>;</div><div class="line">               }</div><div class="line">           }</div><div class="line">       }</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++){</div><div class="line">           <span class="keyword">if</span>(a[i][<span class="number">0</span>]==<span class="number">0</span>){</div><div class="line">               <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;a[<span class="number">0</span>].length;j++){</div><div class="line">                   a[i][j]=<span class="number">0</span>;</div><div class="line">               }</div><div class="line">           }</div><div class="line">       }</div><div class="line">       <span class="keyword">if</span>(rhavezero){</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a[<span class="number">0</span>].length;i++){ a[<span class="number">0</span>][i]=<span class="number">0</span>;}</div><div class="line">       }</div><div class="line">       <span class="keyword">if</span>(chavezero){</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++){ a[i][<span class="number">0</span>]=<span class="number">0</span>;}</div><div class="line">       }</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Pascal’s_Triangle">Pascal’s Triangle</h2>
<blockquote>
<p>Given numRows, generate the first numRows of Pascal’s triangle.<br>For example, given numRows = 5,<br>Return</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">     [<span class="number">1</span>],</div><div class="line">    [<span class="number">1</span>,<span class="number">1</span>],</div><div class="line">   [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],</div><div class="line">  [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>],</div><div class="line"> [<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>]</div><div class="line">]</div></pre></td></tr></table></figure>

<h3 id="Solution-2">Solution</h3>
<ul>
<li>Corner case row=1</li>
<li>Start from row=2, get previous list and sum up pairs [0,row-3], add 1 in two side</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title">generate</span>(<span class="keyword">int</span> numRows) {</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">    <span class="keyword">if</span>(numRows&lt;=<span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">    List&lt;Integer&gt; rowone=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    rowone.add(<span class="number">1</span>);</div><div class="line">    res.add(rowone);</div><div class="line">    <span class="keyword">if</span>(numRows==<span class="number">1</span>) <span class="keyword">return</span> res;</div><div class="line">    <span class="keyword">int</span> row=<span class="number">2</span>;</div><div class="line">    <span class="keyword">while</span>(row&lt;=numRows){</div><div class="line">        List&lt;Integer&gt; tmp=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        tmp.add(<span class="number">1</span>); <span class="comment">//first </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row-<span class="number">2</span>;i++){</div><div class="line">            tmp.add(res.get(row-<span class="number">2</span>).get(i) + res.get(row-<span class="number">2</span>).get(i+<span class="number">1</span>));</div><div class="line">        }</div><div class="line">        tmp.add(<span class="number">1</span>); <span class="comment">//last</span></div><div class="line">        res.add(tmp);</div><div class="line">        row++;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Pascal’s_Triangle_II">Pascal’s Triangle II</h2>
<blockquote>
<p>My Submissions Question Solution<br>Total Accepted: 51519 Total Submissions: 174765 Difficulty: Easy<br>Given an index k, return the kth row of the Pascal’s triangle.<br>For example, given k = 3,<br>Return [1,3,3,1].<br>Note:<br>Could you optimize your algorithm to use only O(k) extra space?</p>
</blockquote>
<h3 id="Solution-3">Solution</h3>
<ul>
<li>Use two lists to store current and previous layer</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span>(<span class="keyword">int</span> rowIndex) {</div><div class="line">     List&lt;Integer&gt; pre=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">     pre.add(<span class="number">1</span>);</div><div class="line">     <span class="keyword">if</span>(rowIndex==<span class="number">0</span>) <span class="keyword">return</span> pre;</div><div class="line">     <span class="keyword">int</span> row=<span class="number">1</span>;</div><div class="line">     <span class="keyword">while</span>(row&lt;=rowIndex){</div><div class="line">         List&lt;Integer&gt; cur=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">         cur.add(<span class="number">1</span>); <span class="comment">//first </span></div><div class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pre.size()-<span class="number">1</span>;i++){</div><div class="line">             cur.add(pre.get(i) + pre.get(i+<span class="number">1</span>));</div><div class="line">         }</div><div class="line">         cur.add(<span class="number">1</span>); <span class="comment">//last</span></div><div class="line">         pre=cur;</div><div class="line">         row++;</div><div class="line">     }</div><div class="line">     <span class="keyword">return</span> pre;</div><div class="line"> }</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Spiral_Matrix">Spiral Matrix</h2>
<blockquote>
<p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.<br>For example,<br>Given the following matrix:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"> [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ],</div><div class="line"> [ <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ],</div><div class="line"> [ <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ]</div><div class="line">]</div></pre></td></tr></table></figure>

<p>You should return [1,2,3,6,9,8,7,4,5].</p>
]]>
    
    </summary>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jump Game, Jump Game II, Climbing Stairs]]></title>
    <link href="http://sunbingjie.tk/2015/09/14/5.30/"/>
    <id>http://sunbingjie.tk/2015/09/14/5.30/</id>
    <published>2015-09-14T23:19:57.000Z</published>
    <updated>2015-09-14T23:19:57.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Jump_Game">Jump Game</h2>
<blockquote>
<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.<br>Each element in the array represents your maximum jump length at that position.<br>Determine if you are able to reach the last index.<br>For example:<br>A = [2,3,1,1,4], return true.<br>A = [3,2,1,0,4], return false.</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<p>Simple 1D DP, update maxjump on each step, when we are at a place even maxjump cannot reach, return false.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span>(<span class="keyword">int</span>[] nums) {</div><div class="line">    <span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span> || nums.length==<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">int</span> maxjump = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++){</div><div class="line">        <span class="keyword">if</span>(i &gt; maxjump) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// max jump streak cannot reach i</span></div><div class="line">        <span class="keyword">if</span>(nums[i]+i &gt; maxjump){</div><div class="line">            maxjump = nums[i]+i;</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(maxjump &gt;= nums.length-<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Jump_Game_II">Jump Game II</h2>
<blockquote>
<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.<br>Each element in the array represents your maximum jump length at that position.<br>Your goal is to reach the last index in the minimum number of jumps.<br>For example:<br>Given array A = [2,3,1,1,4]<br>The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<p>Similar to one, we record a lastjump var. Whenver we have to take a step(i&gt;lastjump), update lastjump to maxjump(which is update on each index), as a simple greedy process.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span>(<span class="keyword">int</span>[] nums) {</div><div class="line">        <span class="keyword">int</span> maxjump=<span class="number">0</span>, lastjump=<span class="number">0</span>, step=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++){</div><div class="line">            <span class="keyword">if</span>(i&gt;lastjump){</div><div class="line">                step++;</div><div class="line">                lastjump=maxjump;</div><div class="line">            }</div><div class="line">            <span class="keyword">if</span>(nums[i]+i&gt;maxjump){</div><div class="line">                maxjump=nums[i]+i;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(maxjump&gt;=nums.length-<span class="number">1</span>) <span class="keyword">return</span> step;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Climbing_Stairs">Climbing Stairs</h2>
<blockquote>
<p>You are climbing a stair case. It takes n steps to reach to the top.<br>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
</blockquote>
<h3 id="1D_DP_Solution">1D DP Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">climbStairs</span>(<span class="keyword">int</span> n) {</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>[] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    dp[<span class="number">1</span>]=<span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++){</div><div class="line">        dp[i]=dp[i-<span class="number">1</span>]+dp[i-<span class="number">2</span>];</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> dp[n-<span class="number">1</span>];</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Recursive_Solution">Recursive Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">climbStairs</span>(<span class="keyword">int</span> n) {</div><div class="line">    <span class="keyword">int</span>[] ways={<span class="number">0</span>};</div><div class="line">    climb(ways, <span class="number">0</span>, n);</div><div class="line">    <span class="keyword">return</span> ways[<span class="number">0</span>];   </div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> </div><div class="line"><span class="keyword">void</span> <span class="title">climb</span>(<span class="keyword">int</span>[] ways, <span class="keyword">int</span> len, <span class="keyword">int</span> n){</div><div class="line">    <span class="keyword">if</span>(len&gt;n) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(len==n){ways[<span class="number">0</span>]++;<span class="keyword">return</span>;}</div><div class="line">    climb(ways, len+<span class="number">1</span>, n);</div><div class="line">    climb(ways, len+<span class="number">2</span>, n);</div><div class="line">}</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Ftijn-speets%2Flo-fang-youre-the-one-that-i-want-chanel-5%3Fin%3Dcici-42%2Fsets%2Fsummer-vibes&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Jump_Game">Jump Game</h2>
<blockquote>
<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.<br>Each element in the array represents your maximum jump length at that position.<br>Determine if you are able to reach the last index.<br>For example:<br>A = [2,3,1,1,4], return true.<br>A = [3,2,1,0,4], return false.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="DP" scheme="http://sunbingjie.tk/tags/DP/"/>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Minimum Path Sum, Unique Paths, Unique Paths II]]></title>
    <link href="http://sunbingjie.tk/2015/09/14/9.12/"/>
    <id>http://sunbingjie.tk/2015/09/14/9.12/</id>
    <published>2015-09-14T19:03:58.000Z</published>
    <updated>2015-09-14T19:03:58.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Minimum_Path_Sum">Minimum Path Sum</h2>
<blockquote>
<p>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.<br>Note: You can only move either down or right at any point in time.</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<ul>
<li>2D DP problem, min of up and left cells are the unique path for current cell</li>
</ul>
<hr>
<h2 id="Unique_Paths">Unique Paths</h2>
<blockquote>
<p>A robot is located at the top-left corner of a m x n grid (marked ‘Start’ in the diagram below).<br>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).<br>How many possible unique paths are there?<br><img src="http://leetcode.com/wp-content/uploads/2014/12/robot_maze.png" alt="pic"></p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<ul>
<li><ul>
<li>2D DP problem, sum of up and left cells are the unique path for current cell</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uniquePaths</span>(<span class="keyword">int</span> m, <span class="keyword">int</span> n) {</div><div class="line">     <span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[m][n];</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++){</div><div class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++){</div><div class="line">             <span class="keyword">if</span>(i==<span class="number">0</span> || j==<span class="number">0</span>){</div><div class="line">                 dp[i][j]=<span class="number">1</span>;</div><div class="line">             }</div><div class="line">             <span class="keyword">else</span>{</div><div class="line">                 dp[i][j]=dp[i-<span class="number">1</span>][j] +dp[i][j-<span class="number">1</span>]; </div><div class="line">             }</div><div class="line">             }</div><div class="line">         }</div><div class="line">         <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</div><div class="line">     }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Unique_Paths_II">Unique Paths II</h2>
<blockquote>
<p>Follow up for “Unique Paths”:<br>Now consider if some obstacles are added to the grids. How many unique paths would there be?<br>An obstacle and empty space is marked as 1 and 0 respectively in the grid.<br>For example,<br>There is one obstacle in the middle of a 3x3 grid as illustrated below.<br>[<br>  [0,0,0],<br>  [0,1,0],<br>  [0,0,0]<br>]<br>The total number of unique paths is 2.</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<ul>
<li>If up or left cell is 1, then set it to 0</li>
<li>If current cell is 1, set it to 0 </li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span>(<span class="keyword">int</span>[][] a)</div><div class="line">	{</div><div class="line">		<span class="keyword">int</span> m=a.length; <span class="keyword">int</span> n=a[<span class="number">0</span>].length;</div><div class="line">		<span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[m][n];</div><div class="line">		<span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(i&lt;m){</div><div class="line">			<span class="keyword">if</span>(a[i][<span class="number">0</span>]==<span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">else</span> {dp[i][<span class="number">0</span>]=<span class="number">1</span>;i++;}</div><div class="line">		}</div><div class="line">		<span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(j&lt;n){</div><div class="line">			<span class="keyword">if</span>(a[<span class="number">0</span>][j]==<span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">else</span> {dp[<span class="number">0</span>][j]=<span class="number">1</span>;j++;}</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++){</div><div class="line">			<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;n;j++){</div><div class="line">			        <span class="keyword">if</span>(a[i][j]==<span class="number">1</span>) dp[i][j]=<span class="number">0</span>;<span class="comment">//别忘了这个case</span></div><div class="line">					<span class="keyword">else</span> dp[i][j]= (a[i-<span class="number">1</span>][j]==<span class="number">1</span> ? <span class="number">0</span> : dp[i-<span class="number">1</span>][j]) + (a[i][j-<span class="number">1</span>]==<span class="number">1</span> ? <span class="number">0</span> : dp[i][j-<span class="number">1</span>]); <span class="comment">//加括号...</span></div><div class="line">			}</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</div><div class="line">	}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Minimum_Path_Sum">Minimum Path Sum</h2>
<blockquote>
<p>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.<br>Note: You can only move either down or right at any point in time.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="DP" scheme="http://sunbingjie.tk/tags/DP/"/>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Count and Say, Integer to English Words, Length of Last Word, Simplify Path, Compare Version Numbers]]></title>
    <link href="http://sunbingjie.tk/2015/09/13/9.11/"/>
    <id>http://sunbingjie.tk/2015/09/13/9.11/</id>
    <published>2015-09-13T05:02:36.000Z</published>
    <updated>2015-09-13T05:02:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Count_and_Say">Count and Say</h2>
<blockquote>
<p>The count-and-say sequence is the sequence of integers beginning as follows:<br>1, 11, 21, 1211, 111221, …<br>1 is read off as “one 1” or 11.<br>11 is read off as “two 1s” or 21.<br>21 is read off as “one 2, then one 1” or 1211.<br>Given an integer n, generate the nth sequence.<br>Note: The sequence of integers will be represented as a string.</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">countAndSay</span>(<span class="keyword">int</span> n) {</div><div class="line">     <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">     <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="string">"1"</span>;</div><div class="line"> 	String s=<span class="string">"1"</span>;</div><div class="line">     String news=<span class="string">"1"</span>;</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++){</div><div class="line">         news=<span class="string">""</span>;</div><div class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s.length();j++){</div><div class="line">             <span class="keyword">int</span> count=<span class="number">1</span>;</div><div class="line">             <span class="keyword">while</span>(j+<span class="number">1</span>&lt;s.length() && s.charAt(j)==s.charAt(j+<span class="number">1</span>)){</div><div class="line">                  count++;</div><div class="line">                  j++;</div><div class="line">             }</div><div class="line">             news+=String.valueOf(count)+s.charAt(j);</div><div class="line">         }</div><div class="line">         s=news;</div><div class="line">     }</div><div class="line">     <span class="keyword">return</span> s;</div><div class="line"> }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Integer_to_English_Words">Integer to English Words</h2>
<blockquote>
<p>Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 231 - 1.<br>For example,<br>123 -&gt; “One Hundred Twenty Three”<br>12345 -&gt; “Twelve Thousand Three Hundred Forty Five”<br>1234567 -&gt; “One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven”</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<ul>
<li>Group by three digits, process from last digit, three and a time</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> String[] twodigits = {<span class="string">""</span>, <span class="string">"One"</span>, <span class="string">"Two"</span>, <span class="string">"Three"</span>, <span class="string">"Four"</span>, <span class="string">"Five"</span>, <span class="string">"Six"</span>, <span class="string">"Seven"</span>, <span class="string">"Eight"</span>, <span class="string">"Nine"</span>, <span class="string">"Ten"</span>, 		<span class="string">"Eleven"</span>, <span class="string">"Twelve"</span>, <span class="string">"Thirteen"</span>, <span class="string">"Fourteen"</span>, <span class="string">"Fifteen"</span>, <span class="string">"Sixteen"</span>, <span class="string">"Seventeen"</span>, <span class="string">"Eighteen"</span>, <span class="string">"Nineteen"</span>};</div><div class="line"><span class="keyword">static</span> String[] tens = {<span class="string">""</span>, <span class="string">"Ten"</span>, <span class="string">"Twenty"</span>, <span class="string">"Thirty"</span>, <span class="string">"Forty"</span>, <span class="string">"Fifty"</span>, <span class="string">"Sixty"</span>, <span class="string">"Seventy"</span>, <span class="string">"Eighty"</span>, <span class="string">"Ninety"</span>};</div><div class="line"><span class="keyword">static</span> String[] thousands = {<span class="string">""</span>, <span class="string">"Thousand"</span>, <span class="string">"Million"</span>, <span class="string">"Billion"</span>};</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">numberToWords</span>(<span class="keyword">int</span> num) {</div><div class="line">	<span class="keyword">if</span>(num==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">"Zero"</span>;</div><div class="line">	String result=<span class="string">""</span>;</div><div class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(num&gt;<span class="number">0</span>){</div><div class="line">		<span class="keyword">if</span>(num%<span class="number">1000</span>&gt;<span class="number">0</span>){</div><div class="line">			result = helper(num%<span class="number">1000</span>) + thousands[i] + <span class="string">" "</span> + result;</div><div class="line">		}</div><div class="line">		num/=<span class="number">1000</span>;</div><div class="line">		i++;</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> result.trim();</div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">helper</span>(<span class="keyword">int</span> num){</div><div class="line">	<span class="keyword">if</span>(num==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>; <span class="comment">//edge case</span></div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">20</span>){</div><div class="line">		<span class="keyword">return</span> twodigits[num] + <span class="string">" "</span>;<span class="comment">//1-19</span></div><div class="line">	}</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">100</span>){</div><div class="line">		<span class="keyword">return</span> tens[num/<span class="number">10</span>] + <span class="string">" "</span> + helper(num%<span class="number">10</span>);<span class="comment">//21-99</span></div><div class="line">	}</div><div class="line">	<span class="keyword">else</span>{</div><div class="line">		<span class="keyword">return</span> twodigits[num/<span class="number">100</span>] + <span class="string">" Hundred "</span> + helper(num%<span class="number">100</span>);<span class="comment">//100-999</span></div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Length_of_Last_Word">Length of Last Word</h2>
<blockquote>
<p>Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘, return the length of last word in the string.<br>If the last word does not exist, return 0.<br>Note: A word is defined as a character sequence consists of non-space characters only.<br>For example,<br>Given s = “Hello World”,<br>return 5.</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<p>eh?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lengthOfLastWord</span>(String s) {</div><div class="line">    s=s.trim();</div><div class="line">    <span class="keyword">int</span> i=s.length()-<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i&gt;=<span class="number">0</span> && s.charAt(i)&gt;=<span class="string">'A'</span> && s.charAt(i)&lt;=<span class="string">'z'</span>){</div><div class="line">        i--;</div><div class="line">    	len++;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> len;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Simplify_Path">Simplify Path</h2>
<blockquote>
<p>Given an absolute path for a file (Unix-style), simplify it.<br>For example,<br>path = “/home/“, =&gt; “/home”<br>path = “/a/./b/../../c/“, =&gt; “/c”</p>
</blockquote>
<h3 id="Solution-3">Solution</h3>
<ul>
<li>Corner case 1</li>
<li>Corner case 2</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">simplifyPath</span>(String path) {</div><div class="line">       String[] s=path.split(<span class="string">"/"</span>);</div><div class="line">       Stack&lt;String&gt; stk = <span class="keyword">new</span> Stack&lt;String&gt;();</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length;i++){</div><div class="line">           <span class="keyword">if</span>(s[i].equals(<span class="string">".."</span>) && !stk.isEmpty()) stk.pop();</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(!s[i].equals(<span class="string">""</span>) && !s[i].equals(<span class="string">"."</span>) && !s[i].equals(<span class="string">".."</span>)) stk.push(s[i]);</div><div class="line">       }</div><div class="line">       String res=<span class="string">""</span>;</div><div class="line">       <span class="keyword">if</span>(stk.isEmpty()) <span class="keyword">return</span> <span class="string">"/"</span>;</div><div class="line">       <span class="keyword">while</span>(!stk.isEmpty()){</div><div class="line">       	res = <span class="string">"/"</span> + stk.pop() + res;</div><div class="line">       }</div><div class="line">       <span class="keyword">return</span> res;</div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Compare_Version_Numbers">Compare Version Numbers</h2>
<blockquote>
<p>Compare two version numbers version1 and version2.<br>If version1 &gt; version2 return 1, if version1 &lt; version2 return -1, otherwise return 0.<br>You may assume that the version strings are non-empty and contain only digits and the . character.<br>The . character does not represent a decimal point and is used to separate number sequences.<br>For instance, 2.5 is not “two and a half” or “half way to version three”, it is the fifth second-level revision of the second first-level revision.<br>Here is an example of version numbers ordering:<br>0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37</p>
</blockquote>
<h3 id="Solution-4">Solution</h3>
<ul>
<li>To split a string with a literal ‘.’ character in Java, you must use split(“\\.”).</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareVersion</span>(String version1, String version2) {</div><div class="line">     String[] s1 = version1.split(<span class="string">"\\."</span>);</div><div class="line">     String[] s2 = version2.split(<span class="string">"\\."</span>);</div><div class="line">     <span class="keyword">int</span> len = Math.min(s1.length, s2.length);</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</div><div class="line">         <span class="keyword">if</span>(Integer.valueOf(s1[i]) &lt; Integer.valueOf(s2[i])){</div><div class="line">             <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">         }</div><div class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(Integer.valueOf(s1[i]) &gt; Integer.valueOf(s2[i])){</div><div class="line">             <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">         }</div><div class="line">     }</div><div class="line">     <span class="keyword">if</span>(s1.length&gt;s2.length){</div><div class="line">     	<span class="keyword">int</span> i=len;</div><div class="line">     	<span class="keyword">while</span>(i&lt;s1.length){</div><div class="line">     		<span class="keyword">if</span>(Integer.valueOf(s1[i])==<span class="number">0</span>)</div><div class="line">     			i++;</div><div class="line">     		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">     	}</div><div class="line">     };</div><div class="line">     <span class="keyword">if</span>(s1.length&lt;s2.length){</div><div class="line">     	<span class="keyword">int</span> i=len;</div><div class="line">     	<span class="keyword">while</span>(i&lt;s2.length){</div><div class="line">     		<span class="keyword">if</span>(Integer.valueOf(s2[i])==<span class="number">0</span>)</div><div class="line">     			i++;</div><div class="line">     		<span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">     	}</div><div class="line">     };</div><div class="line">     </div><div class="line">     <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> }</div></pre></td></tr></table></figure>

<iframe src="https://embed.spotify.com/?uri=https%3A%2F%2Fplay.spotify.com%2Ftrack%2F3xcsflsFD1D2AEBZl89NoS" width="300" height="380" frameborder="0" allowtransparency="true" class="spotify"></iframe>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Count_and_Say">Count and Say</h2>
<blockquote>
<p>The count-and-say sequence is the sequence of integers beginning as follows:<br>1, 11, 21, 1211, 111221, …<br>1 is read off as “one 1” or 11.<br>11 is read off as “two 1s” or 21.<br>21 is read off as “one 2, then one 1” or 1211.<br>Given an integer n, generate the nth sequence.<br>Note: The sequence of integers will be represented as a string.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="Binary Search" scheme="http://sunbingjie.tk/tags/Binary-Search/"/>
    
      <category term="Math" scheme="http://sunbingjie.tk/tags/Math/"/>
    
      <category term="Stack" scheme="http://sunbingjie.tk/tags/Stack/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Valid Anagram, Group Anagrams]]></title>
    <link href="http://sunbingjie.tk/2015/09/12/9.10/"/>
    <id>http://sunbingjie.tk/2015/09/12/9.10/</id>
    <published>2015-09-13T03:51:07.000Z</published>
    <updated>2015-09-13T03:51:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Valid_Anagram">Valid Anagram</h2>
<blockquote>
<p>Given two strings s and t, write a function to determine if t is an anagram of s.<br>For example,<br>s = “anagram”, t = “nagaram”, return true.<br>s = “rat”, t = “car”, return false.<br>Note:<br>You may assume the string contains only lowercase alphabets.</p>
</blockquote>
<a id="more"></a>
<h3 id="HashMap_Solution">HashMap Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span>(String s, String t) {</div><div class="line">    	s.toLowerCase();</div><div class="line">    	t.toLowerCase();</div><div class="line">    	<span class="keyword">if</span>(s.length()!=t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    	HashMap&lt;Character, Integer&gt; map=<span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length();i++){</div><div class="line">    		<span class="keyword">if</span>(!map.containsKey(s.charAt(i))){</div><div class="line">    			map.put(s.charAt(i), <span class="number">1</span>);</div><div class="line">    		}</div><div class="line">    		<span class="keyword">else</span> map.put(s.charAt(i), map.get(s.charAt(i))+<span class="number">1</span>);</div><div class="line">    	}</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.length();i++){</div><div class="line">    		<span class="keyword">if</span>(map.containsKey(t.charAt(i))){</div><div class="line">    			<span class="keyword">if</span>(map.get(t.charAt(i))&gt;=<span class="number">1</span>){</div><div class="line">    				map.put(t.charAt(i), map.get(t.charAt(i))-<span class="number">1</span>);</div><div class="line">    			}</div><div class="line">    			<span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    		}</div><div class="line">    		<span class="keyword">else</span> <span class="keyword">if</span>(!map.containsKey(t.charAt(i))) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    	}</div><div class="line">    	<span class="keyword">return</span> <span class="keyword">true</span>;  	</div><div class="line">    }</div></pre></td></tr></table></figure>

<h3 id="Sort_Solution">Sort Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagramSort</span>(String s, String t) {</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || t == <span class="keyword">null</span>) {</div><div class="line">            <span class="keyword">return</span> (s == <span class="keyword">null</span> && t == <span class="keyword">null</span>) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span> (s.equals(t)) {</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span> (s.length() != t.length()) {</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">char</span>[] s1 = s.toCharArray();</div><div class="line">        <span class="keyword">char</span>[] t1 = t.toCharArray();</div><div class="line"></div><div class="line">        Arrays.sort(s.toCharArray());</div><div class="line">        Arrays.sort(t.toCharArray());</div><div class="line"></div><div class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> String(s1).equals(<span class="keyword">new</span> String(t1)) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Group_Anagrams">Group Anagrams</h2>
<blockquote>
<p>Given an array of strings, group anagrams together.<br>For example, given: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”],<br>Return:<br>[<br>  [“ate”, “eat”,”tea”],<br>  [“nat”,”tan”],<br>  [“bat”]<br>]<br>Note:<br>For the return value, each inner list’s elements must follow the lexicographic order.<br>All inputs will be in lower-case.</p>
</blockquote>
<h3 id="Sort_+_Hashmap_Solution">Sort + Hashmap Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title">groupAnagrams</span>(String[] strs) {</div><div class="line">        HashMap&lt;String, List&lt;String&gt;&gt; dict = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) {</div><div class="line">            String s = strs[i];</div><div class="line">            <span class="keyword">char</span>[] chars = s.toCharArray();</div><div class="line">            Arrays.sort(chars);</div><div class="line">            String sortedString = String.valueOf(chars);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (dict.containsKey(sortedString)) {</div><div class="line">                dict.get(sortedString).add(s);</div><div class="line">            } <span class="keyword">else</span> {</div><div class="line">                List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">                list.add(s);</div><div class="line">                dict.put(sortedString, list);</div><div class="line">            }</div><div class="line">        }</div><div class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</div><div class="line">        <span class="keyword">for</span> (List&lt;String&gt; list : dict.values()) {</div><div class="line">            <span class="keyword">if</span> (list.size() &gt;= <span class="number">1</span>)</div><div class="line">                Collections.sort(list);</div><div class="line">                res.add(list);</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    }</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Valid_Anagram">Valid Anagram</h2>
<blockquote>
<p>Given two strings s and t, write a function to determine if t is an anagram of s.<br>For example,<br>s = “anagram”, t = “nagaram”, return true.<br>s = “rat”, t = “car”, return false.<br>Note:<br>You may assume the string contains only lowercase alphabets.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="String" scheme="http://sunbingjie.tk/tags/String/"/>
    
      <category term="HashMap" scheme="http://sunbingjie.tk/tags/HashMap/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Valid Parentheses, Longest Valid Parentheses, Generate Parentheses, Letter Combinations of a Phone Number, Restore IP Addresses, Valid Sudoku]]></title>
    <link href="http://sunbingjie.tk/2015/09/12/9.2/"/>
    <id>http://sunbingjie.tk/2015/09/12/9.2/</id>
    <published>2015-09-13T03:51:00.000Z</published>
    <updated>2015-09-13T03:51:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Valid_Parentheses">Valid Parentheses</h2>
<blockquote>
<p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.<br>The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<p>Just use a stack, push when empty, or left parenthese found; pop when found a match.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span>(String s) {</div><div class="line">    Stack&lt;Character&gt; stk=<span class="keyword">new</span> Stack&lt;Character&gt;();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++){</div><div class="line">        Character tmp=s.charAt(i);</div><div class="line">        <span class="keyword">if</span>(stk.isEmpty() && (tmp==<span class="string">')'</span> || tmp==<span class="string">']'</span> || tmp==<span class="string">'}'</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>(!stk.isEmpty() && isMatch(stk.peek(), tmp)) </div><div class="line">            stk.pop();</div><div class="line">        <span class="keyword">else</span> stk.push(tmp);</div><div class="line">    } <span class="keyword">return</span> stk.isEmpty();</div><div class="line">}</div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMatch</span>(Character a, Character b){</div><div class="line">    <span class="keyword">if</span>(a==<span class="string">'('</span> && b==<span class="string">')'</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span>(a==<span class="string">'['</span> && b==<span class="string">']'</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span>(a==<span class="string">'{'</span> && b==<span class="string">'}'</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Longest_Valid_Parentheses">Longest Valid Parentheses</h2>
<blockquote>
<p>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.<br>For “(()”, the longest valid parentheses substring is “()”, which has length = 2.<br>Another example is “)()())”, where the longest valid parentheses substring is “()()”, which has length = 4.</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span>(String s) {</div><div class="line">		<span class="keyword">if</span> (s==<span class="keyword">null</span>||s.length()==<span class="number">0</span>){</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">int</span> start=<span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> maxLen=<span class="number">0</span>;</div><div class="line">		Stack&lt;Integer&gt; stack=<span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length();i++){</div><div class="line">			<span class="keyword">if</span> (s.charAt(i)==<span class="string">'('</span>){</div><div class="line">				stack.push(i);</div><div class="line">			}<span class="keyword">else</span>{</div><div class="line">				<span class="keyword">if</span>(stack.isEmpty()){</div><div class="line">					<span class="comment">// record the position of first left parenthesis as start</span></div><div class="line">					start=i+<span class="number">1</span>;</div><div class="line">				}</div><div class="line">				<span class="keyword">else</span>{</div><div class="line">					stack.pop();</div><div class="line">					<span class="comment">// if stack is empty means all valid pairs are gone,current whole length i-start+1 is longest</span></div><div class="line">					<span class="keyword">if</span> (stack.isEmpty()){</div><div class="line">						maxLen=Math.max(i-start+<span class="number">1</span>, maxLen);</div><div class="line">					}</div><div class="line">					<span class="keyword">else</span>{</div><div class="line">						<span class="comment">// if stack is not empty, then for current i the longest valid parenthesis length is i-stack.peek()</span></div><div class="line">						maxLen=Math.max(i-stack.peek(),maxLen);</div><div class="line">					}</div><div class="line">				}</div><div class="line">			}</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> maxLen;</div><div class="line">	}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Generate_Parentheses">Generate Parentheses</h2>
<blockquote>
<p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.<br>For example, given n = 3, a solution set is:<br>“((()))”, “(()())”, “(())()”, “()(())”, “()()()”</p>
</blockquote>
<h3 id="DFS_+_Backtracking_Solution">DFS + Backtracking Solution</h3>
<ul>
<li>left/right represents how many l/r brackets left for use</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">generateParenthesis</span>(<span class="keyword">int</span> n) {</div><div class="line">    ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(); </div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">    dfs(res, sb, n, n);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">    </div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>(ArrayList&lt;String&gt; res, StringBuilder sb,<span class="keyword">int</span> left, <span class="keyword">int</span> right){</div><div class="line">    <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(left == <span class="number">0</span> && right == <span class="number">0</span>){</div><div class="line">        res.add(sb.toString());</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(left&gt;<span class="number">0</span>){</div><div class="line">        dfs(res,sb.append(<span class="string">'('</span>), left-<span class="number">1</span>, right);</div><div class="line">        sb.deleteCharAt(sb.length()-<span class="number">1</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(right&gt;<span class="number">0</span>){</div><div class="line">        dfs(res,sb.append(<span class="string">')'</span>), left, right-<span class="number">1</span>);</div><div class="line">        sb.deleteCharAt(sb.length()-<span class="number">1</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>If we use String here, no need to delete when backtracking</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">generateParenthesis</span>(<span class="keyword">int</span> n) {</div><div class="line">    ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    String tmp = <span class="string">""</span>; </div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">    dfs(res, tmp, n, n);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">    </div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>(ArrayList&lt;String&gt; res, String tmp, <span class="keyword">int</span> left, <span class="keyword">int</span> right){</div><div class="line">    <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(left == <span class="number">0</span> && right == <span class="number">0</span>){</div><div class="line">        res.add(<span class="keyword">new</span> String(tmp));</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(left&gt;<span class="number">0</span>){</div><div class="line">        dfs(res,tmp+<span class="string">"("</span>, left-<span class="number">1</span>, right);</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(right&gt;<span class="number">0</span>){</div><div class="line">        dfs(res,tmp+<span class="string">")"</span>, left, right-<span class="number">1</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Letter_Combinations_of_a_Phone_Number">Letter Combinations of a Phone Number</h2>
<blockquote>
<p>Given a digit string, return all possible letter combinations that the number could represent.<br>A mapping of digit to letters (just like on the telephone buttons) is given below.<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt=""><br>Input:Digit string “23”<br>Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].</p>
</blockquote>
<h3 id="Iterative_Solution">Iterative Solution</h3>
<ul>
<li>Simple BFS, use a Queue and store all combinations in a list</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> LinkedList&lt;String&gt; <span class="title">letterCombinations</span>(String digits) {</div><div class="line">    String map[] = {<span class="string">""</span>,<span class="string">""</span>,<span class="string">"abc"</span>,<span class="string">"def"</span>,<span class="string">"ghi"</span>,<span class="string">"jkl"</span>,<span class="string">"mno"</span>,<span class="string">"pqrs"</span>,<span class="string">"tuv"</span>,<span class="string">"wxyz"</span>};</div><div class="line">    LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;String&gt;();</div><div class="line">    <span class="keyword">if</span>(digits==<span class="keyword">null</span> || digits.length()==<span class="number">0</span>) <span class="keyword">return</span> list;</div><div class="line">    list.add(<span class="string">""</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;digits.length();i++){</div><div class="line">        <span class="keyword">int</span> num = digits.charAt(i) - <span class="string">'0'</span>;</div><div class="line">        <span class="keyword">int</span> size = list.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size;j++){</div><div class="line">            String tmp = list.poll();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;map[num].length();k++){</div><div class="line">                list.add(tmp + map[num].charAt(k));</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> list;</div><div class="line">}</div></pre></td></tr></table></figure>



<h3 id="DFS_Solution">DFS Solution</h3>
<ul>
<li>Template DFS</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">letterCombinations</span>(String digits) {</div><div class="line">    String map[] = {<span class="string">""</span>,<span class="string">""</span>,<span class="string">"abc"</span>,<span class="string">"def"</span>,<span class="string">"ghi"</span>,<span class="string">"jkl"</span>,<span class="string">"mno"</span>,<span class="string">"pqrs"</span>,<span class="string">"tuv"</span>,<span class="string">"wxyz"</span>};</div><div class="line">    StringBuilder tmp = <span class="keyword">new</span> StringBuilder();</div><div class="line">    ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    <span class="keyword">if</span>(digits==<span class="keyword">null</span> || digits.length()==<span class="number">0</span>) <span class="keyword">return</span> res; <span class="comment">//[""] is not []...</span></div><div class="line">    dfs(digits, map, tmp, res, <span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span>(String digits, String[] map, StringBuilder tmp, ArrayList&lt;String&gt; res, <span class="keyword">int</span> height){</div><div class="line">    <span class="keyword">if</span>(height == digits.length()){</div><div class="line">        res.add(tmp.toString());</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="keyword">int</span> num = digits.charAt(height)-<span class="string">'0'</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;map[num].length();i++){</div><div class="line">         tmp.append(map[num].charAt(i));</div><div class="line">         dfs(digits, map, tmp, res, height+<span class="number">1</span>);</div><div class="line">         tmp.deleteCharAt(tmp.length()-<span class="number">1</span>); <span class="comment">//delete when backtracking..</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Restore_IP_Addresses">Restore IP Addresses</h2>
<blockquote>
<p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.<br>For example:<br>Given “25525511135”,<br>return [“255.255.11.135”, “255.255.111.35”]. (Order does not matter)</p>
</blockquote>
<h3 id="Solution-2"><a href="http://blog.csdn.net/u011095253/article/details/9158449" target="_blank" rel="external">Solution</a></h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">restoreIpAddresses</span>(String s) {</div><div class="line">        List&lt;String&gt; res=<span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        <span class="keyword">if</span>(s.length()&gt;<span class="number">12</span> || s.length()&lt;<span class="number">4</span>) <span class="keyword">return</span> res; <span class="comment">//prevent overflow</span></div><div class="line">        dfs(res, s, <span class="string">""</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span>(List&lt;String&gt; res, String left, String current, <span class="keyword">int</span> count){</div><div class="line">        <span class="keyword">if</span>(count==<span class="number">3</span> && isValid(left)){</div><div class="line">            res.add(current+left);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">3</span> && i&lt;left.length(); i++){</div><div class="line">            <span class="keyword">if</span>(isValid(left.substring(<span class="number">0</span>,i))){</div><div class="line">                dfs(res,left.substring(i), current+left.substring(<span class="number">0</span>,i)+<span class="string">"."</span>, count+<span class="number">1</span>);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span>(String tmp){</div><div class="line">        <span class="keyword">if</span> (tmp.charAt(<span class="number">0</span>)==<span class="string">'0'</span>) <span class="keyword">return</span> tmp.equals(<span class="string">"0"</span>);  <span class="comment">//001 is illegal, only 0 is legal here</span></div><div class="line">        <span class="keyword">int</span> num = Integer.valueOf(tmp);  </div><div class="line">        <span class="keyword">return</span> num&lt;=<span class="number">255</span> && num&gt;<span class="number">0</span>;  </div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Valid_Sudoku">Valid Sudoku</h2>
<blockquote>
<p>Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.<br>The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="pic"><br>A partially filled sudoku which is valid.<br>Note:<br>A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<p>Three HashSets, return false when add failure.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span>(<span class="keyword">char</span>[][] board) {</div><div class="line">    <span class="keyword">int</span> len=board[<span class="number">0</span>].length;</div><div class="line">    <span class="comment">//column</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len;i++){</div><div class="line">        HashSet&lt;Character&gt; col=<span class="keyword">new</span> HashSet&lt;Character&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ;j&lt;len;j++){</div><div class="line">        <span class="keyword">if</span>(board[j][i]!=<span class="string">'.'</span> && !col.add(board[j][i])) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    }</div><div class="line">    <span class="comment">//row</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len;i++){</div><div class="line">        HashSet&lt;Character&gt; row=<span class="keyword">new</span> HashSet&lt;Character&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ;j&lt;len;j++){</div><div class="line">        <span class="keyword">if</span>(board[i][j]!=<span class="string">'.'</span> && !row.add(board[i][j])) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    }</div><div class="line">    <span class="comment">//tuple</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++){</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++){</div><div class="line">            HashSet&lt;Character&gt; tup=<span class="keyword">new</span> HashSet&lt;Character&gt;();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=i*<span class="number">3</span>;m&lt;<span class="number">3</span>+i*<span class="number">3</span>;m++){</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> n=j*<span class="number">3</span>;n&lt;<span class="number">3</span>+j*<span class="number">3</span>;n++){</div><div class="line">                    <span class="keyword">if</span>(board[m][n]!=<span class="string">'.'</span> && !tup.add(board[m][n])) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Valid_Parentheses">Valid Parentheses</h2>
<blockquote>
<p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.<br>The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Math" scheme="http://sunbingjie.tk/tags/Math/"/>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="Stack" scheme="http://sunbingjie.tk/tags/Stack/"/>
    
      <category term="Backtracking" scheme="http://sunbingjie.tk/tags/Backtracking/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Find Minimum in Rotated Sorted Array, Find Minimum in Rotated Sorted Array II , Search in Rotated Sorted Array, Search in Rotated Sorted Array II, Search for a Range]]></title>
    <link href="http://sunbingjie.tk/2015/09/09/9.9/"/>
    <id>http://sunbingjie.tk/2015/09/09/9.9/</id>
    <published>2015-09-10T03:22:26.000Z</published>
    <updated>2015-09-10T03:22:26.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Find_Minimum_in_Rotated_Sorted_Array">Find Minimum in Rotated Sorted Array</h2>
<blockquote>
<p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.<br>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).<br>Find the minimum element.<br>You may assume no duplicate exists in the array.</p>
</blockquote>
<a id="more"></a>
<ul>
<li>If median element is larget than both low and high, then left part is increasing, smallest is in the right section</li>
<li>If median element is larger than low and smaller than high, then whole array is increaing, smallest is the left most item</li>
<li>If median element is smaller than both low and high, then the left part is increasing, smallest if in the left section</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMin</span>(<span class="keyword">int</span>[] nums) {</div><div class="line">	<span class="keyword">int</span> low=<span class="number">0</span>, high=nums.length-<span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span>(low&lt;high){</div><div class="line">		<span class="keyword">int</span> mid=(low+high)/<span class="number">2</span>;</div><div class="line">		<span class="keyword">if</span>(nums[low]&lt;=nums[mid] && nums[mid]&lt;=nums[high]) <span class="keyword">return</span> nums[low];</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;=nums[low] && nums[mid]&lt;=nums[high]){</div><div class="line">			high=mid;</div><div class="line">		}</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;=nums[low] && nums[mid]&gt;=nums[high]){</div><div class="line">			low=mid+<span class="number">1</span>;</div><div class="line">		}</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> nums[low];</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Find_Minimum_in_Rotated_Sorted_Array_II">Find Minimum in Rotated Sorted Array II</h2>
<blockquote>
<p>Follow up for “Find Minimum in Rotated Sorted Array”:<br>What if duplicates are allowed?<br>Would this affect the run-time complexity? How and why?<br>Suppose a sorted array is rotated at some pivot unknown to you beforehand.<br>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).<br>Find the minimum element.<br>The array may contain duplicates.</p>
</blockquote>
<h3 id="Solution">Solution</h3>
<ul>
<li>If median equals to either low or high, move two pointers to the first non-duplicate</li>
<li></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMin2</span>(<span class="keyword">int</span>[] nums) {</div><div class="line">	<span class="keyword">int</span> low=<span class="number">0</span>, high=nums.length-<span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span>(low&lt;high){</div><div class="line">		<span class="keyword">int</span> mid=(low+high)/<span class="number">2</span>;</div><div class="line">		<span class="keyword">while</span>(nums[low]==nums[mid] && low&lt;mid) low++;</div><div class="line">		<span class="keyword">while</span>(nums[high]==nums[mid] && high&gt;mid) high--;</div><div class="line">		<span class="keyword">if</span>(nums[mid]&gt;nums[high]){</div><div class="line">			low=mid+<span class="number">1</span>;</div><div class="line">		}</div><div class="line">		<span class="keyword">else</span>{</div><div class="line">			high=mid;</div><div class="line">		}</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> nums[low];</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Search_in_Rotated_Sorted_Array">Search in Rotated Sorted Array</h2>
<blockquote>
<p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.<br>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).<br>You are given a target value to search. If found in the array return its index, otherwise return -1.<br>You may assume no duplicate exists in the array.</p>
</blockquote>
<h3 id="O(Logn)_Solution">O(Logn) Solution</h3>
<ul>
<li>Find min, then start from that index use binary search to find key, but this solution is LTE…</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search</span>(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) {</div><div class="line">   	<span class="keyword">int</span> low=<span class="number">0</span>, high=nums.length-<span class="number">1</span>, mid=<span class="number">0</span>;</div><div class="line">   	<span class="keyword">while</span>(low&lt;high){</div><div class="line">   		mid=(low+high)/<span class="number">2</span>;</div><div class="line">   		<span class="keyword">while</span>(nums[low]==nums[mid] && low&lt;mid) low++;</div><div class="line">   		<span class="keyword">while</span>(nums[high]==nums[mid] && high&gt;mid) high--;</div><div class="line">   		<span class="keyword">if</span>(nums[mid]&gt;nums[high]){</div><div class="line">   			low=mid+<span class="number">1</span>;</div><div class="line">   		}</div><div class="line">   		<span class="keyword">else</span>{</div><div class="line">   			high=mid;</div><div class="line">   		}</div><div class="line">   	}</div><div class="line">   	<span class="keyword">int</span> min=low;</div><div class="line">   	<span class="keyword">if</span>(nums[nums.length-<span class="number">1</span>]&lt;target) {low=<span class="number">0</span>;high=min-<span class="number">1</span>;}</div><div class="line">   	<span class="keyword">else</span> {low=min; high=nums.length-<span class="number">1</span>;}</div><div class="line">       <span class="keyword">while</span>(low &lt;= high){</div><div class="line">           mid = (low + high)/<span class="number">2</span>;</div><div class="line">           <span class="keyword">if</span>(target &lt; nums[mid]){</div><div class="line">         	  high=mid-<span class="number">1</span>;</div><div class="line">           }</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(target &gt; nums[mid]){</div><div class="line">         	  low=mid+<span class="number">1</span>;</div><div class="line">           }</div><div class="line">           <span class="keyword">else</span> <span class="keyword">return</span> mid;</div><div class="line">       }</div><div class="line">       <span class="keyword">return</span> -<span class="number">1</span>;	</div><div class="line">   }</div></pre></td></tr></table></figure>

<h3 id="Solution-1">Solution</h3>
<ul>
<li>If target&lt;mid, and mid&lt;high, then right part is increasing, target is in [low,mid-1]</li>
<li>If target<mid, and="" mid="">=high, then left part is increasing. If now target&lt;low, then target is in [mid+1, high]; Else target is in [low, mid-1]</mid,></li>
<li>If target&gt;mid, and mid&gt;low, then left part is increasing, target is in [mid+1, high]</li>
<li>If target&gt;mid, and mid&lt;=low, then right part is increasing. If now target&gt;high, then target is in [low, mid-1];<br>Else target is in [mid+1, high]</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span>(<span class="keyword">int</span> [] A,<span class="keyword">int</span> target){</div><div class="line">       <span class="keyword">if</span>(A==<span class="keyword">null</span>||A.length==<span class="number">0</span>)</div><div class="line">         <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        </div><div class="line">       <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">       <span class="keyword">int</span> high = A.length-<span class="number">1</span>;</div><div class="line">      </div><div class="line">       <span class="keyword">while</span>(low &lt;= high){</div><div class="line">           <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</div><div class="line">           <span class="keyword">if</span>(target &lt; A[mid]){</div><div class="line">               <span class="keyword">if</span>(A[mid]&lt;A[high])<span class="comment">//right side is sorted</span></div><div class="line">                 high = mid - <span class="number">1</span>;<span class="comment">//target must in left side</span></div><div class="line">               <span class="keyword">else</span></div><div class="line">                 <span class="keyword">if</span>(target&lt;A[low])<span class="comment">//target&lt;A[mid]&&target&lt;A[low]==&gt;means,target cannot be in [low,mid] since this side is sorted</span></div><div class="line">                    low = mid + <span class="number">1</span>;</div><div class="line">                 <span class="keyword">else</span> </div><div class="line">                    high = mid - <span class="number">1</span>;</div><div class="line">           }<span class="keyword">else</span> <span class="keyword">if</span>(target &gt; A[mid]){</div><div class="line">               <span class="keyword">if</span>(A[low]&lt;A[mid])<span class="comment">//left side is sorted</span></div><div class="line">                 low = mid + <span class="number">1</span>;<span class="comment">//target must in right side</span></div><div class="line">               <span class="keyword">else</span></div><div class="line">                 <span class="keyword">if</span>(target&gt;A[high])<span class="comment">//right side is sorted. If target&gt;A[high] means target is not in this side</span></div><div class="line">                    high = mid - <span class="number">1</span>;</div><div class="line">                 <span class="keyword">else</span></div><div class="line">                    low = mid + <span class="number">1</span>;</div><div class="line">           }<span class="keyword">else</span></div><div class="line">             <span class="keyword">return</span> mid;</div><div class="line">       }</div><div class="line">       </div><div class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Search_in_Rotated_Sorted_Array_II">Search in Rotated Sorted Array II</h2>
<blockquote>
<p>Follow up for “Search in Rotated Sorted Array”:<br>What if duplicates are allowed?<br>Would this affect the run-time complexity? How and why?<br>Write a function to determine if a given target is in the array.</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">search</span>(<span class="keyword">int</span> [] A,<span class="keyword">int</span> target){</div><div class="line">        <span class="keyword">if</span>(A==<span class="keyword">null</span>||A.length==<span class="number">0</span>)</div><div class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">         </div><div class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> high = A.length-<span class="number">1</span>;</div><div class="line">       </div><div class="line">        <span class="keyword">while</span>(low &lt;= high){</div><div class="line">            <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(target &lt; A[mid]){</div><div class="line">                <span class="keyword">if</span>(A[mid]&lt;A[high])<span class="comment">//right side is sorted</span></div><div class="line">                  high = mid - <span class="number">1</span>;<span class="comment">//target must in left side</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(A[mid]==A[high]) high--; <span class="comment">//move upper boundary</span></div><div class="line">                <span class="keyword">else</span></div><div class="line">                  <span class="keyword">if</span>(target&lt;A[low])<span class="comment">//target&lt;A[mid]&&target&lt;A[low]==&gt;means,target cannot be in [low,mid] since this side is sorted</span></div><div class="line">                     low = mid + <span class="number">1</span>;</div><div class="line">                  <span class="keyword">else</span> </div><div class="line">                     high = mid - <span class="number">1</span>;</div><div class="line">            }<span class="keyword">else</span> <span class="keyword">if</span>(target &gt; A[mid]){</div><div class="line">                <span class="keyword">if</span>(A[low]&lt;A[mid])<span class="comment">//left side is sorted</span></div><div class="line">                  low = mid + <span class="number">1</span>;<span class="comment">//target must in right side</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(A[low]==A[mid]) low++; <span class="comment">//move lower boundary</span></div><div class="line">                <span class="keyword">else</span></div><div class="line">                  <span class="keyword">if</span>(target&gt;A[high])<span class="comment">//right side is sorted. If target&gt;A[high] means target is not in this side</span></div><div class="line">                     high = mid - <span class="number">1</span>;</div><div class="line">                  <span class="keyword">else</span></div><div class="line">                     low = mid + <span class="number">1</span>;</div><div class="line">            }<span class="keyword">else</span></div><div class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"> }</div></pre></td></tr></table></figure>

<h2 id="Search_for_a_Range">Search for a Range</h2>
<blockquote>
<p>Given a sorted array of integers, find the starting and ending position of a given target value.<br>Your algorithm’s runtime complexity must be in the order of O(log n).<br>If the target is not found in the array, return [-1, -1].<br>For example,<br>Given [5, 7, 7, 8, 8, 10] and target value 8,<br>return [3, 4].</p>
</blockquote>
<h3 id="Solution-3">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] <span class="title">searchRange</span>(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) {</div><div class="line">        <span class="keyword">int</span> low=<span class="number">0</span>, mid=<span class="number">0</span>; </div><div class="line">        <span class="keyword">int</span> high=nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">     </div><div class="line">        <span class="keyword">while</span>(low&lt;=high){</div><div class="line">        	mid=(low+high)/<span class="number">2</span>;</div><div class="line">        	<span class="keyword">if</span>(nums[mid]&lt;target) low=mid+<span class="number">1</span>;</div><div class="line">        	<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;target) high=mid-<span class="number">1</span>;</div><div class="line">        	<span class="keyword">else</span>{</div><div class="line">        		<span class="keyword">int</span> l=mid, r=mid;</div><div class="line">        		result[<span class="number">0</span>]=mid; result[<span class="number">1</span>]=mid;</div><div class="line">        		<span class="keyword">while</span>(l&gt;=<span class="number">0</span> && nums[l]==target){			</div><div class="line">        			result[<span class="number">0</span>]=l;</div><div class="line">        			l--;</div><div class="line">        		}</div><div class="line">        		</div><div class="line">        		<span class="keyword">while</span>(r&lt;=nums.length-<span class="number">1</span> && nums[r]==target){</div><div class="line">        			result[<span class="number">1</span>]=r;</div><div class="line">        			r++;</div><div class="line">        		}</div><div class="line">                <span class="keyword">return</span> result;	</div><div class="line">        	}</div><div class="line">        }     </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{-<span class="number">1</span>,-<span class="number">1</span>};</div><div class="line">    }</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Find_Minimum_in_Rotated_Sorted_Array">Find Minimum in Rotated Sorted Array</h2>
<blockquote>
<p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.<br>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).<br>Find the minimum element.<br>You may assume no duplicate exists in the array.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="Binary Search" scheme="http://sunbingjie.tk/tags/Binary-Search/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sudoku Solver, N-Queens, N-Queens II]]></title>
    <link href="http://sunbingjie.tk/2015/09/06/9.4/"/>
    <id>http://sunbingjie.tk/2015/09/06/9.4/</id>
    <published>2015-09-06T23:28:01.000Z</published>
    <updated>2015-09-06T23:28:01.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Sudoku_Solver">Sudoku Solver</h2>
<blockquote>
<p>Write a program to solve a Sudoku puzzle by filling the empty cells.<br>Empty cells are indicated by the character ‘.’.<br>You may assume that there will be only one unique solution.<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="pic"><br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png" alt="pic"></p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<ul>
<li>for each tuple that’s not a number already, try 1-9 numbers</li>
<li>if the board is still valid after placing the number, place it for now</li>
<li>continue to solve board, only if all number placed are valid can we return true</li>
<li>if we reached unvalid board, redo by setting the numbers to ‘.’</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solveSudoku</span>(<span class="keyword">char</span>[][] board){</div><div class="line">  	solver(board);</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">solver</span>(<span class="keyword">char</span>[][] board){</div><div class="line">  	</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;board.length; i++){</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;board[<span class="number">0</span>].length; j++){</div><div class="line">          	<span class="keyword">if</span>(board[i][j]==<span class="string">'.'</span>){</div><div class="line">          		<span class="keyword">for</span>(<span class="keyword">char</span> k=<span class="string">'1'</span>; k&lt;=<span class="string">'9'</span>; k++){</div><div class="line">          			<span class="keyword">if</span>(isValidSudoku(board, i, j, k)){</div><div class="line">              			board[i][j]=k; <span class="comment">//place number if valid</span></div><div class="line">          				<span class="keyword">if</span>(solver(board))</div><div class="line">          					{</div><div class="line">          						<span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//if after placed still can be solved</span></div><div class="line">          					}</div><div class="line">          				<span class="keyword">else</span>{</div><div class="line">              				board[i][j]=<span class="string">'.'</span>; <span class="comment">//else redo</span></div><div class="line">              			}</div><div class="line">          			}</div><div class="line">          		}</div><div class="line">          		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">          	}</div><div class="line">          }</div><div class="line">      }</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span>(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">char</span> tmp) {</div><div class="line">      <span class="comment">//row</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;board[<span class="number">0</span>].length;i++){</div><div class="line">          <span class="keyword">if</span>(board[row][i]==tmp) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      }</div><div class="line">      <span class="comment">//col</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;board.length;i++){</div><div class="line">      	<span class="keyword">if</span>(board[i][col]==tmp) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      }</div><div class="line">      <span class="comment">//tuple</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> m=row/<span class="number">3</span>*<span class="number">3</span>;m&lt;<span class="number">3</span>+row/<span class="number">3</span>*<span class="number">3</span>;m++){</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> n=col/<span class="number">3</span>*<span class="number">3</span>;n&lt;<span class="number">3</span>+col/<span class="number">3</span>*<span class="number">3</span>;n++){</div><div class="line">              <span class="keyword">if</span>(board[m][n]==tmp) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">          }</div><div class="line">      }</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  }</div></pre></td></tr></table></figure>

<hr>
<h2 id="N-Queens">N-Queens</h2>
<blockquote>
<p>The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.<br><img src="http://www.leetcode.com/wp-content/uploads/2012/03/8-queens.png" alt="pic"><br>Given an integer n, return all distinct solutions to the n-queens puzzle.<br>Each solution contains a distinct board configuration of the n-queens’ placement, where ‘Q’ and ‘.’ both indicate a queen and an empty space respectively.<br>For example,<br>There exist two distinct solutions to the 4-queens puzzle:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line"> [<span class="string">".Q.."</span>,  // Solution <span class="number">1</span></div><div class="line">  <span class="string">"...Q"</span>,</div><div class="line">  <span class="string">"Q..."</span>,</div><div class="line">  <span class="string">"..Q."</span>],</div><div class="line"></div><div class="line"> [<span class="string">"..Q."</span>,  // Solution <span class="number">2</span></div><div class="line">  <span class="string">"Q..."</span>,</div><div class="line">  <span class="string">"...Q"</span>,</div><div class="line">  <span class="string">".Q.."</span>]</div><div class="line">]</div></pre></td></tr></table></figure>

<h3 id="Solution-1"><a href="http://blog.csdn.net/linhuanmars/article/details/20667175" target="_blank" rel="external">Solution</a></h3>
<ul>
<li><p>Very interesting problem: The queen can be moved any number of unoccupied squares in a straight line vertically, horizontally, or diagonally. So easily we come to the conclusion that each row can only stand 1 queen, as well as each column, diagonal.</p>
</li>
<li><p>Because of the previous observation, we can use a 1D array to store the positions, instead of using 2D array.<br>ColforRow[i] records the queen in row i is in which column</p>
</li>
<li><p>For each row, try all columns and if is valid, check for next row</p>
</li>
<li><p>When row == n, all rows have found their queens, these are valid solutions</p>
</li>
<li><p>What are valid positions for current row? Only need to check column and diagonal</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title">solveNQueens</span>(<span class="keyword">int</span> n) {</div><div class="line">   	List&lt;List&lt;String&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</div><div class="line">   	solve(res, n, <span class="number">0</span>, <span class="keyword">new</span> <span class="keyword">int</span>[n]);</div><div class="line">   	<span class="keyword">return</span> res;</div><div class="line">   } </div><div class="line">   </div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solve</span>(List&lt;List&lt;String&gt;&gt; res, <span class="keyword">int</span> n, <span class="keyword">int</span> row, <span class="keyword">int</span>[] ColforRow){</div><div class="line">   	<span class="keyword">if</span>(row==n){</div><div class="line">   		ArrayList&lt;String&gt; rowitem=<span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">   		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++){	</div><div class="line">   			StringBuilder rowstring = <span class="keyword">new</span> StringBuilder();</div><div class="line">   			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++){	</div><div class="line">   				<span class="keyword">if</span>(ColforRow[i]==j){</div><div class="line">   					rowstring.append(<span class="string">'Q'</span>);</div><div class="line">   				}</div><div class="line">   				<span class="keyword">else</span>{</div><div class="line">   					rowstring.append(<span class="string">'.'</span>);</div><div class="line">   				}</div><div class="line">   			}</div><div class="line">   			rowitem.add(rowstring.toString());</div><div class="line">   		}</div><div class="line">   		res.add(rowitem);</div><div class="line">   		<span class="keyword">return</span>;</div><div class="line">   	}</div><div class="line">   	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++){</div><div class="line">   		ColforRow[row] = i;</div><div class="line">   		<span class="keyword">if</span>(isValid(row, ColforRow)){</div><div class="line">   			solve(res, n, row+<span class="number">1</span>, ColforRow);</div><div class="line">   		}</div><div class="line">   	}</div><div class="line">   }</div><div class="line">   </div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span>(<span class="keyword">int</span> row, <span class="keyword">int</span>[] ColforRow){</div><div class="line">   	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++){</div><div class="line">   		<span class="keyword">if</span>(ColforRow[row]==ColforRow[i] || Math.abs(ColforRow[row]-ColforRow[i])==row-i) <span class="comment">// if same column, or same diagonal</span></div><div class="line">   			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   	}</div><div class="line">   	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="N-Queens_II">N-Queens II</h2>
<blockquote>
<p>Follow up for N-Queens problem.<br>Now, instead outputting board configurations, return the total number of distinct solutions.<br><img src="http://www.leetcode.com/wp-content/uploads/2012/03/8-queens.png" alt="pic"></p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<ul>
<li>Add count when a new solution is found (row==n)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">totalNQueens</span>(<span class="keyword">int</span> n) {</div><div class="line">      <span class="keyword">int</span>[] count={<span class="number">0</span>};</div><div class="line">  	solve(n, <span class="number">0</span>, <span class="keyword">new</span> <span class="keyword">int</span>[n], count);</div><div class="line">  	<span class="keyword">return</span> count[<span class="number">0</span>];</div><div class="line">  }</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solve</span>(<span class="keyword">int</span> n, <span class="keyword">int</span> row, <span class="keyword">int</span>[] ColforRow, <span class="keyword">int</span>[] count){</div><div class="line">  	<span class="keyword">if</span>(row==n){</div><div class="line">  		count[<span class="number">0</span>]+=<span class="number">1</span>;</div><div class="line">  		<span class="keyword">return</span>;</div><div class="line">  	}</div><div class="line">  	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++){</div><div class="line">  		ColforRow[row] = i;</div><div class="line">  		<span class="keyword">if</span>(isValid(row, ColforRow)){</div><div class="line">  			solve(n, row+<span class="number">1</span>, ColforRow, count);</div><div class="line">  		}</div><div class="line">  	}</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span>(<span class="keyword">int</span> row, <span class="keyword">int</span>[] ColforRow){</div><div class="line">  	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++){</div><div class="line">  		<span class="keyword">if</span>(ColforRow[row]==ColforRow[i] || Math.abs(ColforRow[row]-ColforRow[i])==row-i) <span class="comment">// if same column, or same diagonal</span></div><div class="line">  			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  	}</div><div class="line">  	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  }</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Sudoku_Solver">Sudoku Solver</h2>
<blockquote>
<p>Write a program to solve a Sudoku puzzle by filling the empty cells.<br>Empty cells are indicated by the character ‘.’.<br>You may assume that there will be only one unique solution.<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="pic"><br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png" alt="pic"></p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="Backtracking" scheme="http://sunbingjie.tk/tags/Backtracking/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Plus One, Largest Number, Pow(x, n), Sqrt(x) , Min Stack, Word Ladder, Word Ladder II]]></title>
    <link href="http://sunbingjie.tk/2015/09/06/1.24/"/>
    <id>http://sunbingjie.tk/2015/09/06/1.24/</id>
    <published>2015-09-06T23:27:49.000Z</published>
    <updated>2015-09-06T23:27:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Plus_One">Plus One</h2>
<blockquote>
<p>Given a non-negative number represented as an array of digits, plus one to the number.<br>The digits are stored such that the most significant digit is at the head of the list.</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<p>Just find the last 9…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">plusOne</span>(<span class="keyword">int</span>[] digits) {</div><div class="line">          <span class="keyword">int</span> i=digits.length-<span class="number">1</span>;</div><div class="line">          <span class="keyword">for</span>(;i&gt;=<span class="number">0</span>;i--){</div><div class="line">              <span class="keyword">if</span>(digits[i]!=<span class="number">9</span>) <span class="keyword">break</span>;</div><div class="line">          }</div><div class="line">            </div><div class="line">          <span class="keyword">if</span>(i==-<span class="number">1</span>){</div><div class="line">              <span class="keyword">int</span>[] res=<span class="keyword">new</span> <span class="keyword">int</span>[digits.length+<span class="number">1</span>];</div><div class="line">                      res[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">                      <span class="keyword">return</span> res;</div><div class="line">          }   </div><div class="line">           </div><div class="line">          <span class="keyword">else</span>{</div><div class="line">             <span class="keyword">int</span>[] res=<span class="keyword">new</span> <span class="keyword">int</span>[digits.length];</div><div class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++){</div><div class="line">                 res[j]=digits[j];</div><div class="line">             }</div><div class="line">             res[i]+=<span class="number">1</span>;</div><div class="line">             <span class="keyword">return</span> res;</div><div class="line">          } </div><div class="line"> </div><div class="line">      }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Largest_Number">Largest Number</h2>
<blockquote>
<p>Given a list of non negative integers, arrange them such that they form the largest number.<br>For example, given [3, 30, 34, 5, 9], the largest formed number is 9534330.<br>Note: The result may be very large, so you need to return a string instead of an integer.</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<p>Rewirte comparator (to desc), sort and add.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">StringComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>{</div><div class="line">       <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span>(String x, String y) {</div><div class="line">           <span class="keyword">if</span> (x.equals(y)) <span class="keyword">return</span> <span class="number">0</span>;            </div><div class="line">           <span class="keyword">return</span> -(x+y).compareTo(y+x);</div><div class="line">       }</div><div class="line">   }</div><div class="line"><span class="keyword">public</span> String <span class="title">largestNumber</span>(<span class="keyword">int</span>[] num){</div><div class="line">  String[] nums = <span class="keyword">new</span> String[num.length];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;num.length;i++){</div><div class="line">    nums[i]=String.valueOf(num[i]);</div><div class="line">  }</div><div class="line">  Comparator&lt;String&gt; comparator = <span class="keyword">new</span> StringComparator();</div><div class="line">  Arrays.sort(nums,comparator);</div><div class="line">  StringBuilder str = <span class="keyword">new</span> StringBuilder();</div><div class="line">  <span class="keyword">for</span>(String n:nums){</div><div class="line">    str.append(n);</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> str.charAt(<span class="number">0</span>)==<span class="string">'0'</span>?<span class="string">"0"</span>:str.toString();</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Pow(x,_n)">Pow(x, n)</h2>
<blockquote>
<p>Implement pow(x, n).</p>
</blockquote>
<h3 id="Recursive_Solution">Recursive Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pow</span>(<span class="keyword">double</span> x, <span class="keyword">int</span> n) {</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>)</div><div class="line">    {</div><div class="line">        n=-n;</div><div class="line">        x=<span class="number">1</span>/x;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> n%<span class="number">2</span>==<span class="number">0</span> ? pow(x*x,n/<span class="number">2</span>) : x*pow(x*x,n/<span class="number">2</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Sqrt(x)">Sqrt(x)</h2>
<blockquote>
<p>Implement int sqrt(int x).<br>Compute and return the square root of x.</p>
</blockquote>
<h3 id="Solution-2"><a href="http://www.cnblogs.com/pkuoliver/archive/2010/10/06/1844725.html" target="_blank" rel="external">Solution</a></h3>
<p>Beware of overflow problems…<br>mid*mid could overflow, instead of using long, compare mid with x/mid<br>but now we have to treat 0 and 1 as special cases…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sqrt</span>(<span class="keyword">int</span> x) {     </div><div class="line">       <span class="keyword">int</span> l=<span class="number">0</span>,r=x;</div><div class="line">       <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">       <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">       <span class="keyword">while</span>(l&lt;=r){</div><div class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(x/mid==mid) <span class="keyword">return</span> mid;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid&gt;x/mid){r=mid-<span class="number">1</span>;}</div><div class="line">        <span class="keyword">else</span> {l=mid+<span class="number">1</span>;}</div><div class="line">       }</div><div class="line">       <span class="keyword">return</span> r;      </div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Min_Stack">Min Stack</h2>
<blockquote>
<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.<br>push(x) — Push element x onto stack.<br>pop() — Removes the element on top of the stack.<br>top() — Get the top element.<br>getMin() — Retrieve the minimum element in the stack.</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<p>Just use an extra stack to keep track of the min values…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Stack&lt;Integer&gt; stk=<span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">   Stack&lt;Integer&gt; minstk=<span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">   </div><div class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span>(<span class="keyword">int</span> x) {</div><div class="line">       stk.push(x);</div><div class="line">       <span class="keyword">if</span>(minstk.isEmpty() || x&lt;=minstk.peek()){minstk.push(x);}</div><div class="line">   }</div><div class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span>() {</div><div class="line">    <span class="keyword">if</span>(stk.isEmpty()) <span class="keyword">return</span>;     </div><div class="line">       <span class="keyword">int</span> tmp=stk.pop();</div><div class="line">       <span class="keyword">if</span>(!minstk.isEmpty() && tmp==minstk.peek()){minstk.pop();}</div><div class="line">   }</div><div class="line">   <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span>() {</div><div class="line">    <span class="keyword">if</span>(stk.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> stk.peek();</div><div class="line">   }</div><div class="line">   <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span>() {</div><div class="line">       <span class="keyword">if</span>(!minstk.isEmpty()) <span class="keyword">return</span> minstk.peek();</div><div class="line">       <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Word_Ladder">Word Ladder</h2>
<blockquote>
<p>Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:<br>Only one letter can be changed at a time<br>Each intermediate word must exist in the dictionary<br>For example,<br>Given:<br>start = “hit”<br>end = “cog”<br>dict = [“hot”,”dot”,”dog”,”lot”,”log”]<br>As one shortest transformation is “hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; “cog”,<br>return its length 5.<br>Note:<br>Return 0 if there is no such transformation sequence.<br>All words have the same length.<br>All words contain only lowercase alphabetic characters.</p>
</blockquote>
<h3 id="BFS_Search_Solution">BFS Search Solution</h3>
<p>Naive approach might not give the shortest length, this problem is equavlent to finding the shortes path between start and end characters, in a graph where chars in dict are vertexes and vertexes with one char difference are connected.</p>
<p>Few more details to attend to:</p>
<p>length should start at 1, and return length+1<br>queue.size() and q.poll() is changing within each loop, so keep track of them</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span>(String start, String end, HashSet&lt;String&gt; dict) {</div><div class="line">    LinkedList&lt;String&gt; q=<span class="keyword">new</span> LinkedList&lt;String&gt;();</div><div class="line">    <span class="keyword">if</span>(start==<span class="keyword">null</span> || end==<span class="keyword">null</span> || dict==<span class="keyword">null</span> || dict.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> length=<span class="number">1</span>;</div><div class="line">    q.offer(start);</div><div class="line">    dict.remove(start);</div><div class="line">    <span class="keyword">while</span>(!q.isEmpty()){</div><div class="line">        <span class="keyword">int</span> count_level=q.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count_level;i++){</div><div class="line">            String cur=q.poll();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur.length();j++){</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">'a'</span>; c&lt;=<span class="string">'z'</span>;c++){</div><div class="line">                    String tmp=reorg(cur, j, c);</div><div class="line">                    <span class="keyword">if</span>(tmp.equals(end)) <span class="keyword">return</span> length+<span class="number">1</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(dict.contains(tmp)){dict.remove(tmp); q.offer(tmp);}</div><div class="line">                } </div><div class="line">            }</div><div class="line">        } length++;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div><div class="line"><span class="keyword">private</span> String <span class="title">reorg</span>(String s, <span class="keyword">int</span> i, <span class="keyword">char</span> c)</div><div class="line">{</div><div class="line">    <span class="keyword">char</span>[] tmparr=s.toCharArray();</div><div class="line">    tmparr[i]=c;</div><div class="line">    String res=<span class="keyword">new</span> String(tmparr);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Word_Ladder_II">Word Ladder II</h2>
<blockquote>
<p>Given two words (start and end), and a dictionary, find all shortest transformation sequence(s) from start to end, such that:<br>Only one letter can be changed at a time<br>Each intermediate word must exist in the dictionary<br>For example,<br>Given:<br>start = “hit”<br>end = “cog”<br>dict = [“hot”,”dot”,”dog”,”lot”,”log”]<br>Return</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="string">"hit"</span>,<span class="string">"hot"</span>,<span class="string">"dot"</span>,<span class="string">"dog"</span>,<span class="string">"cog"</span>],</div><div class="line">  [<span class="string">"hit"</span>,<span class="string">"hot"</span>,<span class="string">"lot"</span>,<span class="string">"log"</span>,<span class="string">"cog"</span>]</div><div class="line">]</div></pre></td></tr></table></figure>

<p>Note:<br>All words have the same length.<br>All words contain only lowercase alphabetic characters.</p>
<p>人家的解法都看晕了…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</div><div class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;String&gt;&gt; <span class="title">findLadders</span>(String start, String end, HashSet&lt;String&gt; dict) {</div><div class="line">        </div><div class="line">        <span class="comment">// Start typing your Java solution below</span></div><div class="line">        <span class="comment">// DO NOT write main() function              </span></div><div class="line">        </div><div class="line">        HashMap&lt;String, HashSet&lt;String&gt;&gt; neighbours = <span class="keyword">new</span> HashMap&lt;String, HashSet&lt;String&gt;&gt;();</div><div class="line">        </div><div class="line">        dict.add(start);</div><div class="line">        dict.add(end);</div><div class="line">        </div><div class="line">        <span class="comment">// init adjacent graph        </span></div><div class="line">        <span class="keyword">for</span>(String str : dict){</div><div class="line">            calcNeighbours(neighbours, str, dict);</div><div class="line">        }</div><div class="line">        </div><div class="line">        ArrayList&lt;ArrayList&lt;String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;String&gt;&gt;();</div><div class="line">        </div><div class="line">        <span class="comment">// BFS search queue</span></div><div class="line">        LinkedList&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</div><div class="line">        queue.add(<span class="keyword">new</span> Node(<span class="keyword">null</span>, start, <span class="number">1</span>));</div><div class="line">        </div><div class="line">        <span class="comment">// BFS level</span></div><div class="line">        <span class="keyword">int</span> previousLevel = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="comment">// mark which nodes have been visited, to break infinite loop</span></div><div class="line">        HashMap&lt;String, Integer&gt; visited = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;(); </div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty()){</div><div class="line">            Node n = queue.pollFirst();            </div><div class="line">            <span class="keyword">if</span>(end.equals(n.str)){ </div><div class="line">                <span class="comment">// fine one path, check its length, if longer than previous path it's valid</span></div><div class="line">                <span class="comment">// otherwise all possible short path have been found, should stop</span></div><div class="line">                <span class="keyword">if</span>(previousLevel == <span class="number">0</span> || n.level == previousLevel){</div><div class="line">                    previousLevel = n.level;</div><div class="line">                    findPath(n, result);                    </div><div class="line">                }<span class="keyword">else</span> {</div><div class="line">                    <span class="comment">// all path with length *previousLevel* have been found</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                }                </div><div class="line">            }<span class="keyword">else</span> {</div><div class="line">                HashSet&lt;String&gt; set = neighbours.get(n.str);                 </div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(set == <span class="keyword">null</span> || set.isEmpty()) <span class="keyword">continue</span>;</div><div class="line">                <span class="comment">// note: I'm not using simple for(String s: set) here. This is to avoid hashset's</span></div><div class="line">                <span class="comment">// current modification exception.</span></div><div class="line">                ArrayList&lt;String&gt; toRemove = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">                <span class="keyword">for</span> (String s : set) {</div><div class="line">                    </div><div class="line">                    <span class="comment">// if s has been visited before at a smaller level, there is already a shorter </span></div><div class="line">                    <span class="comment">// path from start to s thus we should ignore s so as to break infinite loop; if </span></div><div class="line">                    <span class="comment">// on the same level, we still need to put it into queue.</span></div><div class="line">                    <span class="keyword">if</span>(visited.containsKey(s)){</div><div class="line">                        Integer occurLevel = visited.get(s);</div><div class="line">                        <span class="keyword">if</span>(n.level+<span class="number">1</span> &gt; occurLevel){</div><div class="line">                            neighbours.get(s).remove(n.str);</div><div class="line">                            toRemove.add(s);</div><div class="line">                            <span class="keyword">continue</span>;</div><div class="line">                        }</div><div class="line">                    }</div><div class="line">                    visited.put(s,  n.level+<span class="number">1</span>);</div><div class="line">                    queue.add(<span class="keyword">new</span> Node(n, s, n.level + <span class="number">1</span>));</div><div class="line">                    <span class="keyword">if</span>(neighbours.containsKey(s))</div><div class="line">                        neighbours.get(s).remove(n.str);</div><div class="line">                }</div><div class="line">                <span class="keyword">for</span>(String s: toRemove){</div><div class="line">                    set.remove(s);</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPath</span>(Node n, ArrayList&lt;ArrayList&lt;String&gt;&gt; result){</div><div class="line">        ArrayList&lt;String&gt; path = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        Node p = n;</div><div class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span>){</div><div class="line">            path.add(<span class="number">0</span>, p.str);</div><div class="line">            p = p.parent; </div><div class="line">        }</div><div class="line">        result.add(path);</div><div class="line">    }</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * complexity: O(26*str.length*dict.size)=O(L*N)</div><div class="line">     */</div><div class="line">    <span class="keyword">void</span> calcNeighbours(HashMap&lt;String, HashSet&lt;String&gt;&gt; neighbours, String str, HashSet&lt;String&gt; dict) {</div><div class="line">        <span class="keyword">int</span> length = str.length();</div><div class="line">        <span class="keyword">char</span> [] chars = str.toCharArray();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) {</div><div class="line">            </div><div class="line">            <span class="keyword">char</span> old = chars[i]; </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; c++) {</div><div class="line">                <span class="keyword">if</span> (c == old)  <span class="keyword">continue</span>;</div><div class="line">                chars[i] = c;</div><div class="line">                String newstr = <span class="keyword">new</span> String(chars);                </div><div class="line">                </div><div class="line">                <span class="keyword">if</span> (dict.contains(newstr)) {</div><div class="line">                    HashSet&lt;String&gt; set = neighbours.get(str);</div><div class="line">                    <span class="keyword">if</span> (set != <span class="keyword">null</span>) {</div><div class="line">                        set.add(newstr);</div><div class="line">                    } <span class="keyword">else</span> {</div><div class="line">                        HashSet&lt;String&gt; newset = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">                        newset.add(newstr);</div><div class="line">                        neighbours.put(str, newset);</div><div class="line">                    }</div><div class="line">                }                </div><div class="line">            }</div><div class="line">            chars[i] = old;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</div><div class="line">        <span class="keyword">public</span> Node parent;</div><div class="line">        <span class="keyword">public</span> String str;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> level;</div><div class="line">        <span class="keyword">public</span> <span class="title">Node</span>(Node p, String s, <span class="keyword">int</span> l){</div><div class="line">            parent = p;</div><div class="line">            str = s;</div><div class="line">            level = l;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>





<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fsnow-man-4%2Fthe-xx-intro-themmmixx-long&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>




]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Plus_One">Plus One</h2>
<blockquote>
<p>Given a non-negative number represented as an array of digits, plus one to the number.<br>The digits are stored such that the most significant digit is at the head of the list.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Math" scheme="http://sunbingjie.tk/tags/Math/"/>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="String" scheme="http://sunbingjie.tk/tags/String/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Single Number, Single Number II, Decode Ways, Triangle]]></title>
    <link href="http://sunbingjie.tk/2015/09/03/4.12/"/>
    <id>http://sunbingjie.tk/2015/09/03/4.12/</id>
    <published>2015-09-04T03:42:27.000Z</published>
    <updated>2015-09-04T03:42:27.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Single_Number">Single Number</h2>
<blockquote>
<p>Given an array of integers, every element appears twice except for one. Find that single one.<br>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
</blockquote>
<a id="more"></a>
<h3 id="O(n)_Memory_O(n)_Time_Solution">O(n) Memory O(n) Time Solution</h3>
<p>LTE? With an instantiated Iterator I can pass the OJ…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span>(<span class="keyword">int</span>[] A) {</div><div class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</div><div class="line">    <span class="keyword">for</span>(Integer i:A){</div><div class="line">        <span class="keyword">if</span>(set.contains(i)) set.remove(i);</div><div class="line">        <span class="keyword">else</span> set.add(i);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> set.iterator().next();</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="XOR_Solution">XOR Solution</h3>
<p><a href="http://wezly.iteye.com/blog/1120823" target="_blank" rel="external">Similar Problem</a></p>
<ul>
<li><p>n+1 elements in range n, find the duplicate. take XOR between 1 to n, and the given array.</p>
</li>
<li><p>Here we use the property x^x=0，x^0=x</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span>(<span class="keyword">int</span>[] A) {</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(Integer i:A){</div><div class="line">        res ^= i;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Single_Number_II">Single Number II</h2>
<blockquote>
<p>Given an array of integers, every element appears three times except for one. Find that single one.<br>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
</blockquote>
<h3 id="Solution">Solution</h3>
<ul>
<li>count 1 in each bit position among all A numbers.</li>
<li>if a count can be divided by 3, then it does not contain single number</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span>(<span class="keyword">int</span>[] A) {</div><div class="line">    <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++){</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;A.length;j++){</div><div class="line">            <span class="keyword">if</span>((A[j]&gt;&gt;i & <span class="number">1</span>)==<span class="number">1</span>){</div><div class="line">                count[i]+=<span class="number">1</span>; <span class="comment">//increment bit bin</span></div><div class="line">            }</div><div class="line">        }</div><div class="line">        res |= count[i]%<span class="number">3</span> &lt;&lt; i; <span class="comment">//recover single number</span></div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Decode_Ways">Decode Ways</h2>
<blockquote>
<p>A message containing letters from A-Z is being encoded to numbers using the following mapping:</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'A'</span> -&gt; <span class="number">1</span></div><div class="line"><span class="string">'B'</span> -&gt; <span class="number">2</span></div><div class="line"><span class="keyword">...</span></div><div class="line"><span class="string">'Z'</span> -&gt; <span class="number">26</span></div></pre></td></tr></table></figure>

<p>Given an encoded message containing digits, determine the total number of ways to decode it.<br>For example,<br>Given encoded message “12”, it could be decoded as “AB” (1 2) or “L” (12).<br>The number of ways decoding “12” is 2.</p>
<h3 id="Recursive_Solution">Recursive Solution</h3>
<ul>
<li>quite straight forward…? LTE..</li>
<li>when at i, we can decode i separately , or decode i,i+1 as a whole</li>
<li>checking conditions: 1X or &lt;26, then we can return substr(1) + substr(2). </li>
<li>only when len==2 under this case, s.len would be 0, and return 1</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span>(String s) {</div><div class="line">    <span class="keyword">if</span>(s.length() == <span class="number">0</span> || s.length() == <span class="number">1</span> && s.charAt(<span class="number">0</span>) != <span class="string">'0'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(s.charAt(<span class="number">0</span>) == <span class="string">'0'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(s.charAt(<span class="number">0</span>) == <span class="string">'1'</span> || (s.charAt(<span class="number">0</span>) == <span class="string">'2'</span> && s.charAt(<span class="number">1</span>) &lt;= <span class="string">'6'</span>))</div><div class="line">        <span class="keyword">return</span> numDecodings(s.substring(<span class="number">1</span>)) + numDecodings(s.substring(<span class="number">2</span>));</div><div class="line">    <span class="keyword">return</span> numDecodings(s.substring(<span class="number">1</span>));</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="DP_Solution">DP Solution</h3>
<p>＋ ways[i] represents the # of decoding from i to end</p>
<ul>
<li>given s[i] is not ‘0’, we can always decode s in ways[i+1] ways, viewing s[i] as a separate code, ways[i] = ways[i+1]</li>
<li>check if i,i+1 forms a valid code, ways[i] = ways[i+1] + ways[i+2] </li>
<li>if s[i] is ‘0’, ways[i] is set to 0</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span>(String s) {</div><div class="line">    <span class="keyword">if</span>(s.length() == <span class="number">0</span> || s==<span class="keyword">null</span> || s.charAt(<span class="number">0</span>) == <span class="string">'0'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span>[] ways = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()+<span class="number">1</span>];</div><div class="line">    ways[s.length()] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s.length()-<span class="number">1</span>; i&gt;=<span class="number">0</span>;i--){</div><div class="line">        <span class="keyword">if</span>(s.charAt(i) == <span class="string">'0'</span>) ways[i]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> ways[i] = ways[i+<span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>(i+<span class="number">1</span>&lt;s.length() && (s.charAt(i) == <span class="string">'1'</span> || s.charAt(i) == <span class="string">'2'</span> && s.charAt(i+<span class="number">1</span>) &lt;= <span class="string">'6'</span>))</div><div class="line">            ways[i] = ways[i] + ways[i+<span class="number">2</span>];</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> ways[<span class="number">0</span>];</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="DP_forward">DP forward</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span>(String s) {</div><div class="line">    <span class="keyword">int</span>[] ways = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()+<span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(s.charAt(<span class="number">0</span>)==<span class="string">'0'</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    ways[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    ways[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=s.length();i++){</div><div class="line">        <span class="keyword">if</span>(s.charAt(i-<span class="number">1</span>)==<span class="string">'0'</span>){</div><div class="line">            <span class="keyword">if</span>(s.charAt(i-<span class="number">2</span>)==<span class="string">'1'</span> ||s.charAt(i-<span class="number">2</span>)==<span class="string">'2'</span>){ways[i]=ways[i-<span class="number">2</span>]; }</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span>{</div><div class="line">            <span class="keyword">if</span>(s.charAt(i-<span class="number">1</span>)&lt;=<span class="string">'6'</span> && s.charAt(i-<span class="number">2</span>)==<span class="string">'2'</span> || s.charAt(i-<span class="number">2</span>)==<span class="string">'1'</span>){</div><div class="line">                ways[i]=ways[i-<span class="number">1</span>]+ways[i-<span class="number">2</span>];</div><div class="line">            }   </div><div class="line">            <span class="keyword">else</span> ways[i]=ways[i-<span class="number">1</span>];</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> ways[s.length()];</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="O(1)_Space_DP">O(1) Space DP</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span>(String s) {</div><div class="line">    <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length()==<span class="number">0</span> || s.charAt(<span class="number">0</span>)==<span class="string">'0'</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> twopre = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> onepre = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length();i++){</div><div class="line">        <span class="keyword">if</span>(s.charAt(i)==<span class="string">'0'</span>){</div><div class="line">            <span class="keyword">if</span>(s.charAt(i-<span class="number">1</span>)==<span class="string">'1'</span> ||s.charAt(i-<span class="number">1</span>)==<span class="string">'2'</span>){cur = twopre; }</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span>{</div><div class="line">            <span class="keyword">if</span>(s.charAt(i)&lt;=<span class="string">'6'</span> && s.charAt(i-<span class="number">1</span>)==<span class="string">'2'</span> || s.charAt(i-<span class="number">1</span>)==<span class="string">'1'</span>){</div><div class="line">                cur = twopre + onepre;</div><div class="line">            }   </div><div class="line">            <span class="keyword">else</span> cur=onepre;</div><div class="line">        }</div><div class="line">        twopre=onepre;</div><div class="line">        onepre=cur;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> cur;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Triangle">Triangle</h2>
<blockquote>
<p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below<br>For example, given the following triangle</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">     [<span class="number">2</span>],</div><div class="line">    [<span class="number">3</span>,<span class="number">4</span>],</div><div class="line">   [<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>],</div><div class="line">  [<span class="number">4</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">3</span>]</div><div class="line">]</div></pre></td></tr></table></figure>

<p>The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).<br>Note:<br>Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.</p>
<h3 id="Inplace_DP_Solution">Inplace DP Solution</h3>
<ul>
<li>start from second to end level, change each element to the smaller sum with lower level’s two adjacent elements</li>
<li>the top one will be the shortest path</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span>(List&lt;List&lt;Integer&gt;&gt; triangle) {</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=triangle.size()-<span class="number">2</span>; i&gt;=<span class="number">0</span>; i--){</div><div class="line">        List&lt;Integer&gt; tmp = triangle.get(i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;tmp.size();j++){</div><div class="line">            tmp.set(j, tmp.get(j) + Math.min(triangle.get(i+<span class="number">1</span>).get(j),triangle.get(i+<span class="number">1</span>).get(j+<span class="number">1</span>)));</div><div class="line">        }    </div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> triangle.get(<span class="number">0</span>).get(<span class="number">0</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Finterscope%2Flana-del-rey-video-games&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Single_Number">Single Number</h2>
<blockquote>
<p>Given an array of integers, every element appears twice except for one. Find that single one.<br>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="DFS" scheme="http://sunbingjie.tk/tags/DFS/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="Bit Manipulation" scheme="http://sunbingjie.tk/tags/Bit-Manipulation/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Great Tree-List Recursion Problem, LRU Cache, Search Insert Position, Longest Common Prefix, Linked List Cycle, Linked List Cycle II]]></title>
    <link href="http://sunbingjie.tk/2015/09/03/4.18/"/>
    <id>http://sunbingjie.tk/2015/09/03/4.18/</id>
    <published>2015-09-04T03:39:23.000Z</published>
    <updated>2015-09-04T03:39:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="First_Problem_ఠ_ఠ">First Problem ఠ_ఠ</h2>
<blockquote>
<p>Convert a given Binary Tree to Doubly Linked List</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<p>Inorder traversal, then link each value…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> DListNode pre = <span class="keyword">new</span> DListNode();</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> DListNode dummy = pre;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">btreetolist</span>(TreeNode r){</div><div class="line">    <span class="keyword">if</span>(r==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    btreetolist(r.left);</div><div class="line">    DListNode cur = <span class="keyword">new</span> DListNode(r);</div><div class="line">    cur.prev = pre;</div><div class="line">    pre.next = cur;</div><div class="line">    pre = cur;</div><div class="line">    btreetolist(r.right);</div><div class="line">    }</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">    TreeNode root = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</div><div class="line">    TreeNode l = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</div><div class="line">    TreeNode r = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</div><div class="line">    root.left = l; root.right=r;</div><div class="line">    btreetolist(root);</div><div class="line">    System.out.println(dummy.next.val.val);</div><div class="line">    System.out.println(dummy.next.next.val.val);</div><div class="line">    System.out.println(dummy.next.next.next.val.val);</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="The_Great_Tree-List_Recursion_Problem"><a href="http://cslibrary.stanford.edu/109/TreeListRecursion.html" target="_blank" rel="external">The Great Tree-List Recursion Problem</a></h2>
<blockquote>
<p>Here’s the formal problem statement: Write a recursive function treeToList(Node root) that takes an ordered binary tree and rearranges the internal pointers to make a circular doubly linked list out of the tree nodes. The “previous” pointers should be stored in the “small” field and the “next” pointers should be stored in the “large” field. The list should be arranged so that the nodes are in increasing order. Return the head pointer to the new list. The operation can be done in O(n) time — essentially operating on each node once. Basically take figure-1 as input and rearrange the pointers to make figure-2.</p>
</blockquote>
<p><img src="http://cslibrary.stanford.edu/109/tree.gif" alt=""><br><img src="http://cslibrary.stanford.edu/109/list.gif" alt=""></p>
<h3 id="Solution-1">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">This is the simple Node class from which the tree and list</div><div class="line">are built. This does not have any methods -- it's just used</div><div class="line">as dumb storage by TreeList.</div><div class="line">The code below tries to be clear where it treats a Node pointer</div><div class="line">as a tree vs. where it is treated as a list.</div><div class="line"> */</div><div class="line">class Node {</div><div class="line">    <span class="keyword">int</span> data;</div><div class="line">    Node small;</div><div class="line">    Node large;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">Node</span>(<span class="keyword">int</span> data) {</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">        small = <span class="keyword">null</span>;</div><div class="line">        large = <span class="keyword">null</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">TreeList main methods:</div><div class="line">-join() -- utility to connect two list nodes</div><div class="line">-append() -- utility to append two lists</div><div class="line">-treeToList() -- the core recursive function</div><div class="line">-treeInsert() -- used to build the tree</div><div class="line"> */</div><div class="line">class TreeList {</div><div class="line">    <span class="comment">/*</span></div><div class="line">  helper function -- given two list nodes, join them</div><div class="line">  together so the second immediately follow the first.</div><div class="line">  Sets the .next of the first and the .previous of the second.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">join</span>(Node a, Node b) {</div><div class="line">        a.large = b;</div><div class="line">        b.small = a;</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">  helper function -- given two circular doubly linked</div><div class="line">  lists, append them and return the new list.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">append</span>(Node a, Node b) {</div><div class="line">        <span class="comment">// if either is null, return the other</span></div><div class="line">        <span class="keyword">if</span> (a==<span class="keyword">null</span>) <span class="keyword">return</span>(b);</div><div class="line">        <span class="keyword">if</span> (b==<span class="keyword">null</span>) <span class="keyword">return</span>(a);</div><div class="line"></div><div class="line">        <span class="comment">// find the last node in each using the .previous pointer</span></div><div class="line">        Node aLast = a.small;</div><div class="line">        Node bLast = b.small;</div><div class="line"></div><div class="line">        <span class="comment">// join the two together to make it connected and circular</span></div><div class="line">        join(aLast, b);</div><div class="line">        join(bLast, a);</div><div class="line"></div><div class="line">        <span class="keyword">return</span>(a);</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">  --Recursion--</div><div class="line">  Given an ordered binary tree, recursively change it into</div><div class="line">  a circular doubly linked list which is returned.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">treeToList</span>(Node root) {</div><div class="line">        <span class="comment">// base case: empty tree -&gt; empty list</span></div><div class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>) <span class="keyword">return</span>(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Recursively do the subtrees (leap of faith!)</span></div><div class="line">        Node aList = treeToList(root.small);</div><div class="line">        Node bList = treeToList(root.large);</div><div class="line"></div><div class="line">        <span class="comment">// Make the single root node into a list length-1</span></div><div class="line">        <span class="comment">// in preparation for the appending</span></div><div class="line">        root.small = root;</div><div class="line">        root.large = root;</div><div class="line"></div><div class="line">        <span class="comment">// At this point we have three lists, and it's</span></div><div class="line">        <span class="comment">// just a matter of appending them together</span></div><div class="line">        <span class="comment">// in the right order (aList, root, bList)</span></div><div class="line">        aList = append(aList, root);</div><div class="line">        aList = append(aList, bList);</div><div class="line"></div><div class="line">        <span class="keyword">return</span>(aList);</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">  Given a non-empty tree, insert a new node in the proper</div><div class="line">  place. The tree must be non-empty because Java's lack</div><div class="line">  of reference variables makes that case and this</div><div class="line">  method messier than they should be.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">treeInsert</span>(Node root, <span class="keyword">int</span> newData) {</div><div class="line">        <span class="keyword">if</span> (newData&lt;=root.data) {</div><div class="line">            <span class="keyword">if</span> (root.small!=<span class="keyword">null</span>) treeInsert(root.small, newData);</div><div class="line">            <span class="keyword">else</span> root.small = <span class="keyword">new</span> Node(newData);</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> {</div><div class="line">            <span class="keyword">if</span> (root.large!=<span class="keyword">null</span>) treeInsert(root.large, newData);</div><div class="line">            <span class="keyword">else</span> root.large = <span class="keyword">new</span> Node(newData);</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Do an inorder traversal to print a tree</span></div><div class="line">    <span class="comment">// Does not print the ending "\n"</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTree</span>(Node root) {</div><div class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        printTree(root.small);</div><div class="line">        System.out.print(Integer.toString(root.data) + <span class="string">" "</span>);</div><div class="line">        printTree(root.large);</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Do a traversal of the list and print it out</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printList</span>(Node head) {</div><div class="line">        Node current = head;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) {</div><div class="line">            System.out.print(Integer.toString(current.data) + <span class="string">" "</span>);</div><div class="line">            current = current.large;</div><div class="line">            <span class="keyword">if</span> (current == head) <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        System.out.println();</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// Demonstrate tree-&gt;list with the list 1..5</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line"></div><div class="line">        <span class="comment">// first build the tree shown in the problem document</span></div><div class="line">        <span class="comment">// http://cslibrary.stanford.edu/109/</span></div><div class="line">        Node root = <span class="keyword">new</span> Node(<span class="number">4</span>);</div><div class="line">        treeInsert(root, <span class="number">2</span>);</div><div class="line">        treeInsert(root, <span class="number">1</span>);</div><div class="line">        treeInsert(root, <span class="number">3</span>);</div><div class="line">        treeInsert(root, <span class="number">5</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"tree:"</span>);</div><div class="line">        printTree(root);   <span class="comment">// 1 2 3 4 5</span></div><div class="line">        System.out.println();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"list:"</span>);</div><div class="line">        Node head = treeToList(root);</div><div class="line">        printList(head);   <span class="comment">// 1 2 3 4 5   yay!</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="LRU_Cache">LRU Cache</h2>
<blockquote>
<p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.<br>get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br>set(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>
</blockquote>
<h3 id="LinkedHashMap_Solution">LinkedHashMap Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> java.util.LinkedHashMap&lt;Integer,Integer&gt; self = <span class="keyword">new</span> java.util.LinkedHashMap&lt;Integer,Integer&gt;();</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> capacity;</div><div class="line"><span class="keyword">public</span> <span class="title">LRUCache</span>(<span class="keyword">int</span> capacity) {</div><div class="line">    <span class="keyword">this</span>.capacity = capacity;</div><div class="line">}</div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span>(<span class="keyword">int</span> key) {</div><div class="line">    Integer val = self.get(key);</div><div class="line">    <span class="keyword">if</span>(val==<span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    self.remove(key);</div><div class="line">    self.put(key,val);</div><div class="line">    <span class="keyword">return</span> val;</div><div class="line">}</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span>(<span class="keyword">int</span> key, <span class="keyword">int</span> value) {</div><div class="line">    Integer val = self.get(key);</div><div class="line">    <span class="keyword">if</span>(val==<span class="keyword">null</span> && self.size() == capacity){</div><div class="line">        self.remove(self.keySet().iterator().next());</div><div class="line">    }</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(val!=<span class="keyword">null</span>) self.remove(key);</div><div class="line">    self.put(key,value);</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Map_+_List_Solution">Map + List Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> HashMap&lt;Integer,Integer&gt; map;</div><div class="line"><span class="keyword">private</span> ArrayList&lt;Integer&gt; list;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> cap;</div><div class="line"><span class="keyword">public</span> <span class="title">LRUCache</span>(<span class="keyword">int</span> cap){</div><div class="line">    map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">    list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    <span class="keyword">this</span>.cap = cap; </div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span>(<span class="keyword">int</span> key){</div><div class="line">    <span class="keyword">if</span>(!map.containsKey(key)) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> var = map.get(key);</div><div class="line">    list.remove(list.indexOf(key));</div><div class="line">    list.add(key);</div><div class="line">    <span class="keyword">return</span> var;</div><div class="line">}</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span>(<span class="keyword">int</span> key, <span class="keyword">int</span> value){</div><div class="line">    <span class="keyword">int</span> val = get(key);</div><div class="line">    map.put(key, value);</div><div class="line">    <span class="keyword">if</span>(val == -<span class="number">1</span>){</div><div class="line">        list.add(key);</div><div class="line">        <span class="keyword">if</span>(map.size()&gt; cap){</div><div class="line">            map.remove(list.get(<span class="number">0</span>));</div><div class="line">            list.remove(<span class="number">0</span>);</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Search_Insert_Position">Search Insert Position</h2>
<blockquote>
<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.<br>You may assume no duplicates in the array.<br>Here are few examples.<br>[1,3,5,6], 5 → 2<br>[1,3,5,6], 2 → 1<br>[1,3,5,6], 7 → 4<br>[1,3,5,6], 0 → 0</p>
</blockquote>
<h3 id="Binary_Search_Solution">Binary Search Solution</h3>
<ul>
<li>Aside form the obvious scan solution..</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span>(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target) {</div><div class="line">    <span class="keyword">int</span> index = bsearch(A, target, <span class="number">0</span>, A.length-<span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> index;</div><div class="line">}</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">bsearch</span>(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target, <span class="keyword">int</span> l, <span class="keyword">int</span> r){</div><div class="line">    <span class="keyword">int</span> mid = (l+r) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(l&gt;=r) </div><div class="line">    {<span class="keyword">if</span>(A[l]&lt;target) <span class="keyword">return</span> l+<span class="number">1</span>;</div><div class="line">     <span class="keyword">if</span>(A[l]&gt;target) <span class="keyword">return</span> l;}</div><div class="line">    <span class="keyword">if</span>(target == A[mid]) <span class="keyword">return</span> mid;</div><div class="line">    <span class="keyword">if</span>(target &gt; A[mid]) <span class="keyword">return</span> bsearch(A,target,mid+<span class="number">1</span>,r);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> bsearch(A,target,l,mid-<span class="number">1</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Longest_Common_Prefix">Longest Common Prefix</h2>
<blockquote>
<p>Write a function to find the longest common prefix string amongst an array of strings.</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span>(String[] strs) {</div><div class="line">    <span class="keyword">int</span> n = strs.length;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(); </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;strs[<span class="number">0</span>].length();i++){</div><div class="line">        <span class="keyword">char</span> tmp = strs[<span class="number">0</span>].charAt(i);</div><div class="line">        <span class="keyword">for</span>(String s: strs){</div><div class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&gt;s.length() || s.charAt(i)!=tmp) <span class="keyword">return</span> sb.toString();</div><div class="line">        }</div><div class="line">        sb.append(tmp);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> sb.toString();</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Linked_List_Cycle">Linked List Cycle</h2>
<blockquote>
<p>Given a linked list, determine if it has a cycle in it.<br>Follow up:<br>Can you solve it without using extra space?</p>
</blockquote>
<h3 id="Fast_Slow_Pointer_Solution">Fast Slow Pointer Solution</h3>
<ul>
<li>Edge case one: input &lt;=1 element</li>
<li>Edge case two: fast==null || fast.next==null</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span>(ListNode head) {</div><div class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    ListNode a = head;</div><div class="line">    ListNode b = head;</div><div class="line">    <span class="keyword">while</span>(b!=<span class="keyword">null</span> && b.next!=<span class="keyword">null</span>){</div><div class="line">        a = a.next;</div><div class="line">        b = b.next.next;</div><div class="line">        <span class="keyword">if</span>(a==b) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Linked_List_Cycle_II">Linked List Cycle II</h2>
<blockquote>
<p>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.<br>Follow up:<br>Can you solve it without using extra space?</p>
</blockquote>
<h3 id="Solution-3">Solution</h3>
<ul>
<li>fast dis = a+b+c+b = 2 X slow dis = 2 * (a+b) -&gt; a=c</li>
</ul>
<p><img src="http://images.cnitblog.com/blog/354747/201311/05171805-64db9f059a1641e7afaf3dd8223c4fe7.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span>(ListNode head) {</div><div class="line">    ListNode a = head;</div><div class="line">    ListNode b = head;</div><div class="line">    <span class="keyword">while</span>(b!=<span class="keyword">null</span> && b.next!=<span class="keyword">null</span>){</div><div class="line">        a = a.next;</div><div class="line">        b = b.next.next;</div><div class="line">        <span class="keyword">if</span>(a==b){</div><div class="line">            a=head;</div><div class="line">            <span class="keyword">while</span>(a!=b){</div><div class="line">                a=a.next;</div><div class="line">                b=b.next;</div><div class="line">            }</div><div class="line">            <span class="keyword">return</span> a;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<iframe width="100%" height="160" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Falice-jemima%2Fno-diggity-1%3Fin%3Dcici-42%2Fsets%2Fsuits&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="First_Problem_ఠ_ఠ">First Problem ఠ_ఠ</h2>
<blockquote>
<p>Convert a given Binary Tree to Doubly Linked List</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Tree" scheme="http://sunbingjie.tk/tags/Tree/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="LinkedList" scheme="http://sunbingjie.tk/tags/LinkedList/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Combination Sum,Combination Sum II, Combination Sum III]]></title>
    <link href="http://sunbingjie.tk/2015/09/03/9.3/"/>
    <id>http://sunbingjie.tk/2015/09/03/9.3/</id>
    <published>2015-09-04T03:23:46.000Z</published>
    <updated>2015-09-04T03:23:46.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Combination_Sum">Combination Sum</h2>
<blockquote>
<p>Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.<br>The same repeated number may be chosen from C unlimited number of times.<br>Note:<br>All numbers (including target) will be positive integers.<br>Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).<br>The solution set must not contain duplicate combinations.<br>For example, given candidate set 2,3,6,7 and target 7,<br>A solution set is:<br>[7]<br>[2, 2, 3] </p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<p>Simple DFS</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title">combinationSum</span>(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) {</div><div class="line">    List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">    Arrays.sort(candidates);</div><div class="line">    dfs(res, tmp, candidates, target, <span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span>(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; tmp, <span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, <span class="keyword">int</span> start){</div><div class="line">	<span class="keyword">if</span>(target==<span class="number">0</span>) {</div><div class="line">		res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp));</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	}</div><div class="line">	</div><div class="line">	<span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;candidates.length;i++){</div><div class="line">		tmp.add(candidates[i]);</div><div class="line">		dfs(res,tmp,candidates,target-candidates[i],i);</div><div class="line">		tmp.remove(tmp.size()-<span class="number">1</span>);</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<h2 id="Combination_Sum_II">Combination Sum II</h2>
<blockquote>
<p>Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.<br>Each number in C may only be used once in the combination.<br>Note:<br>All numbers (including target) will be positive integers.<br>Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).<br>The solution set must not contain duplicate combinations.<br>For example, given candidate set 10,1,2,7,6,1,5 and target 8,<br>A solution set is:<br>[1, 7]<br>[1, 2, 5]<br>[2, 6]<br>[1, 1, 6]</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<p>Two small changes:</p>
<ul>
<li>pass in i+1 as new start in each recursive call</li>
<li>keep track of a prev value of the last value in the last tuple, if the next one equals to prev then it is duplicate</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title">combinationSum2</span>(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) {</div><div class="line">        List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        Arrays.sort(candidates);</div><div class="line">        dfs2(res, tmp, candidates, target, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs2</span>(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; tmp, <span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, <span class="keyword">int</span> start){</div><div class="line">         </div><div class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>) {</div><div class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> prev=-<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;candidates.length;i++){</div><div class="line">            <span class="keyword">if</span>(target&lt;candidates[i]) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span>(candidates[i]!=prev){</div><div class="line">                tmp.add(candidates[i]);</div><div class="line">                dfs2(res,tmp,candidates,target-candidates[i],i+<span class="number">1</span>);</div><div class="line">                prev=candidates[i];</div><div class="line">                tmp.remove(tmp.size()-<span class="number">1</span>);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Combination_Sum_III">Combination Sum III</h2>
<blockquote>
<p>Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.<br>Ensure that numbers within the set are sorted in ascending order.<br>Example 1:<br>Input: k = 3, n = 7<br>Output:<br>[[1,2,4]]<br>Example 2:<br>Input: k = 3, n = 9<br>Output:<br>[[1,2,6], [1,3,5], [2,3,4]]</p>
</blockquote>
<h3 id="Solution-2">Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title">combinationSum3</span>(<span class="keyword">int</span> k, <span class="keyword">int</span> n) {</div><div class="line">        List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        dfs(res,tmp,k,n,<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    }</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span>(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt;tmp, <span class="keyword">int</span> k, <span class="keyword">int</span> n, <span class="keyword">int</span> start){</div><div class="line">        <span class="keyword">if</span>(tmp.size()==k && n==<span class="number">0</span>){</div><div class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span> || tmp.size()&gt;k) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start; i&lt;=<span class="number">9</span>; i++){</div><div class="line">            tmp.add(i);</div><div class="line">            dfs(res,tmp,k,n-i,i+<span class="number">1</span>);</div><div class="line">            tmp.remove(tmp.size()-<span class="number">1</span>);</div><div class="line">        }</div><div class="line">    }</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Combination_Sum">Combination Sum</h2>
<blockquote>
<p>Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.<br>The same repeated number may be chosen from C unlimited number of times.<br>Note:<br>All numbers (including target) will be positive integers.<br>Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).<br>The solution set must not contain duplicate combinations.<br>For example, given candidate set 2,3,6,7 and target 7,<br>A solution set is:<br>[7]<br>[2, 2, 3] </p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="Math" scheme="http://sunbingjie.tk/tags/Math/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Next Permutation, Permutation, Permutations II, Permutation Sequence]]></title>
    <link href="http://sunbingjie.tk/2015/09/01/8.25/"/>
    <id>http://sunbingjie.tk/2015/09/01/8.25/</id>
    <published>2015-09-01T05:54:06.000Z</published>
    <updated>2015-09-01T05:54:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Next_Permutation">Next Permutation</h2>
<blockquote>
<p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.<br>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).<br>The replacement must be in-place, do not allocate extra memory.<br>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.<br>1,2,3 → 1,3,2<br>3,2,1 → 1,2,3<br>1,1,5 → 1,5,1</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution">Solution</h3>
<p>Find the following <a href="http://blog.csdn.net/linhuanmars/article/details/20434115" target="_blank" rel="external">pattern</a>:</p>
<ol>
<li><p>From right to left, find the first digit (PartitionNumber) which violate the increase trend.</p>
</li>
<li><p>From right to left, find the first digit which larger than PartitionNumber, call it ChangeNumber.</p>
</li>
<li><p>Swap the PartitionNumber and ChangeNumber.</p>
</li>
<li><p>Reverse all the digit on the right of partition index.</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nextPermutation</span>(<span class="keyword">int</span>[] nums) {</div><div class="line">    	<span class="keyword">int</span> i=nums.length-<span class="number">1</span>;</div><div class="line">    	<span class="keyword">while</span>(i&gt;<span class="number">0</span> && nums[i-<span class="number">1</span>]&gt;=nums[i]){</div><div class="line">    		i--;</div><div class="line">    	}</div><div class="line">    	i--;</div><div class="line">  </div><div class="line">    	<span class="keyword">if</span>(i&lt;<span class="number">0</span>) {</div><div class="line">    		reverse(nums,<span class="number">0</span>);</div><div class="line">    		<span class="keyword">return</span> ;</div><div class="line">    	}</div><div class="line">    	<span class="keyword">int</span> j=nums.length-<span class="number">1</span>;</div><div class="line">    	<span class="keyword">while</span>(j&gt;i && nums[j]&lt;=nums[i]){</div><div class="line">    		j--;</div><div class="line">    	}</div><div class="line">      	 </div><div class="line">    	<span class="comment">//swap i,j</span></div><div class="line">    	<span class="keyword">int</span> tmp=nums[i];</div><div class="line">    	nums[i]=nums[j];</div><div class="line">    	nums[j]=tmp;</div><div class="line"></div><div class="line">    	<span class="comment">//reverse the partition after i</span></div><div class="line">    	reverse(nums, i+<span class="number">1</span>);</div><div class="line"></div><div class="line">    	<span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    </div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span>(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i){</div><div class="line">	   <span class="keyword">int</span> l=i, r=nums.length-<span class="number">1</span>;</div><div class="line">	   <span class="keyword">while</span>(l&lt;r){</div><div class="line">			<span class="keyword">int</span> tmp=nums[l];</div><div class="line">			nums[l]=nums[r];</div><div class="line">			nums[r]=tmp;</div><div class="line">			l++;</div><div class="line">			r--;</div><div class="line">	   }</div><div class="line">	   <span class="keyword">return</span>;</div><div class="line">   }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Permutation">Permutation</h2>
<blockquote>
<p>Given a collection of numbers, return all possible permutations.<br>For example,<br>[1,2,3] have the following permutations:<br>[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].</p>
</blockquote>
<h3 id="DFS_Solution">DFS Solution</h3>
<ul>
<li>Each digit has n possible values</li>
<li>If containing the same values as previous ones, continue</li>
<li>When reached end level, remove last element from list</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title">permute</span>(<span class="keyword">int</span>[] nums) {</div><div class="line">    	List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">    	List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    	dfs(result,tmp,nums);</div><div class="line">    	<span class="keyword">return</span> result;</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span>(List&lt;List&lt;Integer&gt;&gt; result,List&lt;Integer&gt; tmp, <span class="keyword">int</span>[] nums){</div><div class="line">    	<span class="keyword">if</span>(tmp.size() == nums.length) {</div><div class="line">    		result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp));</div><div class="line">    		<span class="keyword">return</span>;}</div><div class="line">    	 </div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++){</div><div class="line">    		<span class="keyword">if</span>(tmp.contains(nums[i])) <span class="keyword">continue</span>;</div><div class="line">			 tmp.add(nums[i]);</div><div class="line">			 dfs(result, tmp, nums);</div><div class="line">			 tmp.remove(tmp.size()-<span class="number">1</span>);</div><div class="line">    		}</div><div class="line">    	<span class="keyword">return</span>;</div><div class="line">    }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Permutations_II">Permutations II</h2>
<blockquote>
<p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.<br>For example,<br>[1,1,2] have the following unique permutations:<br>[1,1,2], [1,2,1], and [2,1,1].</p>
</blockquote>
<h3 id="Solution-1">Solution</h3>
<ul>
<li>Similar to Permutations, we only need to make sure not using the same element twice in the same way</li>
<li>Use Visited[] to keep track of currently used element</li>
<li>After sorted, if previous element is not visited and the same with current, then this will be duplicate permutation</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title">permuteUnique</span>(<span class="keyword">int</span>[] num) {</div><div class="line">      List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">      <span class="keyword">if</span>(num == <span class="keyword">null</span> || num.length == <span class="number">0</span>)</div><div class="line">          <span class="keyword">return</span> result;</div><div class="line">      List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">      <span class="keyword">int</span>[] visited = <span class="keyword">new</span> <span class="keyword">int</span>[num.length];</div><div class="line">      </div><div class="line">      Arrays.sort(num);</div><div class="line">      helper(result, list, visited, num);</div><div class="line">      <span class="keyword">return</span> result;</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">helper</span>(List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; list, <span class="keyword">int</span>[] visited, <span class="keyword">int</span>[] num) {</div><div class="line">      <span class="keyword">if</span>(list.size() == num.length) {</div><div class="line">          result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">      }</div><div class="line">      </div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length; i++) {</div><div class="line">          <span class="keyword">if</span> (visited[i] == <span class="number">1</span> || (i != <span class="number">0</span> && num[i] == num[i - <span class="number">1</span>] && visited[i - <span class="number">1</span>] == <span class="number">0</span>)){</div><div class="line">              <span class="keyword">continue</span>;</div><div class="line">          }</div><div class="line">          visited[i] = <span class="number">1</span>;</div><div class="line">          list.add(num[i]);</div><div class="line">          helper(result, list, visited, num);</div><div class="line">          list.remove(list.size() - <span class="number">1</span>);</div><div class="line">          visited[i] = <span class="number">0</span>;</div><div class="line">      }</div><div class="line">  }</div></pre></td></tr></table></figure>

<hr>
<h2 id="Permutation_Sequence">Permutation Sequence</h2>
<blockquote>
<p>The set [1,2,3,…,n] contains a total of n! unique permutations.<br>By listing and labeling all of the permutations in order,<br>We get the following sequence (ie, for n = 3):<br>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>Given n and k, return the kth permutation sequence.<br>Note: Given n will be between 1 and 9 inclusive.</p>
</blockquote>
<h3 id="DFS_Solution-1">DFS Solution</h3>
<ul>
<li>Find kth permutation, LTE…</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPermutation</span>(<span class="keyword">int</span> n, <span class="keyword">int</span> k) {</div><div class="line">        <span class="keyword">int</span>[] count={<span class="number">0</span>};</div><div class="line">        ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        tmp = dfs(tmp, n, k, count);</div><div class="line">        StringBuilder re= <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : tmp){</div><div class="line">            re.append(i);</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> re.toString();</div><div class="line">    }</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">dfs</span>(ArrayList&lt;Integer&gt; tmp, <span class="keyword">int</span> n , <span class="keyword">int</span> k, <span class="keyword">int</span>[] count){</div><div class="line">    </div><div class="line">        <span class="keyword">if</span>(tmp.size() == n){</div><div class="line">            count[<span class="number">0</span>]++;</div><div class="line">            <span class="keyword">if</span>(count[<span class="number">0</span>]==k) <span class="keyword">return</span> tmp;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++){</div><div class="line">            <span class="keyword">if</span>(tmp.contains(i)) <span class="keyword">continue</span>;</div><div class="line">            tmp.add(i);</div><div class="line">            ArrayList&lt;Integer&gt; res = dfs(tmp, n, k, count);</div><div class="line">            <span class="keyword">if</span>(res!= <span class="keyword">null</span>) <span class="keyword">return</span> res;</div><div class="line">            tmp.remove(tmp.size()-<span class="number">1</span>);</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    }</div></pre></td></tr></table></figure>

<h3 id="Math_Solution">Math Solution</h3>
<p>Find the following <a href="https://leetcode.com/discuss/42700/explain-like-im-five-java-solution-in-o-n" target="_blank" rel="external">pattern</a>:</p>
<ul>
<li>To find kth sequence, (k-1)/(n-1)! will be the index of the number to be added</li>
<li>We have elimated  (k-1)/(n-1)! <em> (n-1)! tuples, so keep finding k-(k-1)/(n-1)! </em> (n-1)! === k%(n-1)! in the sub problems</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPermutation</span>(<span class="keyword">int</span> n, <span class="keyword">int</span> k){</div><div class="line">       StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">       k=k-<span class="number">1</span>;</div><div class="line">       <span class="keyword">int</span> factorial=<span class="number">1</span>;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++){</div><div class="line">           factorial*=i;</div><div class="line">       }</div><div class="line">       ArrayList&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) {</div><div class="line">           nums.add(i);</div><div class="line">       }</div><div class="line">       <span class="keyword">while</span>(n&gt;<span class="number">1</span>){</div><div class="line">           <span class="keyword">int</span> index = k/factorial;</div><div class="line">           sb.append(nums.get(index));</div><div class="line">           nums.remove(index);</div><div class="line">           k = k%factorial;</div><div class="line">           factorial = factorial/(n-<span class="number">1</span>);</div><div class="line">            </div><div class="line">           n--;</div><div class="line">       }</div><div class="line">       sb.append(nums.get(<span class="number">0</span>));</div><div class="line">       <span class="keyword">return</span> sb.toString();</div><div class="line">   }</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Next_Permutation">Next Permutation</h2>
<blockquote>
<p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.<br>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).<br>The replacement must be in-place, do not allocate extra memory.<br>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.<br>1,2,3 → 1,3,2<br>3,2,1 → 1,2,3<br>1,1,5 → 1,5,1</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Array" scheme="http://sunbingjie.tk/tags/Array/"/>
    
      <category term="Recursion" scheme="http://sunbingjie.tk/tags/Recursion/"/>
    
      <category term="Math" scheme="http://sunbingjie.tk/tags/Math/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Divide Two Integers]]></title>
    <link href="http://sunbingjie.tk/2015/08/24/8.24/"/>
    <id>http://sunbingjie.tk/2015/08/24/8.24/</id>
    <published>2015-08-24T18:44:52.000Z</published>
    <updated>2015-08-24T18:44:52.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Divide_Two_Integers">Divide Two Integers</h2>
<blockquote>
<p>Divide two integers without using multiplication, division and mod operator.<br>If it is overflow, return MAX_INT.</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution_Subtraction">Solution Subtraction</h3>
<ul>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divide2</span>(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor) { </div><div class="line">       <span class="keyword">if</span> (dividend == <span class="number">0</span> || divisor == <span class="number">0</span>) { </div><div class="line">           <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">       } </div><div class="line">       <span class="keyword">long</span> a = Math.abs((<span class="keyword">long</span>) dividend); </div><div class="line">       <span class="keyword">long</span> b = Math.abs((<span class="keyword">long</span>) divisor); </div><div class="line">       <span class="keyword">if</span> (b &gt; a) { </div><div class="line">           <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">       } </div><div class="line">  </div><div class="line">       <span class="keyword">long</span> sum = <span class="number">0</span>; </div><div class="line">       <span class="keyword">long</span> pow = <span class="number">0</span>; </div><div class="line">       <span class="keyword">long</span> result = <span class="number">0</span>; </div><div class="line">       <span class="keyword">while</span> (a &gt;= b) { </div><div class="line">           pow = <span class="number">1</span>; </div><div class="line">           sum = b; </div><div class="line">           <span class="keyword">while</span> (sum + sum &lt;= a) { </div><div class="line">               sum += sum; </div><div class="line">               pow += pow; </div><div class="line">           } </div><div class="line">           a -= sum; </div><div class="line">           result += pow; </div><div class="line">       }</div><div class="line">       result = ((((dividend ^ divisor) &gt;&gt; <span class="number">31</span>) & <span class="number">1</span>) == <span class="number">1</span>) ? -result: result;   </div><div class="line">       </div><div class="line">        <span class="keyword">if</span> (result &gt; Integer.MAX_VALUE || result &lt; Integer.MIN_VALUE) {</div><div class="line">       	 </div><div class="line">           <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">        }</div><div class="line">         </div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)result;</div><div class="line">   }</div></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Solution_Bit_Manipulation">Solution Bit Manipulation</h3>
<ul>
<li></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divide</span>(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor){</div><div class="line">  	  <span class="keyword">if</span> (dividend == <span class="number">0</span> || divisor == <span class="number">0</span>) { </div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">        } </div><div class="line">        <span class="keyword">long</span> a = Math.abs((<span class="keyword">long</span>) dividend); </div><div class="line">        <span class="keyword">long</span> b = Math.abs((<span class="keyword">long</span>) divisor); </div><div class="line">        <span class="keyword">long</span> bb = Math.abs((<span class="keyword">long</span>) divisor); </div><div class="line">        <span class="keyword">if</span> (b &gt; a) { </div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">        } </div><div class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>; </div><div class="line">        <span class="keyword">long</span> pow = <span class="number">0</span>; </div><div class="line">        <span class="keyword">long</span> count = <span class="number">1</span>;</div><div class="line">        <span class="keyword">long</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(a&gt;bb){</div><div class="line">      	  bb=bb&lt;&lt;<span class="number">1</span>;</div><div class="line">      	  count=count&lt;&lt;<span class="number">1</span>;</div><div class="line">        }</div><div class="line">       </div><div class="line">        <span class="keyword">while</span> (a&gt;=b){</div><div class="line">            <span class="keyword">while</span> (a&gt;=bb){</div><div class="line">                a -= bb;</div><div class="line">                result = result+count;</div><div class="line">            }</div><div class="line">            bb=bb&gt;&gt;<span class="number">1</span>;</div><div class="line">      	  count=count&gt;&gt;<span class="number">1</span>;    </div><div class="line">        }</div><div class="line">        </div><div class="line">        result = ((((dividend ^ divisor) &gt;&gt; <span class="number">31</span>) & <span class="number">1</span>) == <span class="number">1</span>) ? -result: result;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (result &gt; Integer.MAX_VALUE || result &lt; Integer.MIN_VALUE) {</div><div class="line">       	 </div><div class="line">           <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)result;       </div><div class="line">  }</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Divide_Two_Integers">Divide Two Integers</h2>
<blockquote>
<p>Divide two integers without using multiplication, division and mod operator.<br>If it is overflow, return MAX_INT.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Math" scheme="http://sunbingjie.tk/tags/Math/"/>
    
      <category term="BitManipulation" scheme="http://sunbingjie.tk/tags/BitManipulation/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swap Nodes in Pairs]]></title>
    <link href="http://sunbingjie.tk/2015/08/24/8.15/"/>
    <id>http://sunbingjie.tk/2015/08/24/8.15/</id>
    <published>2015-08-24T18:44:51.000Z</published>
    <updated>2015-08-24T18:44:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Swap_Nodes_in_Pairs">Swap Nodes in Pairs</h2>
<blockquote>
<p>Given a linked list, swap every two adjacent nodes and return its head.<br>For example,<br>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.<br>Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.</p>
</blockquote>
<a id="more"></a>
<h3 id="Solution_In-Place">Solution In-Place</h3>
<ul>
<li>Use a dummyhead to avoid dealin with null cases, as usual</li>
<li>Keep track of the first node in next pair</li>
<li>Termination conditions: take care of odd and even node number cases</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">swapPairs</span>(ListNode head) {</div><div class="line">	ListNode dummyhead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">	dummyhead.next = head; <span class="comment">//use dummyhead to deal with null case</span></div><div class="line">	ListNode first = dummyhead;</div><div class="line">	ListNode second =head;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(second!=<span class="keyword">null</span> && second.next!=<span class="keyword">null</span>){<span class="comment">//when second is null (odd), or second next is null(even)</span></div><div class="line">	ListNode tmp = second.next.next; <span class="comment">//record next start</span></div><div class="line">	second.next.next = second; <span class="comment">//reverse</span></div><div class="line">	first.next = second.next; <span class="comment">// link to second</span></div><div class="line">	second.next = tmp; <span class="comment">// link to next start</span></div><div class="line">	first=second; <span class="comment">// move to next</span></div><div class="line">	second = second.next; <span class="comment">//move to next</span></div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> dummyhead.next;</div><div class="line">	}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Swap_Nodes_in_Pairs">Swap Nodes in Pairs</h2>
<blockquote>
<p>Given a linked list, swap every two adjacent nodes and return its head.<br>For example,<br>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.<br>Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="LinkedList" scheme="http://sunbingjie.tk/tags/LinkedList/"/>
    
      <category term="刷题" scheme="http://sunbingjie.tk/categories/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
</feed>
